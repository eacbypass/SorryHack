// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamdatagram_messages_auth.proto

#ifndef PROTOBUF_steamdatagram_5fmessages_5fauth_2eproto__INCLUDED
#define PROTOBUF_steamdatagram_5fmessages_5fauth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "steamnetworkingsockets_messages_certs.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
void protobuf_AssignDesc_steamdatagram_5fmessages_5fauth_2eproto();
void protobuf_ShutdownFile_steamdatagram_5fmessages_5fauth_2eproto();

class CMsgSteamDatagramRelayAuthTicket;
class CMsgSteamDatagramRelayAuthTicket_ExtraField;
class CMsgSteamDatagramSignedRelayAuthTicket;
class CMsgSteamDatagramCachedCredentialsForApp;
class CMsgSteamDatagramGameCoordinatorServerLogin;
class CMsgSteamDatagramSignedGameCoordinatorServerLogin;
class CMsgSteamDatagramHostedServerAddressPlaintext;

// ===================================================================

class CMsgSteamDatagramRelayAuthTicket_ExtraField : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramRelayAuthTicket_ExtraField();
  virtual ~CMsgSteamDatagramRelayAuthTicket_ExtraField();

  CMsgSteamDatagramRelayAuthTicket_ExtraField(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from);

  inline CMsgSteamDatagramRelayAuthTicket_ExtraField& operator=(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramRelayAuthTicket_ExtraField& default_instance();

  void Swap(CMsgSteamDatagramRelayAuthTicket_ExtraField* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramRelayAuthTicket_ExtraField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from);
  void MergeFrom(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string string_value = 2;
  inline bool has_string_value() const;
  inline void clear_string_value();
  static const int kStringValueFieldNumber = 2;
  inline const ::std::string& string_value() const;
  inline void set_string_value(const ::std::string& value);
  inline void set_string_value(const char* value);
  inline void set_string_value(const char* value, size_t size);
  inline ::std::string* mutable_string_value();
  inline ::std::string* release_string_value();
  inline void set_allocated_string_value(::std::string* string_value);

  // optional sint64 int64_value = 3;
  inline bool has_int64_value() const;
  inline void clear_int64_value();
  static const int kInt64ValueFieldNumber = 3;
  inline ::google::protobuf::int64 int64_value() const;
  inline void set_int64_value(::google::protobuf::int64 value);

  // optional fixed64 fixed64_value = 5;
  inline bool has_fixed64_value() const;
  inline void clear_fixed64_value();
  static const int kFixed64ValueFieldNumber = 5;
  inline ::google::protobuf::uint64 fixed64_value() const;
  inline void set_fixed64_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramRelayAuthTicket.ExtraField)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_string_value();
  inline void clear_has_string_value();
  inline void set_has_int64_value();
  inline void clear_has_int64_value();
  inline void set_has_fixed64_value();
  inline void clear_has_fixed64_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* string_value_;
  ::google::protobuf::int64 int64_value_;
  ::google::protobuf::uint64 fixed64_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fauth_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fauth_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramRelayAuthTicket_ExtraField* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramRelayAuthTicket : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramRelayAuthTicket();
  virtual ~CMsgSteamDatagramRelayAuthTicket();

  CMsgSteamDatagramRelayAuthTicket(const CMsgSteamDatagramRelayAuthTicket& from);

  inline CMsgSteamDatagramRelayAuthTicket& operator=(const CMsgSteamDatagramRelayAuthTicket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramRelayAuthTicket& default_instance();

  void Swap(CMsgSteamDatagramRelayAuthTicket* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramRelayAuthTicket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramRelayAuthTicket& from);
  void MergeFrom(const CMsgSteamDatagramRelayAuthTicket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramRelayAuthTicket_ExtraField ExtraField;

  // accessors -------------------------------------------------------

  // optional fixed32 time_expiry = 1;
  inline bool has_time_expiry() const;
  inline void clear_time_expiry();
  static const int kTimeExpiryFieldNumber = 1;
  inline ::google::protobuf::uint32 time_expiry() const;
  inline void set_time_expiry(::google::protobuf::uint32 value);

  // optional string authorized_client_identity_string = 14;
  inline bool has_authorized_client_identity_string() const;
  inline void clear_authorized_client_identity_string();
  static const int kAuthorizedClientIdentityStringFieldNumber = 14;
  inline const ::std::string& authorized_client_identity_string() const;
  inline void set_authorized_client_identity_string(const ::std::string& value);
  inline void set_authorized_client_identity_string(const char* value);
  inline void set_authorized_client_identity_string(const char* value, size_t size);
  inline ::std::string* mutable_authorized_client_identity_string();
  inline ::std::string* release_authorized_client_identity_string();
  inline void set_allocated_authorized_client_identity_string(::std::string* authorized_client_identity_string);

  // optional string gameserver_identity_string = 15;
  inline bool has_gameserver_identity_string() const;
  inline void clear_gameserver_identity_string();
  static const int kGameserverIdentityStringFieldNumber = 15;
  inline const ::std::string& gameserver_identity_string() const;
  inline void set_gameserver_identity_string(const ::std::string& value);
  inline void set_gameserver_identity_string(const char* value);
  inline void set_gameserver_identity_string(const char* value, size_t size);
  inline ::std::string* mutable_gameserver_identity_string();
  inline ::std::string* release_gameserver_identity_string();
  inline void set_allocated_gameserver_identity_string(::std::string* gameserver_identity_string);

  // optional fixed32 authorized_public_ip = 3;
  inline bool has_authorized_public_ip() const;
  inline void clear_authorized_public_ip();
  static const int kAuthorizedPublicIpFieldNumber = 3;
  inline ::google::protobuf::uint32 authorized_public_ip() const;
  inline void set_authorized_public_ip(::google::protobuf::uint32 value);

  // optional bytes gameserver_address = 11;
  inline bool has_gameserver_address() const;
  inline void clear_gameserver_address();
  static const int kGameserverAddressFieldNumber = 11;
  inline const ::std::string& gameserver_address() const;
  inline void set_gameserver_address(const ::std::string& value);
  inline void set_gameserver_address(const char* value);
  inline void set_gameserver_address(const void* value, size_t size);
  inline ::std::string* mutable_gameserver_address();
  inline ::std::string* release_gameserver_address();
  inline void set_allocated_gameserver_address(::std::string* gameserver_address);

  // optional uint32 app_id = 7;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 7;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // optional uint32 virtual_port = 10;
  inline bool has_virtual_port() const;
  inline void clear_virtual_port();
  static const int kVirtualPortFieldNumber = 10;
  inline ::google::protobuf::uint32 virtual_port() const;
  inline void set_virtual_port(::google::protobuf::uint32 value);

  // repeated .CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
  inline int extra_fields_size() const;
  inline void clear_extra_fields();
  static const int kExtraFieldsFieldNumber = 8;
  inline const ::CMsgSteamDatagramRelayAuthTicket_ExtraField& extra_fields(int index) const;
  inline ::CMsgSteamDatagramRelayAuthTicket_ExtraField* mutable_extra_fields(int index);
  inline ::CMsgSteamDatagramRelayAuthTicket_ExtraField* add_extra_fields();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramRelayAuthTicket_ExtraField >&
      extra_fields() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramRelayAuthTicket_ExtraField >*
      mutable_extra_fields();

  // optional fixed64 legacy_authorized_steam_id = 2;
  inline bool has_legacy_authorized_steam_id() const;
  inline void clear_legacy_authorized_steam_id();
  static const int kLegacyAuthorizedSteamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 legacy_authorized_steam_id() const;
  inline void set_legacy_authorized_steam_id(::google::protobuf::uint64 value);

  // optional fixed64 legacy_gameserver_steam_id = 4;
  inline bool has_legacy_gameserver_steam_id() const;
  inline void clear_legacy_gameserver_steam_id();
  static const int kLegacyGameserverSteamIdFieldNumber = 4;
  inline ::google::protobuf::uint64 legacy_gameserver_steam_id() const;
  inline void set_legacy_gameserver_steam_id(::google::protobuf::uint64 value);

  // optional fixed64 legacy_gameserver_net_id = 5;
  inline bool has_legacy_gameserver_net_id() const;
  inline void clear_legacy_gameserver_net_id();
  static const int kLegacyGameserverNetIdFieldNumber = 5;
  inline ::google::protobuf::uint64 legacy_gameserver_net_id() const;
  inline void set_legacy_gameserver_net_id(::google::protobuf::uint64 value);

  // optional fixed32 legacy_gameserver_pop_id = 9;
  inline bool has_legacy_gameserver_pop_id() const;
  inline void clear_legacy_gameserver_pop_id();
  static const int kLegacyGameserverPopIdFieldNumber = 9;
  inline ::google::protobuf::uint32 legacy_gameserver_pop_id() const;
  inline void set_legacy_gameserver_pop_id(::google::protobuf::uint32 value);

  // optional bytes legacy_authorized_client_identity_binary = 12;
  inline bool has_legacy_authorized_client_identity_binary() const;
  inline void clear_legacy_authorized_client_identity_binary();
  static const int kLegacyAuthorizedClientIdentityBinaryFieldNumber = 12;
  inline const ::std::string& legacy_authorized_client_identity_binary() const;
  inline void set_legacy_authorized_client_identity_binary(const ::std::string& value);
  inline void set_legacy_authorized_client_identity_binary(const char* value);
  inline void set_legacy_authorized_client_identity_binary(const void* value, size_t size);
  inline ::std::string* mutable_legacy_authorized_client_identity_binary();
  inline ::std::string* release_legacy_authorized_client_identity_binary();
  inline void set_allocated_legacy_authorized_client_identity_binary(::std::string* legacy_authorized_client_identity_binary);

  // optional bytes legacy_gameserver_identity_binary = 13;
  inline bool has_legacy_gameserver_identity_binary() const;
  inline void clear_legacy_gameserver_identity_binary();
  static const int kLegacyGameserverIdentityBinaryFieldNumber = 13;
  inline const ::std::string& legacy_gameserver_identity_binary() const;
  inline void set_legacy_gameserver_identity_binary(const ::std::string& value);
  inline void set_legacy_gameserver_identity_binary(const char* value);
  inline void set_legacy_gameserver_identity_binary(const void* value, size_t size);
  inline ::std::string* mutable_legacy_gameserver_identity_binary();
  inline ::std::string* release_legacy_gameserver_identity_binary();
  inline void set_allocated_legacy_gameserver_identity_binary(::std::string* legacy_gameserver_identity_binary);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramRelayAuthTicket)
 private:
  inline void set_has_time_expiry();
  inline void clear_has_time_expiry();
  inline void set_has_authorized_client_identity_string();
  inline void clear_has_authorized_client_identity_string();
  inline void set_has_gameserver_identity_string();
  inline void clear_has_gameserver_identity_string();
  inline void set_has_authorized_public_ip();
  inline void clear_has_authorized_public_ip();
  inline void set_has_gameserver_address();
  inline void clear_has_gameserver_address();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_virtual_port();
  inline void clear_has_virtual_port();
  inline void set_has_legacy_authorized_steam_id();
  inline void clear_has_legacy_authorized_steam_id();
  inline void set_has_legacy_gameserver_steam_id();
  inline void clear_has_legacy_gameserver_steam_id();
  inline void set_has_legacy_gameserver_net_id();
  inline void clear_has_legacy_gameserver_net_id();
  inline void set_has_legacy_gameserver_pop_id();
  inline void clear_has_legacy_gameserver_pop_id();
  inline void set_has_legacy_authorized_client_identity_binary();
  inline void clear_has_legacy_authorized_client_identity_binary();
  inline void set_has_legacy_gameserver_identity_binary();
  inline void clear_has_legacy_gameserver_identity_binary();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* authorized_client_identity_string_;
  ::google::protobuf::uint32 time_expiry_;
  ::google::protobuf::uint32 authorized_public_ip_;
  ::std::string* gameserver_identity_string_;
  ::std::string* gameserver_address_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 virtual_port_;
  ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramRelayAuthTicket_ExtraField > extra_fields_;
  ::google::protobuf::uint64 legacy_authorized_steam_id_;
  ::google::protobuf::uint64 legacy_gameserver_steam_id_;
  ::google::protobuf::uint64 legacy_gameserver_net_id_;
  ::std::string* legacy_authorized_client_identity_binary_;
  ::std::string* legacy_gameserver_identity_binary_;
  ::google::protobuf::uint32 legacy_gameserver_pop_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fauth_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fauth_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramRelayAuthTicket* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramSignedRelayAuthTicket : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramSignedRelayAuthTicket();
  virtual ~CMsgSteamDatagramSignedRelayAuthTicket();

  CMsgSteamDatagramSignedRelayAuthTicket(const CMsgSteamDatagramSignedRelayAuthTicket& from);

  inline CMsgSteamDatagramSignedRelayAuthTicket& operator=(const CMsgSteamDatagramSignedRelayAuthTicket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramSignedRelayAuthTicket& default_instance();

  void Swap(CMsgSteamDatagramSignedRelayAuthTicket* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramSignedRelayAuthTicket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramSignedRelayAuthTicket& from);
  void MergeFrom(const CMsgSteamDatagramSignedRelayAuthTicket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 reserved_do_not_use = 1;
  inline bool has_reserved_do_not_use() const;
  inline void clear_reserved_do_not_use();
  static const int kReservedDoNotUseFieldNumber = 1;
  inline ::google::protobuf::uint64 reserved_do_not_use() const;
  inline void set_reserved_do_not_use(::google::protobuf::uint64 value);

  // optional fixed64 key_id = 2;
  inline bool has_key_id() const;
  inline void clear_key_id();
  static const int kKeyIdFieldNumber = 2;
  inline ::google::protobuf::uint64 key_id() const;
  inline void set_key_id(::google::protobuf::uint64 value);

  // optional bytes ticket = 3;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 3;
  inline const ::std::string& ticket() const;
  inline void set_ticket(const ::std::string& value);
  inline void set_ticket(const char* value);
  inline void set_ticket(const void* value, size_t size);
  inline ::std::string* mutable_ticket();
  inline ::std::string* release_ticket();
  inline void set_allocated_ticket(::std::string* ticket);

  // optional bytes signature = 4;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 4;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramSignedRelayAuthTicket)
 private:
  inline void set_has_reserved_do_not_use();
  inline void clear_has_reserved_do_not_use();
  inline void set_has_key_id();
  inline void clear_has_key_id();
  inline void set_has_ticket();
  inline void clear_has_ticket();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 reserved_do_not_use_;
  ::google::protobuf::uint64 key_id_;
  ::std::string* ticket_;
  ::std::string* signature_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fauth_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fauth_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramSignedRelayAuthTicket* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramCachedCredentialsForApp : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramCachedCredentialsForApp();
  virtual ~CMsgSteamDatagramCachedCredentialsForApp();

  CMsgSteamDatagramCachedCredentialsForApp(const CMsgSteamDatagramCachedCredentialsForApp& from);

  inline CMsgSteamDatagramCachedCredentialsForApp& operator=(const CMsgSteamDatagramCachedCredentialsForApp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramCachedCredentialsForApp& default_instance();

  void Swap(CMsgSteamDatagramCachedCredentialsForApp* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramCachedCredentialsForApp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramCachedCredentialsForApp& from);
  void MergeFrom(const CMsgSteamDatagramCachedCredentialsForApp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes private_key = 1;
  inline bool has_private_key() const;
  inline void clear_private_key();
  static const int kPrivateKeyFieldNumber = 1;
  inline const ::std::string& private_key() const;
  inline void set_private_key(const ::std::string& value);
  inline void set_private_key(const char* value);
  inline void set_private_key(const void* value, size_t size);
  inline ::std::string* mutable_private_key();
  inline ::std::string* release_private_key();
  inline void set_allocated_private_key(::std::string* private_key);

  // optional bytes cert = 2;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 2;
  inline const ::std::string& cert() const;
  inline void set_cert(const ::std::string& value);
  inline void set_cert(const char* value);
  inline void set_cert(const void* value, size_t size);
  inline ::std::string* mutable_cert();
  inline ::std::string* release_cert();
  inline void set_allocated_cert(::std::string* cert);

  // repeated bytes relay_tickets = 3;
  inline int relay_tickets_size() const;
  inline void clear_relay_tickets();
  static const int kRelayTicketsFieldNumber = 3;
  inline const ::std::string& relay_tickets(int index) const;
  inline ::std::string* mutable_relay_tickets(int index);
  inline void set_relay_tickets(int index, const ::std::string& value);
  inline void set_relay_tickets(int index, const char* value);
  inline void set_relay_tickets(int index, const void* value, size_t size);
  inline ::std::string* add_relay_tickets();
  inline void add_relay_tickets(const ::std::string& value);
  inline void add_relay_tickets(const char* value);
  inline void add_relay_tickets(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& relay_tickets() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_relay_tickets();

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramCachedCredentialsForApp)
 private:
  inline void set_has_private_key();
  inline void clear_has_private_key();
  inline void set_has_cert();
  inline void clear_has_cert();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* private_key_;
  ::std::string* cert_;
  ::google::protobuf::RepeatedPtrField< ::std::string> relay_tickets_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fauth_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fauth_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramCachedCredentialsForApp* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramGameCoordinatorServerLogin : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramGameCoordinatorServerLogin();
  virtual ~CMsgSteamDatagramGameCoordinatorServerLogin();

  CMsgSteamDatagramGameCoordinatorServerLogin(const CMsgSteamDatagramGameCoordinatorServerLogin& from);

  inline CMsgSteamDatagramGameCoordinatorServerLogin& operator=(const CMsgSteamDatagramGameCoordinatorServerLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramGameCoordinatorServerLogin& default_instance();

  void Swap(CMsgSteamDatagramGameCoordinatorServerLogin* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramGameCoordinatorServerLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramGameCoordinatorServerLogin& from);
  void MergeFrom(const CMsgSteamDatagramGameCoordinatorServerLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 time_generated = 1;
  inline bool has_time_generated() const;
  inline void clear_time_generated();
  static const int kTimeGeneratedFieldNumber = 1;
  inline ::google::protobuf::uint32 time_generated() const;
  inline void set_time_generated(::google::protobuf::uint32 value);

  // optional uint32 appid = 2;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 2;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // optional bytes routing = 3;
  inline bool has_routing() const;
  inline void clear_routing();
  static const int kRoutingFieldNumber = 3;
  inline const ::std::string& routing() const;
  inline void set_routing(const ::std::string& value);
  inline void set_routing(const char* value);
  inline void set_routing(const void* value, size_t size);
  inline ::std::string* mutable_routing();
  inline ::std::string* release_routing();
  inline void set_allocated_routing(::std::string* routing);

  // optional bytes appdata = 4;
  inline bool has_appdata() const;
  inline void clear_appdata();
  static const int kAppdataFieldNumber = 4;
  inline const ::std::string& appdata() const;
  inline void set_appdata(const ::std::string& value);
  inline void set_appdata(const char* value);
  inline void set_appdata(const void* value, size_t size);
  inline ::std::string* mutable_appdata();
  inline ::std::string* release_appdata();
  inline void set_allocated_appdata(::std::string* appdata);

  // optional bytes legacy_identity_binary = 5;
  inline bool has_legacy_identity_binary() const;
  inline void clear_legacy_identity_binary();
  static const int kLegacyIdentityBinaryFieldNumber = 5;
  inline const ::std::string& legacy_identity_binary() const;
  inline void set_legacy_identity_binary(const ::std::string& value);
  inline void set_legacy_identity_binary(const char* value);
  inline void set_legacy_identity_binary(const void* value, size_t size);
  inline ::std::string* mutable_legacy_identity_binary();
  inline ::std::string* release_legacy_identity_binary();
  inline void set_allocated_legacy_identity_binary(::std::string* legacy_identity_binary);

  // optional string identity_string = 6;
  inline bool has_identity_string() const;
  inline void clear_identity_string();
  static const int kIdentityStringFieldNumber = 6;
  inline const ::std::string& identity_string() const;
  inline void set_identity_string(const ::std::string& value);
  inline void set_identity_string(const char* value);
  inline void set_identity_string(const char* value, size_t size);
  inline ::std::string* mutable_identity_string();
  inline ::std::string* release_identity_string();
  inline void set_allocated_identity_string(::std::string* identity_string);

  // optional fixed64 dummy_steam_id = 99;
  inline bool has_dummy_steam_id() const;
  inline void clear_dummy_steam_id();
  static const int kDummySteamIdFieldNumber = 99;
  inline ::google::protobuf::uint64 dummy_steam_id() const;
  inline void set_dummy_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramGameCoordinatorServerLogin)
 private:
  inline void set_has_time_generated();
  inline void clear_has_time_generated();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_routing();
  inline void clear_has_routing();
  inline void set_has_appdata();
  inline void clear_has_appdata();
  inline void set_has_legacy_identity_binary();
  inline void clear_has_legacy_identity_binary();
  inline void set_has_identity_string();
  inline void clear_has_identity_string();
  inline void set_has_dummy_steam_id();
  inline void clear_has_dummy_steam_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_generated_;
  ::google::protobuf::uint32 appid_;
  ::std::string* routing_;
  ::std::string* appdata_;
  ::std::string* legacy_identity_binary_;
  ::std::string* identity_string_;
  ::google::protobuf::uint64 dummy_steam_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fauth_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fauth_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramGameCoordinatorServerLogin* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramSignedGameCoordinatorServerLogin : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramSignedGameCoordinatorServerLogin();
  virtual ~CMsgSteamDatagramSignedGameCoordinatorServerLogin();

  CMsgSteamDatagramSignedGameCoordinatorServerLogin(const CMsgSteamDatagramSignedGameCoordinatorServerLogin& from);

  inline CMsgSteamDatagramSignedGameCoordinatorServerLogin& operator=(const CMsgSteamDatagramSignedGameCoordinatorServerLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramSignedGameCoordinatorServerLogin& default_instance();

  void Swap(CMsgSteamDatagramSignedGameCoordinatorServerLogin* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramSignedGameCoordinatorServerLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramSignedGameCoordinatorServerLogin& from);
  void MergeFrom(const CMsgSteamDatagramSignedGameCoordinatorServerLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramCertificateSigned cert = 1;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 1;
  inline const ::CMsgSteamDatagramCertificateSigned& cert() const;
  inline ::CMsgSteamDatagramCertificateSigned* mutable_cert();
  inline ::CMsgSteamDatagramCertificateSigned* release_cert();
  inline void set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert);

  // optional bytes login = 2;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 2;
  inline const ::std::string& login() const;
  inline void set_login(const ::std::string& value);
  inline void set_login(const char* value);
  inline void set_login(const void* value, size_t size);
  inline ::std::string* mutable_login();
  inline ::std::string* release_login();
  inline void set_allocated_login(::std::string* login);

  // optional bytes signature = 3;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 3;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramSignedGameCoordinatorServerLogin)
 private:
  inline void set_has_cert();
  inline void clear_has_cert();
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgSteamDatagramCertificateSigned* cert_;
  ::std::string* login_;
  ::std::string* signature_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fauth_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fauth_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramSignedGameCoordinatorServerLogin* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramHostedServerAddressPlaintext : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramHostedServerAddressPlaintext();
  virtual ~CMsgSteamDatagramHostedServerAddressPlaintext();

  CMsgSteamDatagramHostedServerAddressPlaintext(const CMsgSteamDatagramHostedServerAddressPlaintext& from);

  inline CMsgSteamDatagramHostedServerAddressPlaintext& operator=(const CMsgSteamDatagramHostedServerAddressPlaintext& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramHostedServerAddressPlaintext& default_instance();

  void Swap(CMsgSteamDatagramHostedServerAddressPlaintext* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramHostedServerAddressPlaintext* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramHostedServerAddressPlaintext& from);
  void MergeFrom(const CMsgSteamDatagramHostedServerAddressPlaintext& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 ipv4 = 1;
  inline bool has_ipv4() const;
  inline void clear_ipv4();
  static const int kIpv4FieldNumber = 1;
  inline ::google::protobuf::uint32 ipv4() const;
  inline void set_ipv4(::google::protobuf::uint32 value);

  // optional bytes ipv6 = 2;
  inline bool has_ipv6() const;
  inline void clear_ipv6();
  static const int kIpv6FieldNumber = 2;
  inline const ::std::string& ipv6() const;
  inline void set_ipv6(const ::std::string& value);
  inline void set_ipv6(const char* value);
  inline void set_ipv6(const void* value, size_t size);
  inline ::std::string* mutable_ipv6();
  inline ::std::string* release_ipv6();
  inline void set_allocated_ipv6(::std::string* ipv6);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional fixed64 routing_secret = 4;
  inline bool has_routing_secret() const;
  inline void clear_routing_secret();
  static const int kRoutingSecretFieldNumber = 4;
  inline ::google::protobuf::uint64 routing_secret() const;
  inline void set_routing_secret(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramHostedServerAddressPlaintext)
 private:
  inline void set_has_ipv4();
  inline void clear_has_ipv4();
  inline void set_has_ipv6();
  inline void clear_has_ipv6();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_routing_secret();
  inline void clear_has_routing_secret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ipv6_;
  ::google::protobuf::uint32 ipv4_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint64 routing_secret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fauth_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fauth_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramHostedServerAddressPlaintext* default_instance_;
};
// ===================================================================


// ===================================================================

// CMsgSteamDatagramRelayAuthTicket_ExtraField

// optional string name = 1;
inline bool CMsgSteamDatagramRelayAuthTicket_ExtraField::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgSteamDatagramRelayAuthTicket_ExtraField::name() const {
  return *name_;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket_ExtraField::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket_ExtraField::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string string_value = 2;
inline bool CMsgSteamDatagramRelayAuthTicket_ExtraField::has_string_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_has_string_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::clear_string_value() {
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    string_value_->clear();
  }
  clear_has_string_value();
}
inline const ::std::string& CMsgSteamDatagramRelayAuthTicket_ExtraField::string_value() const {
  return *string_value_;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_string_value(const ::std::string& value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_string_value(const char* value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket_ExtraField::mutable_string_value() {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  return string_value_;
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket_ExtraField::release_string_value() {
  clear_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_value_;
    string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_allocated_string_value(::std::string* string_value) {
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    delete string_value_;
  }
  if (string_value) {
    set_has_string_value();
    string_value_ = string_value;
  } else {
    clear_has_string_value();
    string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint64 int64_value = 3;
inline bool CMsgSteamDatagramRelayAuthTicket_ExtraField::has_int64_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_has_int64_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::clear_has_int64_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::clear_int64_value() {
  int64_value_ = GOOGLE_LONGLONG(0);
  clear_has_int64_value();
}
inline ::google::protobuf::int64 CMsgSteamDatagramRelayAuthTicket_ExtraField::int64_value() const {
  return int64_value_;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_int64_value(::google::protobuf::int64 value) {
  set_has_int64_value();
  int64_value_ = value;
}

// optional fixed64 fixed64_value = 5;
inline bool CMsgSteamDatagramRelayAuthTicket_ExtraField::has_fixed64_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_has_fixed64_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::clear_has_fixed64_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::clear_fixed64_value() {
  fixed64_value_ = GOOGLE_ULONGLONG(0);
  clear_has_fixed64_value();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramRelayAuthTicket_ExtraField::fixed64_value() const {
  return fixed64_value_;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_fixed64_value(::google::protobuf::uint64 value) {
  set_has_fixed64_value();
  fixed64_value_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramRelayAuthTicket

// optional fixed32 time_expiry = 1;
inline bool CMsgSteamDatagramRelayAuthTicket::has_time_expiry() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_has_time_expiry() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_has_time_expiry() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_time_expiry() {
  time_expiry_ = 0u;
  clear_has_time_expiry();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayAuthTicket::time_expiry() const {
  return time_expiry_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_time_expiry(::google::protobuf::uint32 value) {
  set_has_time_expiry();
  time_expiry_ = value;
}

// optional string authorized_client_identity_string = 14;
inline bool CMsgSteamDatagramRelayAuthTicket::has_authorized_client_identity_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_has_authorized_client_identity_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_has_authorized_client_identity_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_authorized_client_identity_string() {
  if (authorized_client_identity_string_ != &::google::protobuf::internal::kEmptyString) {
    authorized_client_identity_string_->clear();
  }
  clear_has_authorized_client_identity_string();
}
inline const ::std::string& CMsgSteamDatagramRelayAuthTicket::authorized_client_identity_string() const {
  return *authorized_client_identity_string_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_authorized_client_identity_string(const ::std::string& value) {
  set_has_authorized_client_identity_string();
  if (authorized_client_identity_string_ == &::google::protobuf::internal::kEmptyString) {
    authorized_client_identity_string_ = new ::std::string;
  }
  authorized_client_identity_string_->assign(value);
}
inline void CMsgSteamDatagramRelayAuthTicket::set_authorized_client_identity_string(const char* value) {
  set_has_authorized_client_identity_string();
  if (authorized_client_identity_string_ == &::google::protobuf::internal::kEmptyString) {
    authorized_client_identity_string_ = new ::std::string;
  }
  authorized_client_identity_string_->assign(value);
}
inline void CMsgSteamDatagramRelayAuthTicket::set_authorized_client_identity_string(const char* value, size_t size) {
  set_has_authorized_client_identity_string();
  if (authorized_client_identity_string_ == &::google::protobuf::internal::kEmptyString) {
    authorized_client_identity_string_ = new ::std::string;
  }
  authorized_client_identity_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::mutable_authorized_client_identity_string() {
  set_has_authorized_client_identity_string();
  if (authorized_client_identity_string_ == &::google::protobuf::internal::kEmptyString) {
    authorized_client_identity_string_ = new ::std::string;
  }
  return authorized_client_identity_string_;
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::release_authorized_client_identity_string() {
  clear_has_authorized_client_identity_string();
  if (authorized_client_identity_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = authorized_client_identity_string_;
    authorized_client_identity_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramRelayAuthTicket::set_allocated_authorized_client_identity_string(::std::string* authorized_client_identity_string) {
  if (authorized_client_identity_string_ != &::google::protobuf::internal::kEmptyString) {
    delete authorized_client_identity_string_;
  }
  if (authorized_client_identity_string) {
    set_has_authorized_client_identity_string();
    authorized_client_identity_string_ = authorized_client_identity_string;
  } else {
    clear_has_authorized_client_identity_string();
    authorized_client_identity_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string gameserver_identity_string = 15;
inline bool CMsgSteamDatagramRelayAuthTicket::has_gameserver_identity_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_has_gameserver_identity_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_has_gameserver_identity_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_gameserver_identity_string() {
  if (gameserver_identity_string_ != &::google::protobuf::internal::kEmptyString) {
    gameserver_identity_string_->clear();
  }
  clear_has_gameserver_identity_string();
}
inline const ::std::string& CMsgSteamDatagramRelayAuthTicket::gameserver_identity_string() const {
  return *gameserver_identity_string_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_identity_string(const ::std::string& value) {
  set_has_gameserver_identity_string();
  if (gameserver_identity_string_ == &::google::protobuf::internal::kEmptyString) {
    gameserver_identity_string_ = new ::std::string;
  }
  gameserver_identity_string_->assign(value);
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_identity_string(const char* value) {
  set_has_gameserver_identity_string();
  if (gameserver_identity_string_ == &::google::protobuf::internal::kEmptyString) {
    gameserver_identity_string_ = new ::std::string;
  }
  gameserver_identity_string_->assign(value);
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_identity_string(const char* value, size_t size) {
  set_has_gameserver_identity_string();
  if (gameserver_identity_string_ == &::google::protobuf::internal::kEmptyString) {
    gameserver_identity_string_ = new ::std::string;
  }
  gameserver_identity_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::mutable_gameserver_identity_string() {
  set_has_gameserver_identity_string();
  if (gameserver_identity_string_ == &::google::protobuf::internal::kEmptyString) {
    gameserver_identity_string_ = new ::std::string;
  }
  return gameserver_identity_string_;
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::release_gameserver_identity_string() {
  clear_has_gameserver_identity_string();
  if (gameserver_identity_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameserver_identity_string_;
    gameserver_identity_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramRelayAuthTicket::set_allocated_gameserver_identity_string(::std::string* gameserver_identity_string) {
  if (gameserver_identity_string_ != &::google::protobuf::internal::kEmptyString) {
    delete gameserver_identity_string_;
  }
  if (gameserver_identity_string) {
    set_has_gameserver_identity_string();
    gameserver_identity_string_ = gameserver_identity_string;
  } else {
    clear_has_gameserver_identity_string();
    gameserver_identity_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed32 authorized_public_ip = 3;
inline bool CMsgSteamDatagramRelayAuthTicket::has_authorized_public_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_has_authorized_public_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_has_authorized_public_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_authorized_public_ip() {
  authorized_public_ip_ = 0u;
  clear_has_authorized_public_ip();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayAuthTicket::authorized_public_ip() const {
  return authorized_public_ip_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_authorized_public_ip(::google::protobuf::uint32 value) {
  set_has_authorized_public_ip();
  authorized_public_ip_ = value;
}

// optional bytes gameserver_address = 11;
inline bool CMsgSteamDatagramRelayAuthTicket::has_gameserver_address() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_has_gameserver_address() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_has_gameserver_address() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_gameserver_address() {
  if (gameserver_address_ != &::google::protobuf::internal::kEmptyString) {
    gameserver_address_->clear();
  }
  clear_has_gameserver_address();
}
inline const ::std::string& CMsgSteamDatagramRelayAuthTicket::gameserver_address() const {
  return *gameserver_address_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_address(const ::std::string& value) {
  set_has_gameserver_address();
  if (gameserver_address_ == &::google::protobuf::internal::kEmptyString) {
    gameserver_address_ = new ::std::string;
  }
  gameserver_address_->assign(value);
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_address(const char* value) {
  set_has_gameserver_address();
  if (gameserver_address_ == &::google::protobuf::internal::kEmptyString) {
    gameserver_address_ = new ::std::string;
  }
  gameserver_address_->assign(value);
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_address(const void* value, size_t size) {
  set_has_gameserver_address();
  if (gameserver_address_ == &::google::protobuf::internal::kEmptyString) {
    gameserver_address_ = new ::std::string;
  }
  gameserver_address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::mutable_gameserver_address() {
  set_has_gameserver_address();
  if (gameserver_address_ == &::google::protobuf::internal::kEmptyString) {
    gameserver_address_ = new ::std::string;
  }
  return gameserver_address_;
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::release_gameserver_address() {
  clear_has_gameserver_address();
  if (gameserver_address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameserver_address_;
    gameserver_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramRelayAuthTicket::set_allocated_gameserver_address(::std::string* gameserver_address) {
  if (gameserver_address_ != &::google::protobuf::internal::kEmptyString) {
    delete gameserver_address_;
  }
  if (gameserver_address) {
    set_has_gameserver_address();
    gameserver_address_ = gameserver_address;
  } else {
    clear_has_gameserver_address();
    gameserver_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 app_id = 7;
inline bool CMsgSteamDatagramRelayAuthTicket::has_app_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_has_app_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayAuthTicket::app_id() const {
  return app_id_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
}

// optional uint32 virtual_port = 10;
inline bool CMsgSteamDatagramRelayAuthTicket::has_virtual_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_has_virtual_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_has_virtual_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_virtual_port() {
  virtual_port_ = 0u;
  clear_has_virtual_port();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayAuthTicket::virtual_port() const {
  return virtual_port_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_virtual_port(::google::protobuf::uint32 value) {
  set_has_virtual_port();
  virtual_port_ = value;
}

// repeated .CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
inline int CMsgSteamDatagramRelayAuthTicket::extra_fields_size() const {
  return extra_fields_.size();
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_extra_fields() {
  extra_fields_.Clear();
}
inline const ::CMsgSteamDatagramRelayAuthTicket_ExtraField& CMsgSteamDatagramRelayAuthTicket::extra_fields(int index) const {
  return extra_fields_.Get(index);
}
inline ::CMsgSteamDatagramRelayAuthTicket_ExtraField* CMsgSteamDatagramRelayAuthTicket::mutable_extra_fields(int index) {
  return extra_fields_.Mutable(index);
}
inline ::CMsgSteamDatagramRelayAuthTicket_ExtraField* CMsgSteamDatagramRelayAuthTicket::add_extra_fields() {
  return extra_fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramRelayAuthTicket_ExtraField >&
CMsgSteamDatagramRelayAuthTicket::extra_fields() const {
  return extra_fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramRelayAuthTicket_ExtraField >*
CMsgSteamDatagramRelayAuthTicket::mutable_extra_fields() {
  return &extra_fields_;
}

// optional fixed64 legacy_authorized_steam_id = 2;
inline bool CMsgSteamDatagramRelayAuthTicket::has_legacy_authorized_steam_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_has_legacy_authorized_steam_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_has_legacy_authorized_steam_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_legacy_authorized_steam_id() {
  legacy_authorized_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_legacy_authorized_steam_id();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramRelayAuthTicket::legacy_authorized_steam_id() const {
  return legacy_authorized_steam_id_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_authorized_steam_id(::google::protobuf::uint64 value) {
  set_has_legacy_authorized_steam_id();
  legacy_authorized_steam_id_ = value;
}

// optional fixed64 legacy_gameserver_steam_id = 4;
inline bool CMsgSteamDatagramRelayAuthTicket::has_legacy_gameserver_steam_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_has_legacy_gameserver_steam_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_has_legacy_gameserver_steam_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_legacy_gameserver_steam_id() {
  legacy_gameserver_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_legacy_gameserver_steam_id();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramRelayAuthTicket::legacy_gameserver_steam_id() const {
  return legacy_gameserver_steam_id_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_gameserver_steam_id(::google::protobuf::uint64 value) {
  set_has_legacy_gameserver_steam_id();
  legacy_gameserver_steam_id_ = value;
}

// optional fixed64 legacy_gameserver_net_id = 5;
inline bool CMsgSteamDatagramRelayAuthTicket::has_legacy_gameserver_net_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_has_legacy_gameserver_net_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_has_legacy_gameserver_net_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_legacy_gameserver_net_id() {
  legacy_gameserver_net_id_ = GOOGLE_ULONGLONG(0);
  clear_has_legacy_gameserver_net_id();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramRelayAuthTicket::legacy_gameserver_net_id() const {
  return legacy_gameserver_net_id_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_gameserver_net_id(::google::protobuf::uint64 value) {
  set_has_legacy_gameserver_net_id();
  legacy_gameserver_net_id_ = value;
}

// optional fixed32 legacy_gameserver_pop_id = 9;
inline bool CMsgSteamDatagramRelayAuthTicket::has_legacy_gameserver_pop_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_has_legacy_gameserver_pop_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_has_legacy_gameserver_pop_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_legacy_gameserver_pop_id() {
  legacy_gameserver_pop_id_ = 0u;
  clear_has_legacy_gameserver_pop_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayAuthTicket::legacy_gameserver_pop_id() const {
  return legacy_gameserver_pop_id_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_gameserver_pop_id(::google::protobuf::uint32 value) {
  set_has_legacy_gameserver_pop_id();
  legacy_gameserver_pop_id_ = value;
}

// optional bytes legacy_authorized_client_identity_binary = 12;
inline bool CMsgSteamDatagramRelayAuthTicket::has_legacy_authorized_client_identity_binary() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_has_legacy_authorized_client_identity_binary() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_has_legacy_authorized_client_identity_binary() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_legacy_authorized_client_identity_binary() {
  if (legacy_authorized_client_identity_binary_ != &::google::protobuf::internal::kEmptyString) {
    legacy_authorized_client_identity_binary_->clear();
  }
  clear_has_legacy_authorized_client_identity_binary();
}
inline const ::std::string& CMsgSteamDatagramRelayAuthTicket::legacy_authorized_client_identity_binary() const {
  return *legacy_authorized_client_identity_binary_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_authorized_client_identity_binary(const ::std::string& value) {
  set_has_legacy_authorized_client_identity_binary();
  if (legacy_authorized_client_identity_binary_ == &::google::protobuf::internal::kEmptyString) {
    legacy_authorized_client_identity_binary_ = new ::std::string;
  }
  legacy_authorized_client_identity_binary_->assign(value);
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_authorized_client_identity_binary(const char* value) {
  set_has_legacy_authorized_client_identity_binary();
  if (legacy_authorized_client_identity_binary_ == &::google::protobuf::internal::kEmptyString) {
    legacy_authorized_client_identity_binary_ = new ::std::string;
  }
  legacy_authorized_client_identity_binary_->assign(value);
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_authorized_client_identity_binary(const void* value, size_t size) {
  set_has_legacy_authorized_client_identity_binary();
  if (legacy_authorized_client_identity_binary_ == &::google::protobuf::internal::kEmptyString) {
    legacy_authorized_client_identity_binary_ = new ::std::string;
  }
  legacy_authorized_client_identity_binary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::mutable_legacy_authorized_client_identity_binary() {
  set_has_legacy_authorized_client_identity_binary();
  if (legacy_authorized_client_identity_binary_ == &::google::protobuf::internal::kEmptyString) {
    legacy_authorized_client_identity_binary_ = new ::std::string;
  }
  return legacy_authorized_client_identity_binary_;
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::release_legacy_authorized_client_identity_binary() {
  clear_has_legacy_authorized_client_identity_binary();
  if (legacy_authorized_client_identity_binary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = legacy_authorized_client_identity_binary_;
    legacy_authorized_client_identity_binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramRelayAuthTicket::set_allocated_legacy_authorized_client_identity_binary(::std::string* legacy_authorized_client_identity_binary) {
  if (legacy_authorized_client_identity_binary_ != &::google::protobuf::internal::kEmptyString) {
    delete legacy_authorized_client_identity_binary_;
  }
  if (legacy_authorized_client_identity_binary) {
    set_has_legacy_authorized_client_identity_binary();
    legacy_authorized_client_identity_binary_ = legacy_authorized_client_identity_binary;
  } else {
    clear_has_legacy_authorized_client_identity_binary();
    legacy_authorized_client_identity_binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes legacy_gameserver_identity_binary = 13;
inline bool CMsgSteamDatagramRelayAuthTicket::has_legacy_gameserver_identity_binary() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_has_legacy_gameserver_identity_binary() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_has_legacy_gameserver_identity_binary() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_legacy_gameserver_identity_binary() {
  if (legacy_gameserver_identity_binary_ != &::google::protobuf::internal::kEmptyString) {
    legacy_gameserver_identity_binary_->clear();
  }
  clear_has_legacy_gameserver_identity_binary();
}
inline const ::std::string& CMsgSteamDatagramRelayAuthTicket::legacy_gameserver_identity_binary() const {
  return *legacy_gameserver_identity_binary_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_gameserver_identity_binary(const ::std::string& value) {
  set_has_legacy_gameserver_identity_binary();
  if (legacy_gameserver_identity_binary_ == &::google::protobuf::internal::kEmptyString) {
    legacy_gameserver_identity_binary_ = new ::std::string;
  }
  legacy_gameserver_identity_binary_->assign(value);
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_gameserver_identity_binary(const char* value) {
  set_has_legacy_gameserver_identity_binary();
  if (legacy_gameserver_identity_binary_ == &::google::protobuf::internal::kEmptyString) {
    legacy_gameserver_identity_binary_ = new ::std::string;
  }
  legacy_gameserver_identity_binary_->assign(value);
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_gameserver_identity_binary(const void* value, size_t size) {
  set_has_legacy_gameserver_identity_binary();
  if (legacy_gameserver_identity_binary_ == &::google::protobuf::internal::kEmptyString) {
    legacy_gameserver_identity_binary_ = new ::std::string;
  }
  legacy_gameserver_identity_binary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::mutable_legacy_gameserver_identity_binary() {
  set_has_legacy_gameserver_identity_binary();
  if (legacy_gameserver_identity_binary_ == &::google::protobuf::internal::kEmptyString) {
    legacy_gameserver_identity_binary_ = new ::std::string;
  }
  return legacy_gameserver_identity_binary_;
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::release_legacy_gameserver_identity_binary() {
  clear_has_legacy_gameserver_identity_binary();
  if (legacy_gameserver_identity_binary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = legacy_gameserver_identity_binary_;
    legacy_gameserver_identity_binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramRelayAuthTicket::set_allocated_legacy_gameserver_identity_binary(::std::string* legacy_gameserver_identity_binary) {
  if (legacy_gameserver_identity_binary_ != &::google::protobuf::internal::kEmptyString) {
    delete legacy_gameserver_identity_binary_;
  }
  if (legacy_gameserver_identity_binary) {
    set_has_legacy_gameserver_identity_binary();
    legacy_gameserver_identity_binary_ = legacy_gameserver_identity_binary;
  } else {
    clear_has_legacy_gameserver_identity_binary();
    legacy_gameserver_identity_binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgSteamDatagramSignedRelayAuthTicket

// optional fixed64 reserved_do_not_use = 1;
inline bool CMsgSteamDatagramSignedRelayAuthTicket::has_reserved_do_not_use() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_has_reserved_do_not_use() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::clear_has_reserved_do_not_use() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::clear_reserved_do_not_use() {
  reserved_do_not_use_ = GOOGLE_ULONGLONG(0);
  clear_has_reserved_do_not_use();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramSignedRelayAuthTicket::reserved_do_not_use() const {
  return reserved_do_not_use_;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_reserved_do_not_use(::google::protobuf::uint64 value) {
  set_has_reserved_do_not_use();
  reserved_do_not_use_ = value;
}

// optional fixed64 key_id = 2;
inline bool CMsgSteamDatagramSignedRelayAuthTicket::has_key_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_has_key_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::clear_has_key_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::clear_key_id() {
  key_id_ = GOOGLE_ULONGLONG(0);
  clear_has_key_id();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramSignedRelayAuthTicket::key_id() const {
  return key_id_;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_key_id(::google::protobuf::uint64 value) {
  set_has_key_id();
  key_id_ = value;
}

// optional bytes ticket = 3;
inline bool CMsgSteamDatagramSignedRelayAuthTicket::has_ticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_has_ticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::clear_ticket() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    ticket_->clear();
  }
  clear_has_ticket();
}
inline const ::std::string& CMsgSteamDatagramSignedRelayAuthTicket::ticket() const {
  return *ticket_;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_ticket(const ::std::string& value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_ticket(const char* value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_ticket(const void* value, size_t size) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramSignedRelayAuthTicket::mutable_ticket() {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  return ticket_;
}
inline ::std::string* CMsgSteamDatagramSignedRelayAuthTicket::release_ticket() {
  clear_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ticket_;
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_allocated_ticket(::std::string* ticket) {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (ticket) {
    set_has_ticket();
    ticket_ = ticket;
  } else {
    clear_has_ticket();
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes signature = 4;
inline bool CMsgSteamDatagramSignedRelayAuthTicket::has_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_has_signature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::clear_has_signature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& CMsgSteamDatagramSignedRelayAuthTicket::signature() const {
  return *signature_;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramSignedRelayAuthTicket::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* CMsgSteamDatagramSignedRelayAuthTicket::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgSteamDatagramCachedCredentialsForApp

// optional bytes private_key = 1;
inline bool CMsgSteamDatagramCachedCredentialsForApp::has_private_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_has_private_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramCachedCredentialsForApp::clear_has_private_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramCachedCredentialsForApp::clear_private_key() {
  if (private_key_ != &::google::protobuf::internal::kEmptyString) {
    private_key_->clear();
  }
  clear_has_private_key();
}
inline const ::std::string& CMsgSteamDatagramCachedCredentialsForApp::private_key() const {
  return *private_key_;
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_private_key(const ::std::string& value) {
  set_has_private_key();
  if (private_key_ == &::google::protobuf::internal::kEmptyString) {
    private_key_ = new ::std::string;
  }
  private_key_->assign(value);
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_private_key(const char* value) {
  set_has_private_key();
  if (private_key_ == &::google::protobuf::internal::kEmptyString) {
    private_key_ = new ::std::string;
  }
  private_key_->assign(value);
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_private_key(const void* value, size_t size) {
  set_has_private_key();
  if (private_key_ == &::google::protobuf::internal::kEmptyString) {
    private_key_ = new ::std::string;
  }
  private_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramCachedCredentialsForApp::mutable_private_key() {
  set_has_private_key();
  if (private_key_ == &::google::protobuf::internal::kEmptyString) {
    private_key_ = new ::std::string;
  }
  return private_key_;
}
inline ::std::string* CMsgSteamDatagramCachedCredentialsForApp::release_private_key() {
  clear_has_private_key();
  if (private_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = private_key_;
    private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_allocated_private_key(::std::string* private_key) {
  if (private_key_ != &::google::protobuf::internal::kEmptyString) {
    delete private_key_;
  }
  if (private_key) {
    set_has_private_key();
    private_key_ = private_key;
  } else {
    clear_has_private_key();
    private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes cert = 2;
inline bool CMsgSteamDatagramCachedCredentialsForApp::has_cert() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_has_cert() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramCachedCredentialsForApp::clear_has_cert() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramCachedCredentialsForApp::clear_cert() {
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    cert_->clear();
  }
  clear_has_cert();
}
inline const ::std::string& CMsgSteamDatagramCachedCredentialsForApp::cert() const {
  return *cert_;
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_cert(const ::std::string& value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_cert(const char* value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_cert(const void* value, size_t size) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  cert_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramCachedCredentialsForApp::mutable_cert() {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  return cert_;
}
inline ::std::string* CMsgSteamDatagramCachedCredentialsForApp::release_cert() {
  clear_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cert_;
    cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_allocated_cert(::std::string* cert) {
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    delete cert_;
  }
  if (cert) {
    set_has_cert();
    cert_ = cert;
  } else {
    clear_has_cert();
    cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated bytes relay_tickets = 3;
inline int CMsgSteamDatagramCachedCredentialsForApp::relay_tickets_size() const {
  return relay_tickets_.size();
}
inline void CMsgSteamDatagramCachedCredentialsForApp::clear_relay_tickets() {
  relay_tickets_.Clear();
}
inline const ::std::string& CMsgSteamDatagramCachedCredentialsForApp::relay_tickets(int index) const {
  return relay_tickets_.Get(index);
}
inline ::std::string* CMsgSteamDatagramCachedCredentialsForApp::mutable_relay_tickets(int index) {
  return relay_tickets_.Mutable(index);
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_relay_tickets(int index, const ::std::string& value) {
  relay_tickets_.Mutable(index)->assign(value);
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_relay_tickets(int index, const char* value) {
  relay_tickets_.Mutable(index)->assign(value);
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_relay_tickets(int index, const void* value, size_t size) {
  relay_tickets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramCachedCredentialsForApp::add_relay_tickets() {
  return relay_tickets_.Add();
}
inline void CMsgSteamDatagramCachedCredentialsForApp::add_relay_tickets(const ::std::string& value) {
  relay_tickets_.Add()->assign(value);
}
inline void CMsgSteamDatagramCachedCredentialsForApp::add_relay_tickets(const char* value) {
  relay_tickets_.Add()->assign(value);
}
inline void CMsgSteamDatagramCachedCredentialsForApp::add_relay_tickets(const void* value, size_t size) {
  relay_tickets_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgSteamDatagramCachedCredentialsForApp::relay_tickets() const {
  return relay_tickets_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgSteamDatagramCachedCredentialsForApp::mutable_relay_tickets() {
  return &relay_tickets_;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramGameCoordinatorServerLogin

// optional uint32 time_generated = 1;
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::has_time_generated() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_has_time_generated() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_has_time_generated() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_time_generated() {
  time_generated_ = 0u;
  clear_has_time_generated();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameCoordinatorServerLogin::time_generated() const {
  return time_generated_;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_time_generated(::google::protobuf::uint32 value) {
  set_has_time_generated();
  time_generated_ = value;
}

// optional uint32 appid = 2;
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameCoordinatorServerLogin::appid() const {
  return appid_;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// optional bytes routing = 3;
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::has_routing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_has_routing() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_has_routing() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_routing() {
  if (routing_ != &::google::protobuf::internal::kEmptyString) {
    routing_->clear();
  }
  clear_has_routing();
}
inline const ::std::string& CMsgSteamDatagramGameCoordinatorServerLogin::routing() const {
  return *routing_;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_routing(const ::std::string& value) {
  set_has_routing();
  if (routing_ == &::google::protobuf::internal::kEmptyString) {
    routing_ = new ::std::string;
  }
  routing_->assign(value);
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_routing(const char* value) {
  set_has_routing();
  if (routing_ == &::google::protobuf::internal::kEmptyString) {
    routing_ = new ::std::string;
  }
  routing_->assign(value);
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_routing(const void* value, size_t size) {
  set_has_routing();
  if (routing_ == &::google::protobuf::internal::kEmptyString) {
    routing_ = new ::std::string;
  }
  routing_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramGameCoordinatorServerLogin::mutable_routing() {
  set_has_routing();
  if (routing_ == &::google::protobuf::internal::kEmptyString) {
    routing_ = new ::std::string;
  }
  return routing_;
}
inline ::std::string* CMsgSteamDatagramGameCoordinatorServerLogin::release_routing() {
  clear_has_routing();
  if (routing_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = routing_;
    routing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_allocated_routing(::std::string* routing) {
  if (routing_ != &::google::protobuf::internal::kEmptyString) {
    delete routing_;
  }
  if (routing) {
    set_has_routing();
    routing_ = routing;
  } else {
    clear_has_routing();
    routing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes appdata = 4;
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::has_appdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_has_appdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_has_appdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_appdata() {
  if (appdata_ != &::google::protobuf::internal::kEmptyString) {
    appdata_->clear();
  }
  clear_has_appdata();
}
inline const ::std::string& CMsgSteamDatagramGameCoordinatorServerLogin::appdata() const {
  return *appdata_;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_appdata(const ::std::string& value) {
  set_has_appdata();
  if (appdata_ == &::google::protobuf::internal::kEmptyString) {
    appdata_ = new ::std::string;
  }
  appdata_->assign(value);
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_appdata(const char* value) {
  set_has_appdata();
  if (appdata_ == &::google::protobuf::internal::kEmptyString) {
    appdata_ = new ::std::string;
  }
  appdata_->assign(value);
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_appdata(const void* value, size_t size) {
  set_has_appdata();
  if (appdata_ == &::google::protobuf::internal::kEmptyString) {
    appdata_ = new ::std::string;
  }
  appdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramGameCoordinatorServerLogin::mutable_appdata() {
  set_has_appdata();
  if (appdata_ == &::google::protobuf::internal::kEmptyString) {
    appdata_ = new ::std::string;
  }
  return appdata_;
}
inline ::std::string* CMsgSteamDatagramGameCoordinatorServerLogin::release_appdata() {
  clear_has_appdata();
  if (appdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appdata_;
    appdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_allocated_appdata(::std::string* appdata) {
  if (appdata_ != &::google::protobuf::internal::kEmptyString) {
    delete appdata_;
  }
  if (appdata) {
    set_has_appdata();
    appdata_ = appdata;
  } else {
    clear_has_appdata();
    appdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes legacy_identity_binary = 5;
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::has_legacy_identity_binary() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_has_legacy_identity_binary() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_has_legacy_identity_binary() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_legacy_identity_binary() {
  if (legacy_identity_binary_ != &::google::protobuf::internal::kEmptyString) {
    legacy_identity_binary_->clear();
  }
  clear_has_legacy_identity_binary();
}
inline const ::std::string& CMsgSteamDatagramGameCoordinatorServerLogin::legacy_identity_binary() const {
  return *legacy_identity_binary_;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_legacy_identity_binary(const ::std::string& value) {
  set_has_legacy_identity_binary();
  if (legacy_identity_binary_ == &::google::protobuf::internal::kEmptyString) {
    legacy_identity_binary_ = new ::std::string;
  }
  legacy_identity_binary_->assign(value);
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_legacy_identity_binary(const char* value) {
  set_has_legacy_identity_binary();
  if (legacy_identity_binary_ == &::google::protobuf::internal::kEmptyString) {
    legacy_identity_binary_ = new ::std::string;
  }
  legacy_identity_binary_->assign(value);
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_legacy_identity_binary(const void* value, size_t size) {
  set_has_legacy_identity_binary();
  if (legacy_identity_binary_ == &::google::protobuf::internal::kEmptyString) {
    legacy_identity_binary_ = new ::std::string;
  }
  legacy_identity_binary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramGameCoordinatorServerLogin::mutable_legacy_identity_binary() {
  set_has_legacy_identity_binary();
  if (legacy_identity_binary_ == &::google::protobuf::internal::kEmptyString) {
    legacy_identity_binary_ = new ::std::string;
  }
  return legacy_identity_binary_;
}
inline ::std::string* CMsgSteamDatagramGameCoordinatorServerLogin::release_legacy_identity_binary() {
  clear_has_legacy_identity_binary();
  if (legacy_identity_binary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = legacy_identity_binary_;
    legacy_identity_binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_allocated_legacy_identity_binary(::std::string* legacy_identity_binary) {
  if (legacy_identity_binary_ != &::google::protobuf::internal::kEmptyString) {
    delete legacy_identity_binary_;
  }
  if (legacy_identity_binary) {
    set_has_legacy_identity_binary();
    legacy_identity_binary_ = legacy_identity_binary;
  } else {
    clear_has_legacy_identity_binary();
    legacy_identity_binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string identity_string = 6;
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::has_identity_string() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_has_identity_string() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_has_identity_string() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_identity_string() {
  if (identity_string_ != &::google::protobuf::internal::kEmptyString) {
    identity_string_->clear();
  }
  clear_has_identity_string();
}
inline const ::std::string& CMsgSteamDatagramGameCoordinatorServerLogin::identity_string() const {
  return *identity_string_;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_identity_string(const ::std::string& value) {
  set_has_identity_string();
  if (identity_string_ == &::google::protobuf::internal::kEmptyString) {
    identity_string_ = new ::std::string;
  }
  identity_string_->assign(value);
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_identity_string(const char* value) {
  set_has_identity_string();
  if (identity_string_ == &::google::protobuf::internal::kEmptyString) {
    identity_string_ = new ::std::string;
  }
  identity_string_->assign(value);
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_identity_string(const char* value, size_t size) {
  set_has_identity_string();
  if (identity_string_ == &::google::protobuf::internal::kEmptyString) {
    identity_string_ = new ::std::string;
  }
  identity_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramGameCoordinatorServerLogin::mutable_identity_string() {
  set_has_identity_string();
  if (identity_string_ == &::google::protobuf::internal::kEmptyString) {
    identity_string_ = new ::std::string;
  }
  return identity_string_;
}
inline ::std::string* CMsgSteamDatagramGameCoordinatorServerLogin::release_identity_string() {
  clear_has_identity_string();
  if (identity_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identity_string_;
    identity_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_allocated_identity_string(::std::string* identity_string) {
  if (identity_string_ != &::google::protobuf::internal::kEmptyString) {
    delete identity_string_;
  }
  if (identity_string) {
    set_has_identity_string();
    identity_string_ = identity_string;
  } else {
    clear_has_identity_string();
    identity_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed64 dummy_steam_id = 99;
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::has_dummy_steam_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_has_dummy_steam_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_has_dummy_steam_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_dummy_steam_id() {
  dummy_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dummy_steam_id();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramGameCoordinatorServerLogin::dummy_steam_id() const {
  return dummy_steam_id_;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_dummy_steam_id(::google::protobuf::uint64 value) {
  set_has_dummy_steam_id();
  dummy_steam_id_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramSignedGameCoordinatorServerLogin

// optional .CMsgSteamDatagramCertificateSigned cert = 1;
inline bool CMsgSteamDatagramSignedGameCoordinatorServerLogin::has_cert() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_has_cert() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::clear_has_cert() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::clear_cert() {
  if (cert_ != NULL) cert_->::CMsgSteamDatagramCertificateSigned::Clear();
  clear_has_cert();
}
inline const ::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramSignedGameCoordinatorServerLogin::cert() const {
  return cert_ != NULL ? *cert_ : *default_instance_->cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramSignedGameCoordinatorServerLogin::mutable_cert() {
  set_has_cert();
  if (cert_ == NULL) cert_ = new ::CMsgSteamDatagramCertificateSigned;
  return cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramSignedGameCoordinatorServerLogin::release_cert() {
  clear_has_cert();
  ::CMsgSteamDatagramCertificateSigned* temp = cert_;
  cert_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert) {
  delete cert_;
  cert_ = cert;
  if (cert) {
    set_has_cert();
  } else {
    clear_has_cert();
  }
}

// optional bytes login = 2;
inline bool CMsgSteamDatagramSignedGameCoordinatorServerLogin::has_login() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_has_login() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::clear_has_login() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::clear_login() {
  if (login_ != &::google::protobuf::internal::kEmptyString) {
    login_->clear();
  }
  clear_has_login();
}
inline const ::std::string& CMsgSteamDatagramSignedGameCoordinatorServerLogin::login() const {
  return *login_;
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_login(const ::std::string& value) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::kEmptyString) {
    login_ = new ::std::string;
  }
  login_->assign(value);
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_login(const char* value) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::kEmptyString) {
    login_ = new ::std::string;
  }
  login_->assign(value);
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_login(const void* value, size_t size) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::kEmptyString) {
    login_ = new ::std::string;
  }
  login_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramSignedGameCoordinatorServerLogin::mutable_login() {
  set_has_login();
  if (login_ == &::google::protobuf::internal::kEmptyString) {
    login_ = new ::std::string;
  }
  return login_;
}
inline ::std::string* CMsgSteamDatagramSignedGameCoordinatorServerLogin::release_login() {
  clear_has_login();
  if (login_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_;
    login_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_allocated_login(::std::string* login) {
  if (login_ != &::google::protobuf::internal::kEmptyString) {
    delete login_;
  }
  if (login) {
    set_has_login();
    login_ = login;
  } else {
    clear_has_login();
    login_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes signature = 3;
inline bool CMsgSteamDatagramSignedGameCoordinatorServerLogin::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& CMsgSteamDatagramSignedGameCoordinatorServerLogin::signature() const {
  return *signature_;
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramSignedGameCoordinatorServerLogin::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* CMsgSteamDatagramSignedGameCoordinatorServerLogin::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgSteamDatagramHostedServerAddressPlaintext

// optional fixed32 ipv4 = 1;
inline bool CMsgSteamDatagramHostedServerAddressPlaintext::has_ipv4() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_has_ipv4() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::clear_has_ipv4() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::clear_ipv4() {
  ipv4_ = 0u;
  clear_has_ipv4();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramHostedServerAddressPlaintext::ipv4() const {
  return ipv4_;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_ipv4(::google::protobuf::uint32 value) {
  set_has_ipv4();
  ipv4_ = value;
}

// optional bytes ipv6 = 2;
inline bool CMsgSteamDatagramHostedServerAddressPlaintext::has_ipv6() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_has_ipv6() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::clear_has_ipv6() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::clear_ipv6() {
  if (ipv6_ != &::google::protobuf::internal::kEmptyString) {
    ipv6_->clear();
  }
  clear_has_ipv6();
}
inline const ::std::string& CMsgSteamDatagramHostedServerAddressPlaintext::ipv6() const {
  return *ipv6_;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_ipv6(const ::std::string& value) {
  set_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::kEmptyString) {
    ipv6_ = new ::std::string;
  }
  ipv6_->assign(value);
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_ipv6(const char* value) {
  set_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::kEmptyString) {
    ipv6_ = new ::std::string;
  }
  ipv6_->assign(value);
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_ipv6(const void* value, size_t size) {
  set_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::kEmptyString) {
    ipv6_ = new ::std::string;
  }
  ipv6_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramHostedServerAddressPlaintext::mutable_ipv6() {
  set_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::kEmptyString) {
    ipv6_ = new ::std::string;
  }
  return ipv6_;
}
inline ::std::string* CMsgSteamDatagramHostedServerAddressPlaintext::release_ipv6() {
  clear_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ipv6_;
    ipv6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_allocated_ipv6(::std::string* ipv6) {
  if (ipv6_ != &::google::protobuf::internal::kEmptyString) {
    delete ipv6_;
  }
  if (ipv6) {
    set_has_ipv6();
    ipv6_ = ipv6;
  } else {
    clear_has_ipv6();
    ipv6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 3;
inline bool CMsgSteamDatagramHostedServerAddressPlaintext::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramHostedServerAddressPlaintext::port() const {
  return port_;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional fixed64 routing_secret = 4;
inline bool CMsgSteamDatagramHostedServerAddressPlaintext::has_routing_secret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_has_routing_secret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::clear_has_routing_secret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::clear_routing_secret() {
  routing_secret_ = GOOGLE_ULONGLONG(0);
  clear_has_routing_secret();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramHostedServerAddressPlaintext::routing_secret() const {
  return routing_secret_;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_routing_secret(::google::protobuf::uint64 value) {
  set_has_routing_secret();
  routing_secret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steamdatagram_5fmessages_5fauth_2eproto__INCLUDED
