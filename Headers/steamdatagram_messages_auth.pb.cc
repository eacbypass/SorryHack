// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamdatagram_messages_auth.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steamdatagram_messages_auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgSteamDatagramRelayAuthTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramRelayAuthTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramRelayAuthTicket_ExtraField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramRelayAuthTicket_ExtraField_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramSignedRelayAuthTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramSignedRelayAuthTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramCachedCredentialsForApp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramCachedCredentialsForApp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameCoordinatorServerLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramGameCoordinatorServerLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramSignedGameCoordinatorServerLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramSignedGameCoordinatorServerLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramHostedServerAddressPlaintext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramHostedServerAddressPlaintext_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_steamdatagram_5fmessages_5fauth_2eproto() {
  protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steamdatagram_messages_auth.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgSteamDatagramRelayAuthTicket_descriptor_ = file->message_type(0);
  static const int CMsgSteamDatagramRelayAuthTicket_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, time_expiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, authorized_client_identity_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, gameserver_identity_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, authorized_public_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, gameserver_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, virtual_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, extra_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, legacy_authorized_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, legacy_gameserver_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, legacy_gameserver_net_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, legacy_gameserver_pop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, legacy_authorized_client_identity_binary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, legacy_gameserver_identity_binary_),
  };
  CMsgSteamDatagramRelayAuthTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramRelayAuthTicket_descriptor_,
      CMsgSteamDatagramRelayAuthTicket::default_instance_,
      CMsgSteamDatagramRelayAuthTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramRelayAuthTicket));
  CMsgSteamDatagramRelayAuthTicket_ExtraField_descriptor_ = CMsgSteamDatagramRelayAuthTicket_descriptor_->nested_type(0);
  static const int CMsgSteamDatagramRelayAuthTicket_ExtraField_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket_ExtraField, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket_ExtraField, string_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket_ExtraField, int64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket_ExtraField, fixed64_value_),
  };
  CMsgSteamDatagramRelayAuthTicket_ExtraField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramRelayAuthTicket_ExtraField_descriptor_,
      CMsgSteamDatagramRelayAuthTicket_ExtraField::default_instance_,
      CMsgSteamDatagramRelayAuthTicket_ExtraField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket_ExtraField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayAuthTicket_ExtraField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramRelayAuthTicket_ExtraField));
  CMsgSteamDatagramSignedRelayAuthTicket_descriptor_ = file->message_type(1);
  static const int CMsgSteamDatagramSignedRelayAuthTicket_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSignedRelayAuthTicket, reserved_do_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSignedRelayAuthTicket, key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSignedRelayAuthTicket, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSignedRelayAuthTicket, signature_),
  };
  CMsgSteamDatagramSignedRelayAuthTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramSignedRelayAuthTicket_descriptor_,
      CMsgSteamDatagramSignedRelayAuthTicket::default_instance_,
      CMsgSteamDatagramSignedRelayAuthTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSignedRelayAuthTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSignedRelayAuthTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramSignedRelayAuthTicket));
  CMsgSteamDatagramCachedCredentialsForApp_descriptor_ = file->message_type(2);
  static const int CMsgSteamDatagramCachedCredentialsForApp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCachedCredentialsForApp, private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCachedCredentialsForApp, cert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCachedCredentialsForApp, relay_tickets_),
  };
  CMsgSteamDatagramCachedCredentialsForApp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramCachedCredentialsForApp_descriptor_,
      CMsgSteamDatagramCachedCredentialsForApp::default_instance_,
      CMsgSteamDatagramCachedCredentialsForApp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCachedCredentialsForApp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCachedCredentialsForApp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramCachedCredentialsForApp));
  CMsgSteamDatagramGameCoordinatorServerLogin_descriptor_ = file->message_type(3);
  static const int CMsgSteamDatagramGameCoordinatorServerLogin_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameCoordinatorServerLogin, time_generated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameCoordinatorServerLogin, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameCoordinatorServerLogin, routing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameCoordinatorServerLogin, appdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameCoordinatorServerLogin, legacy_identity_binary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameCoordinatorServerLogin, identity_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameCoordinatorServerLogin, dummy_steam_id_),
  };
  CMsgSteamDatagramGameCoordinatorServerLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramGameCoordinatorServerLogin_descriptor_,
      CMsgSteamDatagramGameCoordinatorServerLogin::default_instance_,
      CMsgSteamDatagramGameCoordinatorServerLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameCoordinatorServerLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameCoordinatorServerLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramGameCoordinatorServerLogin));
  CMsgSteamDatagramSignedGameCoordinatorServerLogin_descriptor_ = file->message_type(4);
  static const int CMsgSteamDatagramSignedGameCoordinatorServerLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSignedGameCoordinatorServerLogin, cert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSignedGameCoordinatorServerLogin, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSignedGameCoordinatorServerLogin, signature_),
  };
  CMsgSteamDatagramSignedGameCoordinatorServerLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramSignedGameCoordinatorServerLogin_descriptor_,
      CMsgSteamDatagramSignedGameCoordinatorServerLogin::default_instance_,
      CMsgSteamDatagramSignedGameCoordinatorServerLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSignedGameCoordinatorServerLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSignedGameCoordinatorServerLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramSignedGameCoordinatorServerLogin));
  CMsgSteamDatagramHostedServerAddressPlaintext_descriptor_ = file->message_type(5);
  static const int CMsgSteamDatagramHostedServerAddressPlaintext_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramHostedServerAddressPlaintext, ipv4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramHostedServerAddressPlaintext, ipv6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramHostedServerAddressPlaintext, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramHostedServerAddressPlaintext, routing_secret_),
  };
  CMsgSteamDatagramHostedServerAddressPlaintext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramHostedServerAddressPlaintext_descriptor_,
      CMsgSteamDatagramHostedServerAddressPlaintext::default_instance_,
      CMsgSteamDatagramHostedServerAddressPlaintext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramHostedServerAddressPlaintext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramHostedServerAddressPlaintext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramHostedServerAddressPlaintext));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steamdatagram_5fmessages_5fauth_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramRelayAuthTicket_descriptor_, &CMsgSteamDatagramRelayAuthTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramRelayAuthTicket_ExtraField_descriptor_, &CMsgSteamDatagramRelayAuthTicket_ExtraField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramSignedRelayAuthTicket_descriptor_, &CMsgSteamDatagramSignedRelayAuthTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramCachedCredentialsForApp_descriptor_, &CMsgSteamDatagramCachedCredentialsForApp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramGameCoordinatorServerLogin_descriptor_, &CMsgSteamDatagramGameCoordinatorServerLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramSignedGameCoordinatorServerLogin_descriptor_, &CMsgSteamDatagramSignedGameCoordinatorServerLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramHostedServerAddressPlaintext_descriptor_, &CMsgSteamDatagramHostedServerAddressPlaintext::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steamdatagram_5fmessages_5fauth_2eproto() {
  delete CMsgSteamDatagramRelayAuthTicket::default_instance_;
  delete CMsgSteamDatagramRelayAuthTicket_reflection_;
  delete CMsgSteamDatagramRelayAuthTicket_ExtraField::default_instance_;
  delete CMsgSteamDatagramRelayAuthTicket_ExtraField_reflection_;
  delete CMsgSteamDatagramSignedRelayAuthTicket::default_instance_;
  delete CMsgSteamDatagramSignedRelayAuthTicket_reflection_;
  delete CMsgSteamDatagramCachedCredentialsForApp::default_instance_;
  delete CMsgSteamDatagramCachedCredentialsForApp_reflection_;
  delete CMsgSteamDatagramGameCoordinatorServerLogin::default_instance_;
  delete CMsgSteamDatagramGameCoordinatorServerLogin_reflection_;
  delete CMsgSteamDatagramSignedGameCoordinatorServerLogin::default_instance_;
  delete CMsgSteamDatagramSignedGameCoordinatorServerLogin_reflection_;
  delete CMsgSteamDatagramHostedServerAddressPlaintext::default_instance_;
  delete CMsgSteamDatagramHostedServerAddressPlaintext_reflection_;
}

void protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!steamdatagram_messages_auth.proto\032+ste"
    "amnetworkingsockets_messages_certs.proto"
    "\"\361\004\n CMsgSteamDatagramRelayAuthTicket\022\023\n"
    "\013time_expiry\030\001 \001(\007\022)\n!authorized_client_"
    "identity_string\030\016 \001(\t\022\"\n\032gameserver_iden"
    "tity_string\030\017 \001(\t\022\034\n\024authorized_public_i"
    "p\030\003 \001(\007\022\032\n\022gameserver_address\030\013 \001(\014\022\016\n\006a"
    "pp_id\030\007 \001(\r\022\024\n\014virtual_port\030\n \001(\r\022B\n\014ext"
    "ra_fields\030\010 \003(\0132,.CMsgSteamDatagramRelay"
    "AuthTicket.ExtraField\022\"\n\032legacy_authoriz"
    "ed_steam_id\030\002 \001(\006\022\"\n\032legacy_gameserver_s"
    "team_id\030\004 \001(\006\022 \n\030legacy_gameserver_net_i"
    "d\030\005 \001(\006\022 \n\030legacy_gameserver_pop_id\030\t \001("
    "\007\0220\n(legacy_authorized_client_identity_b"
    "inary\030\014 \001(\014\022)\n!legacy_gameserver_identit"
    "y_binary\030\r \001(\014\032\\\n\nExtraField\022\014\n\004name\030\001 \001"
    "(\t\022\024\n\014string_value\030\002 \001(\t\022\023\n\013int64_value\030"
    "\003 \001(\022\022\025\n\rfixed64_value\030\005 \001(\006\"x\n&CMsgStea"
    "mDatagramSignedRelayAuthTicket\022\033\n\023reserv"
    "ed_do_not_use\030\001 \001(\006\022\016\n\006key_id\030\002 \001(\006\022\016\n\006t"
    "icket\030\003 \001(\014\022\021\n\tsignature\030\004 \001(\014\"d\n(CMsgSt"
    "eamDatagramCachedCredentialsForApp\022\023\n\013pr"
    "ivate_key\030\001 \001(\014\022\014\n\004cert\030\002 \001(\014\022\025\n\rrelay_t"
    "ickets\030\003 \003(\014\"\307\001\n+CMsgSteamDatagramGameCo"
    "ordinatorServerLogin\022\026\n\016time_generated\030\001"
    " \001(\r\022\r\n\005appid\030\002 \001(\r\022\017\n\007routing\030\003 \001(\014\022\017\n\007"
    "appdata\030\004 \001(\014\022\036\n\026legacy_identity_binary\030"
    "\005 \001(\014\022\027\n\017identity_string\030\006 \001(\t\022\026\n\016dummy_"
    "steam_id\030c \001(\006\"\210\001\n1CMsgSteamDatagramSign"
    "edGameCoordinatorServerLogin\0221\n\004cert\030\001 \001"
    "(\0132#.CMsgSteamDatagramCertificateSigned\022"
    "\r\n\005login\030\002 \001(\014\022\021\n\tsignature\030\003 \001(\014\"q\n-CMs"
    "gSteamDatagramHostedServerAddressPlainte"
    "xt\022\014\n\004ipv4\030\001 \001(\007\022\014\n\004ipv6\030\002 \001(\014\022\014\n\004port\030\003"
    " \001(\r\022\026\n\016routing_secret\030\004 \001(\006B\005H\001\200\001\000", 1395);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steamdatagram_messages_auth.proto", &protobuf_RegisterTypes);
  CMsgSteamDatagramRelayAuthTicket::default_instance_ = new CMsgSteamDatagramRelayAuthTicket();
  CMsgSteamDatagramRelayAuthTicket_ExtraField::default_instance_ = new CMsgSteamDatagramRelayAuthTicket_ExtraField();
  CMsgSteamDatagramSignedRelayAuthTicket::default_instance_ = new CMsgSteamDatagramSignedRelayAuthTicket();
  CMsgSteamDatagramCachedCredentialsForApp::default_instance_ = new CMsgSteamDatagramCachedCredentialsForApp();
  CMsgSteamDatagramGameCoordinatorServerLogin::default_instance_ = new CMsgSteamDatagramGameCoordinatorServerLogin();
  CMsgSteamDatagramSignedGameCoordinatorServerLogin::default_instance_ = new CMsgSteamDatagramSignedGameCoordinatorServerLogin();
  CMsgSteamDatagramHostedServerAddressPlaintext::default_instance_ = new CMsgSteamDatagramHostedServerAddressPlaintext();
  CMsgSteamDatagramRelayAuthTicket::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramRelayAuthTicket_ExtraField::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramSignedRelayAuthTicket::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramCachedCredentialsForApp::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramGameCoordinatorServerLogin::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramSignedGameCoordinatorServerLogin::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramHostedServerAddressPlaintext::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steamdatagram_5fmessages_5fauth_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steamdatagram_5fmessages_5fauth_2eproto {
  StaticDescriptorInitializer_steamdatagram_5fmessages_5fauth_2eproto() {
    protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
  }
} static_descriptor_initializer_steamdatagram_5fmessages_5fauth_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramRelayAuthTicket_ExtraField::kNameFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket_ExtraField::kStringValueFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket_ExtraField::kInt64ValueFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket_ExtraField::kFixed64ValueFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramRelayAuthTicket_ExtraField::CMsgSteamDatagramRelayAuthTicket_ExtraField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::InitAsDefaultInstance() {
}

CMsgSteamDatagramRelayAuthTicket_ExtraField::CMsgSteamDatagramRelayAuthTicket_ExtraField(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  int64_value_ = GOOGLE_LONGLONG(0);
  fixed64_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramRelayAuthTicket_ExtraField::~CMsgSteamDatagramRelayAuthTicket_ExtraField() {
  SharedDtor();
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    delete string_value_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramRelayAuthTicket_ExtraField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramRelayAuthTicket_ExtraField_descriptor_;
}

const CMsgSteamDatagramRelayAuthTicket_ExtraField& CMsgSteamDatagramRelayAuthTicket_ExtraField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramRelayAuthTicket_ExtraField* CMsgSteamDatagramRelayAuthTicket_ExtraField::default_instance_ = NULL;

CMsgSteamDatagramRelayAuthTicket_ExtraField* CMsgSteamDatagramRelayAuthTicket_ExtraField::New() const {
  return new CMsgSteamDatagramRelayAuthTicket_ExtraField;
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::kEmptyString) {
        string_value_->clear();
      }
    }
    int64_value_ = GOOGLE_LONGLONG(0);
    fixed64_value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramRelayAuthTicket_ExtraField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_string_value;
        break;
      }

      // optional string string_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int64_value;
        break;
      }

      // optional sint64 int64_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int64_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &int64_value_)));
          set_has_int64_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_fixed64_value;
        break;
      }

      // optional fixed64 fixed64_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fixed64_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &fixed64_value_)));
          set_has_fixed64_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string string_value = 2;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->string_value(), output);
  }

  // optional sint64 int64_value = 3;
  if (has_int64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->int64_value(), output);
  }

  // optional fixed64 fixed64_value = 5;
  if (has_fixed64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->fixed64_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramRelayAuthTicket_ExtraField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string string_value = 2;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->string_value(), target);
  }

  // optional sint64 int64_value = 3;
  if (has_int64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->int64_value(), target);
  }

  // optional fixed64 fixed64_value = 5;
  if (has_fixed64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->fixed64_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramRelayAuthTicket_ExtraField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string string_value = 2;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional sint64 int64_value = 3;
    if (has_int64_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->int64_value());
    }

    // optional fixed64 fixed64_value = 5;
    if (has_fixed64_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramRelayAuthTicket_ExtraField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramRelayAuthTicket_ExtraField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::MergeFrom(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
    if (from.has_int64_value()) {
      set_int64_value(from.int64_value());
    }
    if (from.has_fixed64_value()) {
      set_fixed64_value(from.fixed64_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::CopyFrom(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRelayAuthTicket_ExtraField::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramRelayAuthTicket_ExtraField::Swap(CMsgSteamDatagramRelayAuthTicket_ExtraField* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(string_value_, other->string_value_);
    std::swap(int64_value_, other->int64_value_);
    std::swap(fixed64_value_, other->fixed64_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramRelayAuthTicket_ExtraField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramRelayAuthTicket_ExtraField_descriptor_;
  metadata.reflection = CMsgSteamDatagramRelayAuthTicket_ExtraField_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramRelayAuthTicket::kTimeExpiryFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kAuthorizedClientIdentityStringFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kGameserverIdentityStringFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kAuthorizedPublicIpFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kGameserverAddressFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kAppIdFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kVirtualPortFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kExtraFieldsFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kLegacyAuthorizedSteamIdFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kLegacyGameserverSteamIdFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kLegacyGameserverNetIdFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kLegacyGameserverPopIdFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kLegacyAuthorizedClientIdentityBinaryFieldNumber;
const int CMsgSteamDatagramRelayAuthTicket::kLegacyGameserverIdentityBinaryFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramRelayAuthTicket::CMsgSteamDatagramRelayAuthTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramRelayAuthTicket::InitAsDefaultInstance() {
}

CMsgSteamDatagramRelayAuthTicket::CMsgSteamDatagramRelayAuthTicket(const CMsgSteamDatagramRelayAuthTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramRelayAuthTicket::SharedCtor() {
  _cached_size_ = 0;
  time_expiry_ = 0u;
  authorized_client_identity_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameserver_identity_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  authorized_public_ip_ = 0u;
  gameserver_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_id_ = 0u;
  virtual_port_ = 0u;
  legacy_authorized_steam_id_ = GOOGLE_ULONGLONG(0);
  legacy_gameserver_steam_id_ = GOOGLE_ULONGLONG(0);
  legacy_gameserver_net_id_ = GOOGLE_ULONGLONG(0);
  legacy_gameserver_pop_id_ = 0u;
  legacy_authorized_client_identity_binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  legacy_gameserver_identity_binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramRelayAuthTicket::~CMsgSteamDatagramRelayAuthTicket() {
  SharedDtor();
}

void CMsgSteamDatagramRelayAuthTicket::SharedDtor() {
  if (authorized_client_identity_string_ != &::google::protobuf::internal::kEmptyString) {
    delete authorized_client_identity_string_;
  }
  if (gameserver_identity_string_ != &::google::protobuf::internal::kEmptyString) {
    delete gameserver_identity_string_;
  }
  if (gameserver_address_ != &::google::protobuf::internal::kEmptyString) {
    delete gameserver_address_;
  }
  if (legacy_authorized_client_identity_binary_ != &::google::protobuf::internal::kEmptyString) {
    delete legacy_authorized_client_identity_binary_;
  }
  if (legacy_gameserver_identity_binary_ != &::google::protobuf::internal::kEmptyString) {
    delete legacy_gameserver_identity_binary_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramRelayAuthTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramRelayAuthTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramRelayAuthTicket_descriptor_;
}

const CMsgSteamDatagramRelayAuthTicket& CMsgSteamDatagramRelayAuthTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramRelayAuthTicket* CMsgSteamDatagramRelayAuthTicket::default_instance_ = NULL;

CMsgSteamDatagramRelayAuthTicket* CMsgSteamDatagramRelayAuthTicket::New() const {
  return new CMsgSteamDatagramRelayAuthTicket;
}

void CMsgSteamDatagramRelayAuthTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_expiry_ = 0u;
    if (has_authorized_client_identity_string()) {
      if (authorized_client_identity_string_ != &::google::protobuf::internal::kEmptyString) {
        authorized_client_identity_string_->clear();
      }
    }
    if (has_gameserver_identity_string()) {
      if (gameserver_identity_string_ != &::google::protobuf::internal::kEmptyString) {
        gameserver_identity_string_->clear();
      }
    }
    authorized_public_ip_ = 0u;
    if (has_gameserver_address()) {
      if (gameserver_address_ != &::google::protobuf::internal::kEmptyString) {
        gameserver_address_->clear();
      }
    }
    app_id_ = 0u;
    virtual_port_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    legacy_authorized_steam_id_ = GOOGLE_ULONGLONG(0);
    legacy_gameserver_steam_id_ = GOOGLE_ULONGLONG(0);
    legacy_gameserver_net_id_ = GOOGLE_ULONGLONG(0);
    legacy_gameserver_pop_id_ = 0u;
    if (has_legacy_authorized_client_identity_binary()) {
      if (legacy_authorized_client_identity_binary_ != &::google::protobuf::internal::kEmptyString) {
        legacy_authorized_client_identity_binary_->clear();
      }
    }
    if (has_legacy_gameserver_identity_binary()) {
      if (legacy_gameserver_identity_binary_ != &::google::protobuf::internal::kEmptyString) {
        legacy_gameserver_identity_binary_->clear();
      }
    }
  }
  extra_fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramRelayAuthTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 time_expiry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_expiry_)));
          set_has_time_expiry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_legacy_authorized_steam_id;
        break;
      }

      // optional fixed64 legacy_authorized_steam_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_legacy_authorized_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_authorized_steam_id_)));
          set_has_legacy_authorized_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_authorized_public_ip;
        break;
      }

      // optional fixed32 authorized_public_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_authorized_public_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &authorized_public_ip_)));
          set_has_authorized_public_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_legacy_gameserver_steam_id;
        break;
      }

      // optional fixed64 legacy_gameserver_steam_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_legacy_gameserver_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_gameserver_steam_id_)));
          set_has_legacy_gameserver_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_legacy_gameserver_net_id;
        break;
      }

      // optional fixed64 legacy_gameserver_net_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_legacy_gameserver_net_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_gameserver_net_id_)));
          set_has_legacy_gameserver_net_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_extra_fields;
        break;
      }

      // repeated .CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_extra_fields;
        if (input->ExpectTag(77)) goto parse_legacy_gameserver_pop_id;
        break;
      }

      // optional fixed32 legacy_gameserver_pop_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_legacy_gameserver_pop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &legacy_gameserver_pop_id_)));
          set_has_legacy_gameserver_pop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_virtual_port;
        break;
      }

      // optional uint32 virtual_port = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_virtual_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &virtual_port_)));
          set_has_virtual_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_gameserver_address;
        break;
      }

      // optional bytes gameserver_address = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameserver_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gameserver_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_legacy_authorized_client_identity_binary;
        break;
      }

      // optional bytes legacy_authorized_client_identity_binary = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legacy_authorized_client_identity_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_legacy_authorized_client_identity_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_legacy_gameserver_identity_binary;
        break;
      }

      // optional bytes legacy_gameserver_identity_binary = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legacy_gameserver_identity_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_legacy_gameserver_identity_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_authorized_client_identity_string;
        break;
      }

      // optional string authorized_client_identity_string = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authorized_client_identity_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorized_client_identity_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authorized_client_identity_string().data(), this->authorized_client_identity_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_gameserver_identity_string;
        break;
      }

      // optional string gameserver_identity_string = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameserver_identity_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameserver_identity_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameserver_identity_string().data(), this->gameserver_identity_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramRelayAuthTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 time_expiry = 1;
  if (has_time_expiry()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->time_expiry(), output);
  }

  // optional fixed64 legacy_authorized_steam_id = 2;
  if (has_legacy_authorized_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->legacy_authorized_steam_id(), output);
  }

  // optional fixed32 authorized_public_ip = 3;
  if (has_authorized_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->authorized_public_ip(), output);
  }

  // optional fixed64 legacy_gameserver_steam_id = 4;
  if (has_legacy_gameserver_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->legacy_gameserver_steam_id(), output);
  }

  // optional fixed64 legacy_gameserver_net_id = 5;
  if (has_legacy_gameserver_net_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->legacy_gameserver_net_id(), output);
  }

  // optional uint32 app_id = 7;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->app_id(), output);
  }

  // repeated .CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
  for (int i = 0; i < this->extra_fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->extra_fields(i), output);
  }

  // optional fixed32 legacy_gameserver_pop_id = 9;
  if (has_legacy_gameserver_pop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->legacy_gameserver_pop_id(), output);
  }

  // optional uint32 virtual_port = 10;
  if (has_virtual_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->virtual_port(), output);
  }

  // optional bytes gameserver_address = 11;
  if (has_gameserver_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->gameserver_address(), output);
  }

  // optional bytes legacy_authorized_client_identity_binary = 12;
  if (has_legacy_authorized_client_identity_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->legacy_authorized_client_identity_binary(), output);
  }

  // optional bytes legacy_gameserver_identity_binary = 13;
  if (has_legacy_gameserver_identity_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->legacy_gameserver_identity_binary(), output);
  }

  // optional string authorized_client_identity_string = 14;
  if (has_authorized_client_identity_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorized_client_identity_string().data(), this->authorized_client_identity_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->authorized_client_identity_string(), output);
  }

  // optional string gameserver_identity_string = 15;
  if (has_gameserver_identity_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameserver_identity_string().data(), this->gameserver_identity_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->gameserver_identity_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramRelayAuthTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 time_expiry = 1;
  if (has_time_expiry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->time_expiry(), target);
  }

  // optional fixed64 legacy_authorized_steam_id = 2;
  if (has_legacy_authorized_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->legacy_authorized_steam_id(), target);
  }

  // optional fixed32 authorized_public_ip = 3;
  if (has_authorized_public_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->authorized_public_ip(), target);
  }

  // optional fixed64 legacy_gameserver_steam_id = 4;
  if (has_legacy_gameserver_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->legacy_gameserver_steam_id(), target);
  }

  // optional fixed64 legacy_gameserver_net_id = 5;
  if (has_legacy_gameserver_net_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->legacy_gameserver_net_id(), target);
  }

  // optional uint32 app_id = 7;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->app_id(), target);
  }

  // repeated .CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
  for (int i = 0; i < this->extra_fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->extra_fields(i), target);
  }

  // optional fixed32 legacy_gameserver_pop_id = 9;
  if (has_legacy_gameserver_pop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->legacy_gameserver_pop_id(), target);
  }

  // optional uint32 virtual_port = 10;
  if (has_virtual_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->virtual_port(), target);
  }

  // optional bytes gameserver_address = 11;
  if (has_gameserver_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->gameserver_address(), target);
  }

  // optional bytes legacy_authorized_client_identity_binary = 12;
  if (has_legacy_authorized_client_identity_binary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->legacy_authorized_client_identity_binary(), target);
  }

  // optional bytes legacy_gameserver_identity_binary = 13;
  if (has_legacy_gameserver_identity_binary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->legacy_gameserver_identity_binary(), target);
  }

  // optional string authorized_client_identity_string = 14;
  if (has_authorized_client_identity_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorized_client_identity_string().data(), this->authorized_client_identity_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->authorized_client_identity_string(), target);
  }

  // optional string gameserver_identity_string = 15;
  if (has_gameserver_identity_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameserver_identity_string().data(), this->gameserver_identity_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->gameserver_identity_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramRelayAuthTicket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 time_expiry = 1;
    if (has_time_expiry()) {
      total_size += 1 + 4;
    }

    // optional string authorized_client_identity_string = 14;
    if (has_authorized_client_identity_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authorized_client_identity_string());
    }

    // optional string gameserver_identity_string = 15;
    if (has_gameserver_identity_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameserver_identity_string());
    }

    // optional fixed32 authorized_public_ip = 3;
    if (has_authorized_public_ip()) {
      total_size += 1 + 4;
    }

    // optional bytes gameserver_address = 11;
    if (has_gameserver_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gameserver_address());
    }

    // optional uint32 app_id = 7;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 virtual_port = 10;
    if (has_virtual_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->virtual_port());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed64 legacy_authorized_steam_id = 2;
    if (has_legacy_authorized_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 legacy_gameserver_steam_id = 4;
    if (has_legacy_gameserver_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 legacy_gameserver_net_id = 5;
    if (has_legacy_gameserver_net_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 legacy_gameserver_pop_id = 9;
    if (has_legacy_gameserver_pop_id()) {
      total_size += 1 + 4;
    }

    // optional bytes legacy_authorized_client_identity_binary = 12;
    if (has_legacy_authorized_client_identity_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->legacy_authorized_client_identity_binary());
    }

    // optional bytes legacy_gameserver_identity_binary = 13;
    if (has_legacy_gameserver_identity_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->legacy_gameserver_identity_binary());
    }

  }
  // repeated .CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
  total_size += 1 * this->extra_fields_size();
  for (int i = 0; i < this->extra_fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_fields(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramRelayAuthTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramRelayAuthTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramRelayAuthTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRelayAuthTicket::MergeFrom(const CMsgSteamDatagramRelayAuthTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  extra_fields_.MergeFrom(from.extra_fields_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_expiry()) {
      set_time_expiry(from.time_expiry());
    }
    if (from.has_authorized_client_identity_string()) {
      set_authorized_client_identity_string(from.authorized_client_identity_string());
    }
    if (from.has_gameserver_identity_string()) {
      set_gameserver_identity_string(from.gameserver_identity_string());
    }
    if (from.has_authorized_public_ip()) {
      set_authorized_public_ip(from.authorized_public_ip());
    }
    if (from.has_gameserver_address()) {
      set_gameserver_address(from.gameserver_address());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_virtual_port()) {
      set_virtual_port(from.virtual_port());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_legacy_authorized_steam_id()) {
      set_legacy_authorized_steam_id(from.legacy_authorized_steam_id());
    }
    if (from.has_legacy_gameserver_steam_id()) {
      set_legacy_gameserver_steam_id(from.legacy_gameserver_steam_id());
    }
    if (from.has_legacy_gameserver_net_id()) {
      set_legacy_gameserver_net_id(from.legacy_gameserver_net_id());
    }
    if (from.has_legacy_gameserver_pop_id()) {
      set_legacy_gameserver_pop_id(from.legacy_gameserver_pop_id());
    }
    if (from.has_legacy_authorized_client_identity_binary()) {
      set_legacy_authorized_client_identity_binary(from.legacy_authorized_client_identity_binary());
    }
    if (from.has_legacy_gameserver_identity_binary()) {
      set_legacy_gameserver_identity_binary(from.legacy_gameserver_identity_binary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramRelayAuthTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRelayAuthTicket::CopyFrom(const CMsgSteamDatagramRelayAuthTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRelayAuthTicket::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramRelayAuthTicket::Swap(CMsgSteamDatagramRelayAuthTicket* other) {
  if (other != this) {
    std::swap(time_expiry_, other->time_expiry_);
    std::swap(authorized_client_identity_string_, other->authorized_client_identity_string_);
    std::swap(gameserver_identity_string_, other->gameserver_identity_string_);
    std::swap(authorized_public_ip_, other->authorized_public_ip_);
    std::swap(gameserver_address_, other->gameserver_address_);
    std::swap(app_id_, other->app_id_);
    std::swap(virtual_port_, other->virtual_port_);
    extra_fields_.Swap(&other->extra_fields_);
    std::swap(legacy_authorized_steam_id_, other->legacy_authorized_steam_id_);
    std::swap(legacy_gameserver_steam_id_, other->legacy_gameserver_steam_id_);
    std::swap(legacy_gameserver_net_id_, other->legacy_gameserver_net_id_);
    std::swap(legacy_gameserver_pop_id_, other->legacy_gameserver_pop_id_);
    std::swap(legacy_authorized_client_identity_binary_, other->legacy_authorized_client_identity_binary_);
    std::swap(legacy_gameserver_identity_binary_, other->legacy_gameserver_identity_binary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramRelayAuthTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramRelayAuthTicket_descriptor_;
  metadata.reflection = CMsgSteamDatagramRelayAuthTicket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramSignedRelayAuthTicket::kReservedDoNotUseFieldNumber;
const int CMsgSteamDatagramSignedRelayAuthTicket::kKeyIdFieldNumber;
const int CMsgSteamDatagramSignedRelayAuthTicket::kTicketFieldNumber;
const int CMsgSteamDatagramSignedRelayAuthTicket::kSignatureFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramSignedRelayAuthTicket::CMsgSteamDatagramSignedRelayAuthTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramSignedRelayAuthTicket::InitAsDefaultInstance() {
}

CMsgSteamDatagramSignedRelayAuthTicket::CMsgSteamDatagramSignedRelayAuthTicket(const CMsgSteamDatagramSignedRelayAuthTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramSignedRelayAuthTicket::SharedCtor() {
  _cached_size_ = 0;
  reserved_do_not_use_ = GOOGLE_ULONGLONG(0);
  key_id_ = GOOGLE_ULONGLONG(0);
  ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramSignedRelayAuthTicket::~CMsgSteamDatagramSignedRelayAuthTicket() {
  SharedDtor();
}

void CMsgSteamDatagramSignedRelayAuthTicket::SharedDtor() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramSignedRelayAuthTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramSignedRelayAuthTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramSignedRelayAuthTicket_descriptor_;
}

const CMsgSteamDatagramSignedRelayAuthTicket& CMsgSteamDatagramSignedRelayAuthTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramSignedRelayAuthTicket* CMsgSteamDatagramSignedRelayAuthTicket::default_instance_ = NULL;

CMsgSteamDatagramSignedRelayAuthTicket* CMsgSteamDatagramSignedRelayAuthTicket::New() const {
  return new CMsgSteamDatagramSignedRelayAuthTicket;
}

void CMsgSteamDatagramSignedRelayAuthTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserved_do_not_use_ = GOOGLE_ULONGLONG(0);
    key_id_ = GOOGLE_ULONGLONG(0);
    if (has_ticket()) {
      if (ticket_ != &::google::protobuf::internal::kEmptyString) {
        ticket_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramSignedRelayAuthTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 reserved_do_not_use = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &reserved_do_not_use_)));
          set_has_reserved_do_not_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_key_id;
        break;
      }

      // optional fixed64 key_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &key_id_)));
          set_has_key_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ticket;
        break;
      }

      // optional bytes ticket = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_signature;
        break;
      }

      // optional bytes signature = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramSignedRelayAuthTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 reserved_do_not_use = 1;
  if (has_reserved_do_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->reserved_do_not_use(), output);
  }

  // optional fixed64 key_id = 2;
  if (has_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->key_id(), output);
  }

  // optional bytes ticket = 3;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ticket(), output);
  }

  // optional bytes signature = 4;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramSignedRelayAuthTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 reserved_do_not_use = 1;
  if (has_reserved_do_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->reserved_do_not_use(), target);
  }

  // optional fixed64 key_id = 2;
  if (has_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->key_id(), target);
  }

  // optional bytes ticket = 3;
  if (has_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ticket(), target);
  }

  // optional bytes signature = 4;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramSignedRelayAuthTicket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 reserved_do_not_use = 1;
    if (has_reserved_do_not_use()) {
      total_size += 1 + 8;
    }

    // optional fixed64 key_id = 2;
    if (has_key_id()) {
      total_size += 1 + 8;
    }

    // optional bytes ticket = 3;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

    // optional bytes signature = 4;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramSignedRelayAuthTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramSignedRelayAuthTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramSignedRelayAuthTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramSignedRelayAuthTicket::MergeFrom(const CMsgSteamDatagramSignedRelayAuthTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserved_do_not_use()) {
      set_reserved_do_not_use(from.reserved_do_not_use());
    }
    if (from.has_key_id()) {
      set_key_id(from.key_id());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramSignedRelayAuthTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramSignedRelayAuthTicket::CopyFrom(const CMsgSteamDatagramSignedRelayAuthTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramSignedRelayAuthTicket::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramSignedRelayAuthTicket::Swap(CMsgSteamDatagramSignedRelayAuthTicket* other) {
  if (other != this) {
    std::swap(reserved_do_not_use_, other->reserved_do_not_use_);
    std::swap(key_id_, other->key_id_);
    std::swap(ticket_, other->ticket_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramSignedRelayAuthTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramSignedRelayAuthTicket_descriptor_;
  metadata.reflection = CMsgSteamDatagramSignedRelayAuthTicket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramCachedCredentialsForApp::kPrivateKeyFieldNumber;
const int CMsgSteamDatagramCachedCredentialsForApp::kCertFieldNumber;
const int CMsgSteamDatagramCachedCredentialsForApp::kRelayTicketsFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramCachedCredentialsForApp::CMsgSteamDatagramCachedCredentialsForApp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramCachedCredentialsForApp::InitAsDefaultInstance() {
}

CMsgSteamDatagramCachedCredentialsForApp::CMsgSteamDatagramCachedCredentialsForApp(const CMsgSteamDatagramCachedCredentialsForApp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramCachedCredentialsForApp::SharedCtor() {
  _cached_size_ = 0;
  private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramCachedCredentialsForApp::~CMsgSteamDatagramCachedCredentialsForApp() {
  SharedDtor();
}

void CMsgSteamDatagramCachedCredentialsForApp::SharedDtor() {
  if (private_key_ != &::google::protobuf::internal::kEmptyString) {
    delete private_key_;
  }
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    delete cert_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramCachedCredentialsForApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramCachedCredentialsForApp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramCachedCredentialsForApp_descriptor_;
}

const CMsgSteamDatagramCachedCredentialsForApp& CMsgSteamDatagramCachedCredentialsForApp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramCachedCredentialsForApp* CMsgSteamDatagramCachedCredentialsForApp::default_instance_ = NULL;

CMsgSteamDatagramCachedCredentialsForApp* CMsgSteamDatagramCachedCredentialsForApp::New() const {
  return new CMsgSteamDatagramCachedCredentialsForApp;
}

void CMsgSteamDatagramCachedCredentialsForApp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_private_key()) {
      if (private_key_ != &::google::protobuf::internal::kEmptyString) {
        private_key_->clear();
      }
    }
    if (has_cert()) {
      if (cert_ != &::google::protobuf::internal::kEmptyString) {
        cert_->clear();
      }
    }
  }
  relay_tickets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramCachedCredentialsForApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes private_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_private_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cert;
        break;
      }

      // optional bytes cert = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_relay_tickets;
        break;
      }

      // repeated bytes relay_tickets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relay_tickets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_relay_tickets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_relay_tickets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramCachedCredentialsForApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes private_key = 1;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->private_key(), output);
  }

  // optional bytes cert = 2;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->cert(), output);
  }

  // repeated bytes relay_tickets = 3;
  for (int i = 0; i < this->relay_tickets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->relay_tickets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramCachedCredentialsForApp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes private_key = 1;
  if (has_private_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->private_key(), target);
  }

  // optional bytes cert = 2;
  if (has_cert()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cert(), target);
  }

  // repeated bytes relay_tickets = 3;
  for (int i = 0; i < this->relay_tickets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->relay_tickets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramCachedCredentialsForApp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes private_key = 1;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->private_key());
    }

    // optional bytes cert = 2;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert());
    }

  }
  // repeated bytes relay_tickets = 3;
  total_size += 1 * this->relay_tickets_size();
  for (int i = 0; i < this->relay_tickets_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->relay_tickets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramCachedCredentialsForApp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramCachedCredentialsForApp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramCachedCredentialsForApp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCachedCredentialsForApp::MergeFrom(const CMsgSteamDatagramCachedCredentialsForApp& from) {
  GOOGLE_CHECK_NE(&from, this);
  relay_tickets_.MergeFrom(from.relay_tickets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_key()) {
      set_private_key(from.private_key());
    }
    if (from.has_cert()) {
      set_cert(from.cert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramCachedCredentialsForApp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCachedCredentialsForApp::CopyFrom(const CMsgSteamDatagramCachedCredentialsForApp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCachedCredentialsForApp::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramCachedCredentialsForApp::Swap(CMsgSteamDatagramCachedCredentialsForApp* other) {
  if (other != this) {
    std::swap(private_key_, other->private_key_);
    std::swap(cert_, other->cert_);
    relay_tickets_.Swap(&other->relay_tickets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramCachedCredentialsForApp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramCachedCredentialsForApp_descriptor_;
  metadata.reflection = CMsgSteamDatagramCachedCredentialsForApp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramGameCoordinatorServerLogin::kTimeGeneratedFieldNumber;
const int CMsgSteamDatagramGameCoordinatorServerLogin::kAppidFieldNumber;
const int CMsgSteamDatagramGameCoordinatorServerLogin::kRoutingFieldNumber;
const int CMsgSteamDatagramGameCoordinatorServerLogin::kAppdataFieldNumber;
const int CMsgSteamDatagramGameCoordinatorServerLogin::kLegacyIdentityBinaryFieldNumber;
const int CMsgSteamDatagramGameCoordinatorServerLogin::kIdentityStringFieldNumber;
const int CMsgSteamDatagramGameCoordinatorServerLogin::kDummySteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramGameCoordinatorServerLogin::CMsgSteamDatagramGameCoordinatorServerLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramGameCoordinatorServerLogin::InitAsDefaultInstance() {
}

CMsgSteamDatagramGameCoordinatorServerLogin::CMsgSteamDatagramGameCoordinatorServerLogin(const CMsgSteamDatagramGameCoordinatorServerLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramGameCoordinatorServerLogin::SharedCtor() {
  _cached_size_ = 0;
  time_generated_ = 0u;
  appid_ = 0u;
  routing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  legacy_identity_binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  identity_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dummy_steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramGameCoordinatorServerLogin::~CMsgSteamDatagramGameCoordinatorServerLogin() {
  SharedDtor();
}

void CMsgSteamDatagramGameCoordinatorServerLogin::SharedDtor() {
  if (routing_ != &::google::protobuf::internal::kEmptyString) {
    delete routing_;
  }
  if (appdata_ != &::google::protobuf::internal::kEmptyString) {
    delete appdata_;
  }
  if (legacy_identity_binary_ != &::google::protobuf::internal::kEmptyString) {
    delete legacy_identity_binary_;
  }
  if (identity_string_ != &::google::protobuf::internal::kEmptyString) {
    delete identity_string_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramGameCoordinatorServerLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameCoordinatorServerLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramGameCoordinatorServerLogin_descriptor_;
}

const CMsgSteamDatagramGameCoordinatorServerLogin& CMsgSteamDatagramGameCoordinatorServerLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramGameCoordinatorServerLogin* CMsgSteamDatagramGameCoordinatorServerLogin::default_instance_ = NULL;

CMsgSteamDatagramGameCoordinatorServerLogin* CMsgSteamDatagramGameCoordinatorServerLogin::New() const {
  return new CMsgSteamDatagramGameCoordinatorServerLogin;
}

void CMsgSteamDatagramGameCoordinatorServerLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_generated_ = 0u;
    appid_ = 0u;
    if (has_routing()) {
      if (routing_ != &::google::protobuf::internal::kEmptyString) {
        routing_->clear();
      }
    }
    if (has_appdata()) {
      if (appdata_ != &::google::protobuf::internal::kEmptyString) {
        appdata_->clear();
      }
    }
    if (has_legacy_identity_binary()) {
      if (legacy_identity_binary_ != &::google::protobuf::internal::kEmptyString) {
        legacy_identity_binary_->clear();
      }
    }
    if (has_identity_string()) {
      if (identity_string_ != &::google::protobuf::internal::kEmptyString) {
        identity_string_->clear();
      }
    }
    dummy_steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramGameCoordinatorServerLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time_generated = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_generated_)));
          set_has_time_generated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_routing;
        break;
      }

      // optional bytes routing = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_routing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_appdata;
        break;
      }

      // optional bytes appdata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_legacy_identity_binary;
        break;
      }

      // optional bytes legacy_identity_binary = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legacy_identity_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_legacy_identity_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_identity_string;
        break;
      }

      // optional string identity_string = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identity_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identity_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identity_string().data(), this->identity_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(793)) goto parse_dummy_steam_id;
        break;
      }

      // optional fixed64 dummy_steam_id = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dummy_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dummy_steam_id_)));
          set_has_dummy_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramGameCoordinatorServerLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time_generated = 1;
  if (has_time_generated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_generated(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional bytes routing = 3;
  if (has_routing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->routing(), output);
  }

  // optional bytes appdata = 4;
  if (has_appdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->appdata(), output);
  }

  // optional bytes legacy_identity_binary = 5;
  if (has_legacy_identity_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->legacy_identity_binary(), output);
  }

  // optional string identity_string = 6;
  if (has_identity_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identity_string().data(), this->identity_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->identity_string(), output);
  }

  // optional fixed64 dummy_steam_id = 99;
  if (has_dummy_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(99, this->dummy_steam_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramGameCoordinatorServerLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 time_generated = 1;
  if (has_time_generated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_generated(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional bytes routing = 3;
  if (has_routing()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->routing(), target);
  }

  // optional bytes appdata = 4;
  if (has_appdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->appdata(), target);
  }

  // optional bytes legacy_identity_binary = 5;
  if (has_legacy_identity_binary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->legacy_identity_binary(), target);
  }

  // optional string identity_string = 6;
  if (has_identity_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identity_string().data(), this->identity_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->identity_string(), target);
  }

  // optional fixed64 dummy_steam_id = 99;
  if (has_dummy_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(99, this->dummy_steam_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramGameCoordinatorServerLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time_generated = 1;
    if (has_time_generated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_generated());
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bytes routing = 3;
    if (has_routing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->routing());
    }

    // optional bytes appdata = 4;
    if (has_appdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->appdata());
    }

    // optional bytes legacy_identity_binary = 5;
    if (has_legacy_identity_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->legacy_identity_binary());
    }

    // optional string identity_string = 6;
    if (has_identity_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identity_string());
    }

    // optional fixed64 dummy_steam_id = 99;
    if (has_dummy_steam_id()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramGameCoordinatorServerLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramGameCoordinatorServerLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramGameCoordinatorServerLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameCoordinatorServerLogin::MergeFrom(const CMsgSteamDatagramGameCoordinatorServerLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_generated()) {
      set_time_generated(from.time_generated());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_routing()) {
      set_routing(from.routing());
    }
    if (from.has_appdata()) {
      set_appdata(from.appdata());
    }
    if (from.has_legacy_identity_binary()) {
      set_legacy_identity_binary(from.legacy_identity_binary());
    }
    if (from.has_identity_string()) {
      set_identity_string(from.identity_string());
    }
    if (from.has_dummy_steam_id()) {
      set_dummy_steam_id(from.dummy_steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramGameCoordinatorServerLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameCoordinatorServerLogin::CopyFrom(const CMsgSteamDatagramGameCoordinatorServerLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameCoordinatorServerLogin::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramGameCoordinatorServerLogin::Swap(CMsgSteamDatagramGameCoordinatorServerLogin* other) {
  if (other != this) {
    std::swap(time_generated_, other->time_generated_);
    std::swap(appid_, other->appid_);
    std::swap(routing_, other->routing_);
    std::swap(appdata_, other->appdata_);
    std::swap(legacy_identity_binary_, other->legacy_identity_binary_);
    std::swap(identity_string_, other->identity_string_);
    std::swap(dummy_steam_id_, other->dummy_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramGameCoordinatorServerLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramGameCoordinatorServerLogin_descriptor_;
  metadata.reflection = CMsgSteamDatagramGameCoordinatorServerLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramSignedGameCoordinatorServerLogin::kCertFieldNumber;
const int CMsgSteamDatagramSignedGameCoordinatorServerLogin::kLoginFieldNumber;
const int CMsgSteamDatagramSignedGameCoordinatorServerLogin::kSignatureFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramSignedGameCoordinatorServerLogin::CMsgSteamDatagramSignedGameCoordinatorServerLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramSignedGameCoordinatorServerLogin::InitAsDefaultInstance() {
  cert_ = const_cast< ::CMsgSteamDatagramCertificateSigned*>(&::CMsgSteamDatagramCertificateSigned::default_instance());
}

CMsgSteamDatagramSignedGameCoordinatorServerLogin::CMsgSteamDatagramSignedGameCoordinatorServerLogin(const CMsgSteamDatagramSignedGameCoordinatorServerLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramSignedGameCoordinatorServerLogin::SharedCtor() {
  _cached_size_ = 0;
  cert_ = NULL;
  login_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramSignedGameCoordinatorServerLogin::~CMsgSteamDatagramSignedGameCoordinatorServerLogin() {
  SharedDtor();
}

void CMsgSteamDatagramSignedGameCoordinatorServerLogin::SharedDtor() {
  if (login_ != &::google::protobuf::internal::kEmptyString) {
    delete login_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
    delete cert_;
  }
}

void CMsgSteamDatagramSignedGameCoordinatorServerLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramSignedGameCoordinatorServerLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramSignedGameCoordinatorServerLogin_descriptor_;
}

const CMsgSteamDatagramSignedGameCoordinatorServerLogin& CMsgSteamDatagramSignedGameCoordinatorServerLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramSignedGameCoordinatorServerLogin* CMsgSteamDatagramSignedGameCoordinatorServerLogin::default_instance_ = NULL;

CMsgSteamDatagramSignedGameCoordinatorServerLogin* CMsgSteamDatagramSignedGameCoordinatorServerLogin::New() const {
  return new CMsgSteamDatagramSignedGameCoordinatorServerLogin;
}

void CMsgSteamDatagramSignedGameCoordinatorServerLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cert()) {
      if (cert_ != NULL) cert_->::CMsgSteamDatagramCertificateSigned::Clear();
    }
    if (has_login()) {
      if (login_ != &::google::protobuf::internal::kEmptyString) {
        login_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramSignedGameCoordinatorServerLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramCertificateSigned cert = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_login;
        break;
      }

      // optional bytes login = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signature;
        break;
      }

      // optional bytes signature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramSignedGameCoordinatorServerLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramCertificateSigned cert = 1;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cert(), output);
  }

  // optional bytes login = 2;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->login(), output);
  }

  // optional bytes signature = 3;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramSignedGameCoordinatorServerLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramCertificateSigned cert = 1;
  if (has_cert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cert(), target);
  }

  // optional bytes login = 2;
  if (has_login()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->login(), target);
  }

  // optional bytes signature = 3;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramSignedGameCoordinatorServerLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cert());
    }

    // optional bytes login = 2;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->login());
    }

    // optional bytes signature = 3;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramSignedGameCoordinatorServerLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramSignedGameCoordinatorServerLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramSignedGameCoordinatorServerLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramSignedGameCoordinatorServerLogin::MergeFrom(const CMsgSteamDatagramSignedGameCoordinatorServerLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cert()) {
      mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from.cert());
    }
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramSignedGameCoordinatorServerLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramSignedGameCoordinatorServerLogin::CopyFrom(const CMsgSteamDatagramSignedGameCoordinatorServerLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramSignedGameCoordinatorServerLogin::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramSignedGameCoordinatorServerLogin::Swap(CMsgSteamDatagramSignedGameCoordinatorServerLogin* other) {
  if (other != this) {
    std::swap(cert_, other->cert_);
    std::swap(login_, other->login_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramSignedGameCoordinatorServerLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramSignedGameCoordinatorServerLogin_descriptor_;
  metadata.reflection = CMsgSteamDatagramSignedGameCoordinatorServerLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramHostedServerAddressPlaintext::kIpv4FieldNumber;
const int CMsgSteamDatagramHostedServerAddressPlaintext::kIpv6FieldNumber;
const int CMsgSteamDatagramHostedServerAddressPlaintext::kPortFieldNumber;
const int CMsgSteamDatagramHostedServerAddressPlaintext::kRoutingSecretFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramHostedServerAddressPlaintext::CMsgSteamDatagramHostedServerAddressPlaintext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramHostedServerAddressPlaintext::InitAsDefaultInstance() {
}

CMsgSteamDatagramHostedServerAddressPlaintext::CMsgSteamDatagramHostedServerAddressPlaintext(const CMsgSteamDatagramHostedServerAddressPlaintext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramHostedServerAddressPlaintext::SharedCtor() {
  _cached_size_ = 0;
  ipv4_ = 0u;
  ipv6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  routing_secret_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramHostedServerAddressPlaintext::~CMsgSteamDatagramHostedServerAddressPlaintext() {
  SharedDtor();
}

void CMsgSteamDatagramHostedServerAddressPlaintext::SharedDtor() {
  if (ipv6_ != &::google::protobuf::internal::kEmptyString) {
    delete ipv6_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramHostedServerAddressPlaintext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramHostedServerAddressPlaintext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramHostedServerAddressPlaintext_descriptor_;
}

const CMsgSteamDatagramHostedServerAddressPlaintext& CMsgSteamDatagramHostedServerAddressPlaintext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fauth_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramHostedServerAddressPlaintext* CMsgSteamDatagramHostedServerAddressPlaintext::default_instance_ = NULL;

CMsgSteamDatagramHostedServerAddressPlaintext* CMsgSteamDatagramHostedServerAddressPlaintext::New() const {
  return new CMsgSteamDatagramHostedServerAddressPlaintext;
}

void CMsgSteamDatagramHostedServerAddressPlaintext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ipv4_ = 0u;
    if (has_ipv6()) {
      if (ipv6_ != &::google::protobuf::internal::kEmptyString) {
        ipv6_->clear();
      }
    }
    port_ = 0u;
    routing_secret_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramHostedServerAddressPlaintext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 ipv4 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ipv4_)));
          set_has_ipv4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ipv6;
        break;
      }

      // optional bytes ipv6 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ipv6()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_routing_secret;
        break;
      }

      // optional fixed64 routing_secret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_routing_secret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &routing_secret_)));
          set_has_routing_secret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramHostedServerAddressPlaintext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 ipv4 = 1;
  if (has_ipv4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->ipv4(), output);
  }

  // optional bytes ipv6 = 2;
  if (has_ipv6()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ipv6(), output);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional fixed64 routing_secret = 4;
  if (has_routing_secret()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->routing_secret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramHostedServerAddressPlaintext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 ipv4 = 1;
  if (has_ipv4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->ipv4(), target);
  }

  // optional bytes ipv6 = 2;
  if (has_ipv6()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ipv6(), target);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // optional fixed64 routing_secret = 4;
  if (has_routing_secret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->routing_secret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramHostedServerAddressPlaintext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 ipv4 = 1;
    if (has_ipv4()) {
      total_size += 1 + 4;
    }

    // optional bytes ipv6 = 2;
    if (has_ipv6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ipv6());
    }

    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional fixed64 routing_secret = 4;
    if (has_routing_secret()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramHostedServerAddressPlaintext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramHostedServerAddressPlaintext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramHostedServerAddressPlaintext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramHostedServerAddressPlaintext::MergeFrom(const CMsgSteamDatagramHostedServerAddressPlaintext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipv4()) {
      set_ipv4(from.ipv4());
    }
    if (from.has_ipv6()) {
      set_ipv6(from.ipv6());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_routing_secret()) {
      set_routing_secret(from.routing_secret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramHostedServerAddressPlaintext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramHostedServerAddressPlaintext::CopyFrom(const CMsgSteamDatagramHostedServerAddressPlaintext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramHostedServerAddressPlaintext::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramHostedServerAddressPlaintext::Swap(CMsgSteamDatagramHostedServerAddressPlaintext* other) {
  if (other != this) {
    std::swap(ipv4_, other->ipv4_);
    std::swap(ipv6_, other->ipv6_);
    std::swap(port_, other->port_);
    std::swap(routing_secret_, other->routing_secret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramHostedServerAddressPlaintext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramHostedServerAddressPlaintext_descriptor_;
  metadata.reflection = CMsgSteamDatagramHostedServerAddressPlaintext_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
