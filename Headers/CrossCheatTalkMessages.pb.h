// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CrossCheatTalkMessages.proto

#ifndef PROTOBUF_CrossCheatTalkMessages_2eproto__INCLUDED
#define PROTOBUF_CrossCheatTalkMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CrossCheatTalkMessages_2eproto();
void protobuf_AssignDesc_CrossCheatTalkMessages_2eproto();
void protobuf_ShutdownFile_CrossCheatTalkMessages_2eproto();

class VectorMsg;
class CrossCheatInitMsg;
class EntityPacketMsg;
class ExploitOnMsg;
class SharedESPUpdate;
class HitBoxMsg;
class OriginUpdate;
class HarpoonChat;

enum CrossCheatMsgType {
  k_CrossCheatInitMsg = 1,
  k_EntityPacketMsg = 2,
  k_ExploitOnMsg = 3,
  k_SharedESPUpdate = 4,
  k_OriginUpdate = 5,
  k_HarpoonChat = 6
};
bool CrossCheatMsgType_IsValid(int value);
const CrossCheatMsgType CrossCheatMsgType_MIN = k_CrossCheatInitMsg;
const CrossCheatMsgType CrossCheatMsgType_MAX = k_HarpoonChat;
const int CrossCheatMsgType_ARRAYSIZE = CrossCheatMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CrossCheatMsgType_descriptor();
inline const ::std::string& CrossCheatMsgType_Name(CrossCheatMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CrossCheatMsgType_descriptor(), value);
}
inline bool CrossCheatMsgType_Parse(
    const ::std::string& name, CrossCheatMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CrossCheatMsgType>(
    CrossCheatMsgType_descriptor(), name, value);
}
// ===================================================================

class VectorMsg : public ::google::protobuf::Message {
 public:
  VectorMsg();
  virtual ~VectorMsg();

  VectorMsg(const VectorMsg& from);

  inline VectorMsg& operator=(const VectorMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorMsg& default_instance();

  void Swap(VectorMsg* other);

  // implements Message ----------------------------------------------

  VectorMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorMsg& from);
  void MergeFrom(const VectorMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:VectorMsg)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CrossCheatTalkMessages_2eproto();
  friend void protobuf_AssignDesc_CrossCheatTalkMessages_2eproto();
  friend void protobuf_ShutdownFile_CrossCheatTalkMessages_2eproto();

  void InitAsDefaultInstance();
  static VectorMsg* default_instance_;
};
// -------------------------------------------------------------------

class CrossCheatInitMsg : public ::google::protobuf::Message {
 public:
  CrossCheatInitMsg();
  virtual ~CrossCheatInitMsg();

  CrossCheatInitMsg(const CrossCheatInitMsg& from);

  inline CrossCheatInitMsg& operator=(const CrossCheatInitMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrossCheatInitMsg& default_instance();

  void Swap(CrossCheatInitMsg* other);

  // implements Message ----------------------------------------------

  CrossCheatInitMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrossCheatInitMsg& from);
  void MergeFrom(const CrossCheatInitMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SteamID = 1;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamIDFieldNumber = 1;
  inline ::google::protobuf::uint32 steamid() const;
  inline void set_steamid(::google::protobuf::uint32 value);

  // optional uint32 SteamIndex = 2;
  inline bool has_steamindex() const;
  inline void clear_steamindex();
  static const int kSteamIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 steamindex() const;
  inline void set_steamindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CrossCheatInitMsg)
 private:
  inline void set_has_steamid();
  inline void clear_has_steamid();
  inline void set_has_steamindex();
  inline void clear_has_steamindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 steamid_;
  ::google::protobuf::uint32 steamindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CrossCheatTalkMessages_2eproto();
  friend void protobuf_AssignDesc_CrossCheatTalkMessages_2eproto();
  friend void protobuf_ShutdownFile_CrossCheatTalkMessages_2eproto();

  void InitAsDefaultInstance();
  static CrossCheatInitMsg* default_instance_;
};
// -------------------------------------------------------------------

class EntityPacketMsg : public ::google::protobuf::Message {
 public:
  EntityPacketMsg();
  virtual ~EntityPacketMsg();

  EntityPacketMsg(const EntityPacketMsg& from);

  inline EntityPacketMsg& operator=(const EntityPacketMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityPacketMsg& default_instance();

  void Swap(EntityPacketMsg* other);

  // implements Message ----------------------------------------------

  EntityPacketMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntityPacketMsg& from);
  void MergeFrom(const EntityPacketMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // optional uint32 SteamID = 4;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamIDFieldNumber = 4;
  inline ::google::protobuf::uint32 steamid() const;
  inline void set_steamid(::google::protobuf::uint32 value);

  // optional uint32 ServerIndex = 5;
  inline bool has_serverindex() const;
  inline void clear_serverindex();
  static const int kServerIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 serverindex() const;
  inline void set_serverindex(::google::protobuf::uint32 value);

  // optional uint32 PlayerHealth = 6;
  inline bool has_playerhealth() const;
  inline void clear_playerhealth();
  static const int kPlayerHealthFieldNumber = 6;
  inline ::google::protobuf::uint32 playerhealth() const;
  inline void set_playerhealth(::google::protobuf::uint32 value);

  // optional uint32 PlayerArmour = 7;
  inline bool has_playerarmour() const;
  inline void clear_playerarmour();
  static const int kPlayerArmourFieldNumber = 7;
  inline ::google::protobuf::uint32 playerarmour() const;
  inline void set_playerarmour(::google::protobuf::uint32 value);

  // optional .VectorMsg Origin = 8;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 8;
  inline const ::VectorMsg& origin() const;
  inline ::VectorMsg* mutable_origin();
  inline ::VectorMsg* release_origin();
  inline void set_allocated_origin(::VectorMsg* origin);

  // optional string MatrixData = 9;
  inline bool has_matrixdata() const;
  inline void clear_matrixdata();
  static const int kMatrixDataFieldNumber = 9;
  inline const ::std::string& matrixdata() const;
  inline void set_matrixdata(const ::std::string& value);
  inline void set_matrixdata(const char* value);
  inline void set_matrixdata(const char* value, size_t size);
  inline ::std::string* mutable_matrixdata();
  inline ::std::string* release_matrixdata();
  inline void set_allocated_matrixdata(::std::string* matrixdata);

  // @@protoc_insertion_point(class_scope:EntityPacketMsg)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_steamid();
  inline void clear_has_steamid();
  inline void set_has_serverindex();
  inline void clear_has_serverindex();
  inline void set_has_playerhealth();
  inline void clear_has_playerhealth();
  inline void set_has_playerarmour();
  inline void clear_has_playerarmour();
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_matrixdata();
  inline void clear_has_matrixdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;
  ::google::protobuf::uint32 steamid_;
  ::google::protobuf::uint32 serverindex_;
  ::google::protobuf::uint32 playerhealth_;
  ::VectorMsg* origin_;
  ::std::string* matrixdata_;
  ::google::protobuf::uint32 playerarmour_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_CrossCheatTalkMessages_2eproto();
  friend void protobuf_AssignDesc_CrossCheatTalkMessages_2eproto();
  friend void protobuf_ShutdownFile_CrossCheatTalkMessages_2eproto();

  void InitAsDefaultInstance();
  static EntityPacketMsg* default_instance_;
};
// -------------------------------------------------------------------

class ExploitOnMsg : public ::google::protobuf::Message {
 public:
  ExploitOnMsg();
  virtual ~ExploitOnMsg();

  ExploitOnMsg(const ExploitOnMsg& from);

  inline ExploitOnMsg& operator=(const ExploitOnMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExploitOnMsg& default_instance();

  void Swap(ExploitOnMsg* other);

  // implements Message ----------------------------------------------

  ExploitOnMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExploitOnMsg& from);
  void MergeFrom(const ExploitOnMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool On = 1;
  inline bool has_on() const;
  inline void clear_on();
  static const int kOnFieldNumber = 1;
  inline bool on() const;
  inline void set_on(bool value);

  // optional uint32 Speed = 2;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 2;
  inline ::google::protobuf::uint32 speed() const;
  inline void set_speed(::google::protobuf::uint32 value);

  // optional uint32 TickStarted = 3;
  inline bool has_tickstarted() const;
  inline void clear_tickstarted();
  static const int kTickStartedFieldNumber = 3;
  inline ::google::protobuf::uint32 tickstarted() const;
  inline void set_tickstarted(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ExploitOnMsg)
 private:
  inline void set_has_on();
  inline void clear_has_on();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_tickstarted();
  inline void clear_has_tickstarted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool on_;
  ::google::protobuf::uint32 speed_;
  ::google::protobuf::uint32 tickstarted_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CrossCheatTalkMessages_2eproto();
  friend void protobuf_AssignDesc_CrossCheatTalkMessages_2eproto();
  friend void protobuf_ShutdownFile_CrossCheatTalkMessages_2eproto();

  void InitAsDefaultInstance();
  static ExploitOnMsg* default_instance_;
};
// -------------------------------------------------------------------

class SharedESPUpdate : public ::google::protobuf::Message {
 public:
  SharedESPUpdate();
  virtual ~SharedESPUpdate();

  SharedESPUpdate(const SharedESPUpdate& from);

  inline SharedESPUpdate& operator=(const SharedESPUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SharedESPUpdate& default_instance();

  void Swap(SharedESPUpdate* other);

  // implements Message ----------------------------------------------

  SharedESPUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SharedESPUpdate& from);
  void MergeFrom(const SharedESPUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .EntityPacketMsg EntInfo = 1;
  inline int entinfo_size() const;
  inline void clear_entinfo();
  static const int kEntInfoFieldNumber = 1;
  inline const ::EntityPacketMsg& entinfo(int index) const;
  inline ::EntityPacketMsg* mutable_entinfo(int index);
  inline ::EntityPacketMsg* add_entinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::EntityPacketMsg >&
      entinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::EntityPacketMsg >*
      mutable_entinfo();

  // @@protoc_insertion_point(class_scope:SharedESPUpdate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::EntityPacketMsg > entinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrossCheatTalkMessages_2eproto();
  friend void protobuf_AssignDesc_CrossCheatTalkMessages_2eproto();
  friend void protobuf_ShutdownFile_CrossCheatTalkMessages_2eproto();

  void InitAsDefaultInstance();
  static SharedESPUpdate* default_instance_;
};
// -------------------------------------------------------------------

class HitBoxMsg : public ::google::protobuf::Message {
 public:
  HitBoxMsg();
  virtual ~HitBoxMsg();

  HitBoxMsg(const HitBoxMsg& from);

  inline HitBoxMsg& operator=(const HitBoxMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HitBoxMsg& default_instance();

  void Swap(HitBoxMsg* other);

  // implements Message ----------------------------------------------

  HitBoxMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HitBoxMsg& from);
  void MergeFrom(const HitBoxMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .VectorMsg Mins = 1;
  inline bool has_mins() const;
  inline void clear_mins();
  static const int kMinsFieldNumber = 1;
  inline const ::VectorMsg& mins() const;
  inline ::VectorMsg* mutable_mins();
  inline ::VectorMsg* release_mins();
  inline void set_allocated_mins(::VectorMsg* mins);

  // required .VectorMsg Maxs = 2;
  inline bool has_maxs() const;
  inline void clear_maxs();
  static const int kMaxsFieldNumber = 2;
  inline const ::VectorMsg& maxs() const;
  inline ::VectorMsg* mutable_maxs();
  inline ::VectorMsg* release_maxs();
  inline void set_allocated_maxs(::VectorMsg* maxs);

  // required uint32 Bone = 3;
  inline bool has_bone() const;
  inline void clear_bone();
  static const int kBoneFieldNumber = 3;
  inline ::google::protobuf::uint32 bone() const;
  inline void set_bone(::google::protobuf::uint32 value);

  // required float Radius = 4;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 4;
  inline float radius() const;
  inline void set_radius(float value);

  // @@protoc_insertion_point(class_scope:HitBoxMsg)
 private:
  inline void set_has_mins();
  inline void clear_has_mins();
  inline void set_has_maxs();
  inline void clear_has_maxs();
  inline void set_has_bone();
  inline void clear_has_bone();
  inline void set_has_radius();
  inline void clear_has_radius();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::VectorMsg* mins_;
  ::VectorMsg* maxs_;
  ::google::protobuf::uint32 bone_;
  float radius_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CrossCheatTalkMessages_2eproto();
  friend void protobuf_AssignDesc_CrossCheatTalkMessages_2eproto();
  friend void protobuf_ShutdownFile_CrossCheatTalkMessages_2eproto();

  void InitAsDefaultInstance();
  static HitBoxMsg* default_instance_;
};
// -------------------------------------------------------------------

class OriginUpdate : public ::google::protobuf::Message {
 public:
  OriginUpdate();
  virtual ~OriginUpdate();

  OriginUpdate(const OriginUpdate& from);

  inline OriginUpdate& operator=(const OriginUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OriginUpdate& default_instance();

  void Swap(OriginUpdate* other);

  // implements Message ----------------------------------------------

  OriginUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OriginUpdate& from);
  void MergeFrom(const OriginUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 steamID = 1;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamIDFieldNumber = 1;
  inline ::google::protobuf::uint32 steamid() const;
  inline void set_steamid(::google::protobuf::uint32 value);

  // required float x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 4;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 4;
  inline float z() const;
  inline void set_z(float value);

  // required .VectorMsg EyeAngles = 5;
  inline bool has_eyeangles() const;
  inline void clear_eyeangles();
  static const int kEyeAnglesFieldNumber = 5;
  inline const ::VectorMsg& eyeangles() const;
  inline ::VectorMsg* mutable_eyeangles();
  inline ::VectorMsg* release_eyeangles();
  inline void set_allocated_eyeangles(::VectorMsg* eyeangles);

  // required .VectorMsg EyePosition = 6;
  inline bool has_eyeposition() const;
  inline void clear_eyeposition();
  static const int kEyePositionFieldNumber = 6;
  inline const ::VectorMsg& eyeposition() const;
  inline ::VectorMsg* mutable_eyeposition();
  inline ::VectorMsg* release_eyeposition();
  inline void set_allocated_eyeposition(::VectorMsg* eyeposition);

  // optional bytes Matrix = 7;
  inline bool has_matrix() const;
  inline void clear_matrix();
  static const int kMatrixFieldNumber = 7;
  inline const ::std::string& matrix() const;
  inline void set_matrix(const ::std::string& value);
  inline void set_matrix(const char* value);
  inline void set_matrix(const void* value, size_t size);
  inline ::std::string* mutable_matrix();
  inline ::std::string* release_matrix();
  inline void set_allocated_matrix(::std::string* matrix);

  // repeated .HitBoxMsg Hitboxes = 8;
  inline int hitboxes_size() const;
  inline void clear_hitboxes();
  static const int kHitboxesFieldNumber = 8;
  inline const ::HitBoxMsg& hitboxes(int index) const;
  inline ::HitBoxMsg* mutable_hitboxes(int index);
  inline ::HitBoxMsg* add_hitboxes();
  inline const ::google::protobuf::RepeatedPtrField< ::HitBoxMsg >&
      hitboxes() const;
  inline ::google::protobuf::RepeatedPtrField< ::HitBoxMsg >*
      mutable_hitboxes();

  // @@protoc_insertion_point(class_scope:OriginUpdate)
 private:
  inline void set_has_steamid();
  inline void clear_has_steamid();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_eyeangles();
  inline void clear_has_eyeangles();
  inline void set_has_eyeposition();
  inline void clear_has_eyeposition();
  inline void set_has_matrix();
  inline void clear_has_matrix();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 steamid_;
  float x_;
  float y_;
  float z_;
  ::VectorMsg* eyeangles_;
  ::VectorMsg* eyeposition_;
  ::std::string* matrix_;
  ::google::protobuf::RepeatedPtrField< ::HitBoxMsg > hitboxes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_CrossCheatTalkMessages_2eproto();
  friend void protobuf_AssignDesc_CrossCheatTalkMessages_2eproto();
  friend void protobuf_ShutdownFile_CrossCheatTalkMessages_2eproto();

  void InitAsDefaultInstance();
  static OriginUpdate* default_instance_;
};
// -------------------------------------------------------------------

class HarpoonChat : public ::google::protobuf::Message {
 public:
  HarpoonChat();
  virtual ~HarpoonChat();

  HarpoonChat(const HarpoonChat& from);

  inline HarpoonChat& operator=(const HarpoonChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HarpoonChat& default_instance();

  void Swap(HarpoonChat* other);

  // implements Message ----------------------------------------------

  HarpoonChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HarpoonChat& from);
  void MergeFrom(const HarpoonChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 steamID = 1;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamIDFieldNumber = 1;
  inline ::google::protobuf::uint32 steamid() const;
  inline void set_steamid(::google::protobuf::uint32 value);

  // required uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // required string Name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string Text = 4;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 4;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:HarpoonChat)
 private:
  inline void set_has_steamid();
  inline void clear_has_steamid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 steamid_;
  ::google::protobuf::uint32 index_;
  ::std::string* name_;
  ::std::string* text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CrossCheatTalkMessages_2eproto();
  friend void protobuf_AssignDesc_CrossCheatTalkMessages_2eproto();
  friend void protobuf_ShutdownFile_CrossCheatTalkMessages_2eproto();

  void InitAsDefaultInstance();
  static HarpoonChat* default_instance_;
};
// ===================================================================


// ===================================================================

// VectorMsg

// required float x = 1;
inline bool VectorMsg::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorMsg::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorMsg::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorMsg::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float VectorMsg::x() const {
  return x_;
}
inline void VectorMsg::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool VectorMsg::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorMsg::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorMsg::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorMsg::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float VectorMsg::y() const {
  return y_;
}
inline void VectorMsg::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool VectorMsg::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VectorMsg::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VectorMsg::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VectorMsg::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float VectorMsg::z() const {
  return z_;
}
inline void VectorMsg::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// CrossCheatInitMsg

// optional uint32 SteamID = 1;
inline bool CrossCheatInitMsg::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrossCheatInitMsg::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrossCheatInitMsg::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrossCheatInitMsg::clear_steamid() {
  steamid_ = 0u;
  clear_has_steamid();
}
inline ::google::protobuf::uint32 CrossCheatInitMsg::steamid() const {
  return steamid_;
}
inline void CrossCheatInitMsg::set_steamid(::google::protobuf::uint32 value) {
  set_has_steamid();
  steamid_ = value;
}

// optional uint32 SteamIndex = 2;
inline bool CrossCheatInitMsg::has_steamindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrossCheatInitMsg::set_has_steamindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrossCheatInitMsg::clear_has_steamindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrossCheatInitMsg::clear_steamindex() {
  steamindex_ = 0u;
  clear_has_steamindex();
}
inline ::google::protobuf::uint32 CrossCheatInitMsg::steamindex() const {
  return steamindex_;
}
inline void CrossCheatInitMsg::set_steamindex(::google::protobuf::uint32 value) {
  set_has_steamindex();
  steamindex_ = value;
}

// -------------------------------------------------------------------

// EntityPacketMsg

// required float x = 1;
inline bool EntityPacketMsg::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntityPacketMsg::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntityPacketMsg::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntityPacketMsg::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float EntityPacketMsg::x() const {
  return x_;
}
inline void EntityPacketMsg::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool EntityPacketMsg::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EntityPacketMsg::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EntityPacketMsg::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EntityPacketMsg::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float EntityPacketMsg::y() const {
  return y_;
}
inline void EntityPacketMsg::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool EntityPacketMsg::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EntityPacketMsg::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EntityPacketMsg::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EntityPacketMsg::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float EntityPacketMsg::z() const {
  return z_;
}
inline void EntityPacketMsg::set_z(float value) {
  set_has_z();
  z_ = value;
}

// optional uint32 SteamID = 4;
inline bool EntityPacketMsg::has_steamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EntityPacketMsg::set_has_steamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EntityPacketMsg::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EntityPacketMsg::clear_steamid() {
  steamid_ = 0u;
  clear_has_steamid();
}
inline ::google::protobuf::uint32 EntityPacketMsg::steamid() const {
  return steamid_;
}
inline void EntityPacketMsg::set_steamid(::google::protobuf::uint32 value) {
  set_has_steamid();
  steamid_ = value;
}

// optional uint32 ServerIndex = 5;
inline bool EntityPacketMsg::has_serverindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EntityPacketMsg::set_has_serverindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EntityPacketMsg::clear_has_serverindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EntityPacketMsg::clear_serverindex() {
  serverindex_ = 0u;
  clear_has_serverindex();
}
inline ::google::protobuf::uint32 EntityPacketMsg::serverindex() const {
  return serverindex_;
}
inline void EntityPacketMsg::set_serverindex(::google::protobuf::uint32 value) {
  set_has_serverindex();
  serverindex_ = value;
}

// optional uint32 PlayerHealth = 6;
inline bool EntityPacketMsg::has_playerhealth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EntityPacketMsg::set_has_playerhealth() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EntityPacketMsg::clear_has_playerhealth() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EntityPacketMsg::clear_playerhealth() {
  playerhealth_ = 0u;
  clear_has_playerhealth();
}
inline ::google::protobuf::uint32 EntityPacketMsg::playerhealth() const {
  return playerhealth_;
}
inline void EntityPacketMsg::set_playerhealth(::google::protobuf::uint32 value) {
  set_has_playerhealth();
  playerhealth_ = value;
}

// optional uint32 PlayerArmour = 7;
inline bool EntityPacketMsg::has_playerarmour() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EntityPacketMsg::set_has_playerarmour() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EntityPacketMsg::clear_has_playerarmour() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EntityPacketMsg::clear_playerarmour() {
  playerarmour_ = 0u;
  clear_has_playerarmour();
}
inline ::google::protobuf::uint32 EntityPacketMsg::playerarmour() const {
  return playerarmour_;
}
inline void EntityPacketMsg::set_playerarmour(::google::protobuf::uint32 value) {
  set_has_playerarmour();
  playerarmour_ = value;
}

// optional .VectorMsg Origin = 8;
inline bool EntityPacketMsg::has_origin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EntityPacketMsg::set_has_origin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EntityPacketMsg::clear_has_origin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EntityPacketMsg::clear_origin() {
  if (origin_ != NULL) origin_->::VectorMsg::Clear();
  clear_has_origin();
}
inline const ::VectorMsg& EntityPacketMsg::origin() const {
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::VectorMsg* EntityPacketMsg::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) origin_ = new ::VectorMsg;
  return origin_;
}
inline ::VectorMsg* EntityPacketMsg::release_origin() {
  clear_has_origin();
  ::VectorMsg* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void EntityPacketMsg::set_allocated_origin(::VectorMsg* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
}

// optional string MatrixData = 9;
inline bool EntityPacketMsg::has_matrixdata() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EntityPacketMsg::set_has_matrixdata() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EntityPacketMsg::clear_has_matrixdata() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EntityPacketMsg::clear_matrixdata() {
  if (matrixdata_ != &::google::protobuf::internal::kEmptyString) {
    matrixdata_->clear();
  }
  clear_has_matrixdata();
}
inline const ::std::string& EntityPacketMsg::matrixdata() const {
  return *matrixdata_;
}
inline void EntityPacketMsg::set_matrixdata(const ::std::string& value) {
  set_has_matrixdata();
  if (matrixdata_ == &::google::protobuf::internal::kEmptyString) {
    matrixdata_ = new ::std::string;
  }
  matrixdata_->assign(value);
}
inline void EntityPacketMsg::set_matrixdata(const char* value) {
  set_has_matrixdata();
  if (matrixdata_ == &::google::protobuf::internal::kEmptyString) {
    matrixdata_ = new ::std::string;
  }
  matrixdata_->assign(value);
}
inline void EntityPacketMsg::set_matrixdata(const char* value, size_t size) {
  set_has_matrixdata();
  if (matrixdata_ == &::google::protobuf::internal::kEmptyString) {
    matrixdata_ = new ::std::string;
  }
  matrixdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EntityPacketMsg::mutable_matrixdata() {
  set_has_matrixdata();
  if (matrixdata_ == &::google::protobuf::internal::kEmptyString) {
    matrixdata_ = new ::std::string;
  }
  return matrixdata_;
}
inline ::std::string* EntityPacketMsg::release_matrixdata() {
  clear_has_matrixdata();
  if (matrixdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = matrixdata_;
    matrixdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EntityPacketMsg::set_allocated_matrixdata(::std::string* matrixdata) {
  if (matrixdata_ != &::google::protobuf::internal::kEmptyString) {
    delete matrixdata_;
  }
  if (matrixdata) {
    set_has_matrixdata();
    matrixdata_ = matrixdata;
  } else {
    clear_has_matrixdata();
    matrixdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ExploitOnMsg

// optional bool On = 1;
inline bool ExploitOnMsg::has_on() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExploitOnMsg::set_has_on() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExploitOnMsg::clear_has_on() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExploitOnMsg::clear_on() {
  on_ = false;
  clear_has_on();
}
inline bool ExploitOnMsg::on() const {
  return on_;
}
inline void ExploitOnMsg::set_on(bool value) {
  set_has_on();
  on_ = value;
}

// optional uint32 Speed = 2;
inline bool ExploitOnMsg::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExploitOnMsg::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExploitOnMsg::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExploitOnMsg::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 ExploitOnMsg::speed() const {
  return speed_;
}
inline void ExploitOnMsg::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
}

// optional uint32 TickStarted = 3;
inline bool ExploitOnMsg::has_tickstarted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExploitOnMsg::set_has_tickstarted() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExploitOnMsg::clear_has_tickstarted() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExploitOnMsg::clear_tickstarted() {
  tickstarted_ = 0u;
  clear_has_tickstarted();
}
inline ::google::protobuf::uint32 ExploitOnMsg::tickstarted() const {
  return tickstarted_;
}
inline void ExploitOnMsg::set_tickstarted(::google::protobuf::uint32 value) {
  set_has_tickstarted();
  tickstarted_ = value;
}

// -------------------------------------------------------------------

// SharedESPUpdate

// repeated .EntityPacketMsg EntInfo = 1;
inline int SharedESPUpdate::entinfo_size() const {
  return entinfo_.size();
}
inline void SharedESPUpdate::clear_entinfo() {
  entinfo_.Clear();
}
inline const ::EntityPacketMsg& SharedESPUpdate::entinfo(int index) const {
  return entinfo_.Get(index);
}
inline ::EntityPacketMsg* SharedESPUpdate::mutable_entinfo(int index) {
  return entinfo_.Mutable(index);
}
inline ::EntityPacketMsg* SharedESPUpdate::add_entinfo() {
  return entinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EntityPacketMsg >&
SharedESPUpdate::entinfo() const {
  return entinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::EntityPacketMsg >*
SharedESPUpdate::mutable_entinfo() {
  return &entinfo_;
}

// -------------------------------------------------------------------

// HitBoxMsg

// required .VectorMsg Mins = 1;
inline bool HitBoxMsg::has_mins() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HitBoxMsg::set_has_mins() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HitBoxMsg::clear_has_mins() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HitBoxMsg::clear_mins() {
  if (mins_ != NULL) mins_->::VectorMsg::Clear();
  clear_has_mins();
}
inline const ::VectorMsg& HitBoxMsg::mins() const {
  return mins_ != NULL ? *mins_ : *default_instance_->mins_;
}
inline ::VectorMsg* HitBoxMsg::mutable_mins() {
  set_has_mins();
  if (mins_ == NULL) mins_ = new ::VectorMsg;
  return mins_;
}
inline ::VectorMsg* HitBoxMsg::release_mins() {
  clear_has_mins();
  ::VectorMsg* temp = mins_;
  mins_ = NULL;
  return temp;
}
inline void HitBoxMsg::set_allocated_mins(::VectorMsg* mins) {
  delete mins_;
  mins_ = mins;
  if (mins) {
    set_has_mins();
  } else {
    clear_has_mins();
  }
}

// required .VectorMsg Maxs = 2;
inline bool HitBoxMsg::has_maxs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HitBoxMsg::set_has_maxs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HitBoxMsg::clear_has_maxs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HitBoxMsg::clear_maxs() {
  if (maxs_ != NULL) maxs_->::VectorMsg::Clear();
  clear_has_maxs();
}
inline const ::VectorMsg& HitBoxMsg::maxs() const {
  return maxs_ != NULL ? *maxs_ : *default_instance_->maxs_;
}
inline ::VectorMsg* HitBoxMsg::mutable_maxs() {
  set_has_maxs();
  if (maxs_ == NULL) maxs_ = new ::VectorMsg;
  return maxs_;
}
inline ::VectorMsg* HitBoxMsg::release_maxs() {
  clear_has_maxs();
  ::VectorMsg* temp = maxs_;
  maxs_ = NULL;
  return temp;
}
inline void HitBoxMsg::set_allocated_maxs(::VectorMsg* maxs) {
  delete maxs_;
  maxs_ = maxs;
  if (maxs) {
    set_has_maxs();
  } else {
    clear_has_maxs();
  }
}

// required uint32 Bone = 3;
inline bool HitBoxMsg::has_bone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HitBoxMsg::set_has_bone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HitBoxMsg::clear_has_bone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HitBoxMsg::clear_bone() {
  bone_ = 0u;
  clear_has_bone();
}
inline ::google::protobuf::uint32 HitBoxMsg::bone() const {
  return bone_;
}
inline void HitBoxMsg::set_bone(::google::protobuf::uint32 value) {
  set_has_bone();
  bone_ = value;
}

// required float Radius = 4;
inline bool HitBoxMsg::has_radius() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HitBoxMsg::set_has_radius() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HitBoxMsg::clear_has_radius() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HitBoxMsg::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline float HitBoxMsg::radius() const {
  return radius_;
}
inline void HitBoxMsg::set_radius(float value) {
  set_has_radius();
  radius_ = value;
}

// -------------------------------------------------------------------

// OriginUpdate

// required uint32 steamID = 1;
inline bool OriginUpdate::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OriginUpdate::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OriginUpdate::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OriginUpdate::clear_steamid() {
  steamid_ = 0u;
  clear_has_steamid();
}
inline ::google::protobuf::uint32 OriginUpdate::steamid() const {
  return steamid_;
}
inline void OriginUpdate::set_steamid(::google::protobuf::uint32 value) {
  set_has_steamid();
  steamid_ = value;
}

// required float x = 2;
inline bool OriginUpdate::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OriginUpdate::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OriginUpdate::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OriginUpdate::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float OriginUpdate::x() const {
  return x_;
}
inline void OriginUpdate::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 3;
inline bool OriginUpdate::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OriginUpdate::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OriginUpdate::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OriginUpdate::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float OriginUpdate::y() const {
  return y_;
}
inline void OriginUpdate::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 4;
inline bool OriginUpdate::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OriginUpdate::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OriginUpdate::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OriginUpdate::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float OriginUpdate::z() const {
  return z_;
}
inline void OriginUpdate::set_z(float value) {
  set_has_z();
  z_ = value;
}

// required .VectorMsg EyeAngles = 5;
inline bool OriginUpdate::has_eyeangles() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OriginUpdate::set_has_eyeangles() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OriginUpdate::clear_has_eyeangles() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OriginUpdate::clear_eyeangles() {
  if (eyeangles_ != NULL) eyeangles_->::VectorMsg::Clear();
  clear_has_eyeangles();
}
inline const ::VectorMsg& OriginUpdate::eyeangles() const {
  return eyeangles_ != NULL ? *eyeangles_ : *default_instance_->eyeangles_;
}
inline ::VectorMsg* OriginUpdate::mutable_eyeangles() {
  set_has_eyeangles();
  if (eyeangles_ == NULL) eyeangles_ = new ::VectorMsg;
  return eyeangles_;
}
inline ::VectorMsg* OriginUpdate::release_eyeangles() {
  clear_has_eyeangles();
  ::VectorMsg* temp = eyeangles_;
  eyeangles_ = NULL;
  return temp;
}
inline void OriginUpdate::set_allocated_eyeangles(::VectorMsg* eyeangles) {
  delete eyeangles_;
  eyeangles_ = eyeangles;
  if (eyeangles) {
    set_has_eyeangles();
  } else {
    clear_has_eyeangles();
  }
}

// required .VectorMsg EyePosition = 6;
inline bool OriginUpdate::has_eyeposition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OriginUpdate::set_has_eyeposition() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OriginUpdate::clear_has_eyeposition() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OriginUpdate::clear_eyeposition() {
  if (eyeposition_ != NULL) eyeposition_->::VectorMsg::Clear();
  clear_has_eyeposition();
}
inline const ::VectorMsg& OriginUpdate::eyeposition() const {
  return eyeposition_ != NULL ? *eyeposition_ : *default_instance_->eyeposition_;
}
inline ::VectorMsg* OriginUpdate::mutable_eyeposition() {
  set_has_eyeposition();
  if (eyeposition_ == NULL) eyeposition_ = new ::VectorMsg;
  return eyeposition_;
}
inline ::VectorMsg* OriginUpdate::release_eyeposition() {
  clear_has_eyeposition();
  ::VectorMsg* temp = eyeposition_;
  eyeposition_ = NULL;
  return temp;
}
inline void OriginUpdate::set_allocated_eyeposition(::VectorMsg* eyeposition) {
  delete eyeposition_;
  eyeposition_ = eyeposition;
  if (eyeposition) {
    set_has_eyeposition();
  } else {
    clear_has_eyeposition();
  }
}

// optional bytes Matrix = 7;
inline bool OriginUpdate::has_matrix() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OriginUpdate::set_has_matrix() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OriginUpdate::clear_has_matrix() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OriginUpdate::clear_matrix() {
  if (matrix_ != &::google::protobuf::internal::kEmptyString) {
    matrix_->clear();
  }
  clear_has_matrix();
}
inline const ::std::string& OriginUpdate::matrix() const {
  return *matrix_;
}
inline void OriginUpdate::set_matrix(const ::std::string& value) {
  set_has_matrix();
  if (matrix_ == &::google::protobuf::internal::kEmptyString) {
    matrix_ = new ::std::string;
  }
  matrix_->assign(value);
}
inline void OriginUpdate::set_matrix(const char* value) {
  set_has_matrix();
  if (matrix_ == &::google::protobuf::internal::kEmptyString) {
    matrix_ = new ::std::string;
  }
  matrix_->assign(value);
}
inline void OriginUpdate::set_matrix(const void* value, size_t size) {
  set_has_matrix();
  if (matrix_ == &::google::protobuf::internal::kEmptyString) {
    matrix_ = new ::std::string;
  }
  matrix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OriginUpdate::mutable_matrix() {
  set_has_matrix();
  if (matrix_ == &::google::protobuf::internal::kEmptyString) {
    matrix_ = new ::std::string;
  }
  return matrix_;
}
inline ::std::string* OriginUpdate::release_matrix() {
  clear_has_matrix();
  if (matrix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = matrix_;
    matrix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OriginUpdate::set_allocated_matrix(::std::string* matrix) {
  if (matrix_ != &::google::protobuf::internal::kEmptyString) {
    delete matrix_;
  }
  if (matrix) {
    set_has_matrix();
    matrix_ = matrix;
  } else {
    clear_has_matrix();
    matrix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .HitBoxMsg Hitboxes = 8;
inline int OriginUpdate::hitboxes_size() const {
  return hitboxes_.size();
}
inline void OriginUpdate::clear_hitboxes() {
  hitboxes_.Clear();
}
inline const ::HitBoxMsg& OriginUpdate::hitboxes(int index) const {
  return hitboxes_.Get(index);
}
inline ::HitBoxMsg* OriginUpdate::mutable_hitboxes(int index) {
  return hitboxes_.Mutable(index);
}
inline ::HitBoxMsg* OriginUpdate::add_hitboxes() {
  return hitboxes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HitBoxMsg >&
OriginUpdate::hitboxes() const {
  return hitboxes_;
}
inline ::google::protobuf::RepeatedPtrField< ::HitBoxMsg >*
OriginUpdate::mutable_hitboxes() {
  return &hitboxes_;
}

// -------------------------------------------------------------------

// HarpoonChat

// required uint32 steamID = 1;
inline bool HarpoonChat::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HarpoonChat::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HarpoonChat::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HarpoonChat::clear_steamid() {
  steamid_ = 0u;
  clear_has_steamid();
}
inline ::google::protobuf::uint32 HarpoonChat::steamid() const {
  return steamid_;
}
inline void HarpoonChat::set_steamid(::google::protobuf::uint32 value) {
  set_has_steamid();
  steamid_ = value;
}

// required uint32 index = 2;
inline bool HarpoonChat::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HarpoonChat::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HarpoonChat::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HarpoonChat::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 HarpoonChat::index() const {
  return index_;
}
inline void HarpoonChat::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// required string Name = 3;
inline bool HarpoonChat::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HarpoonChat::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HarpoonChat::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HarpoonChat::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& HarpoonChat::name() const {
  return *name_;
}
inline void HarpoonChat::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HarpoonChat::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HarpoonChat::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HarpoonChat::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* HarpoonChat::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HarpoonChat::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Text = 4;
inline bool HarpoonChat::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HarpoonChat::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HarpoonChat::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HarpoonChat::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& HarpoonChat::text() const {
  return *text_;
}
inline void HarpoonChat::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void HarpoonChat::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void HarpoonChat::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HarpoonChat::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* HarpoonChat::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HarpoonChat::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CrossCheatMsgType>() {
  return ::CrossCheatMsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CrossCheatTalkMessages_2eproto__INCLUDED
