// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages_certs.proto
#pragma once
#ifndef PROTOBUF_steamnetworkingsockets_5fmessages_5fcerts_2eproto__INCLUDED
#define PROTOBUF_steamnetworkingsockets_5fmessages_5fcerts_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fcerts_2eproto();

class CMsgSteamNetworkingIdentityLegacyBinary;
class CMsgSteamDatagramCertificate;
class CMsgSteamDatagramCertificateSigned;
class CMsgSteamDatagramCertificateRequest;

enum CMsgSteamDatagramCertificate_EKeyType {
  CMsgSteamDatagramCertificate_EKeyType_INVALID = 0,
  CMsgSteamDatagramCertificate_EKeyType_ED25519 = 1
};
bool CMsgSteamDatagramCertificate_EKeyType_IsValid(int value);
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate_EKeyType_EKeyType_MIN = CMsgSteamDatagramCertificate_EKeyType_INVALID;
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate_EKeyType_EKeyType_MAX = CMsgSteamDatagramCertificate_EKeyType_ED25519;
const int CMsgSteamDatagramCertificate_EKeyType_EKeyType_ARRAYSIZE = CMsgSteamDatagramCertificate_EKeyType_EKeyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramCertificate_EKeyType_descriptor();
inline const ::std::string& CMsgSteamDatagramCertificate_EKeyType_Name(CMsgSteamDatagramCertificate_EKeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramCertificate_EKeyType_descriptor(), value);
}
inline bool CMsgSteamDatagramCertificate_EKeyType_Parse(
    const ::std::string& name, CMsgSteamDatagramCertificate_EKeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramCertificate_EKeyType>(
    CMsgSteamDatagramCertificate_EKeyType_descriptor(), name, value);
}
// ===================================================================

class CMsgSteamNetworkingIdentityLegacyBinary : public ::google::protobuf::Message {
 public:
  CMsgSteamNetworkingIdentityLegacyBinary();
  virtual ~CMsgSteamNetworkingIdentityLegacyBinary();

  CMsgSteamNetworkingIdentityLegacyBinary(const CMsgSteamNetworkingIdentityLegacyBinary& from);

  inline CMsgSteamNetworkingIdentityLegacyBinary& operator=(const CMsgSteamNetworkingIdentityLegacyBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamNetworkingIdentityLegacyBinary& default_instance();

  void Swap(CMsgSteamNetworkingIdentityLegacyBinary* other);

  // implements Message ----------------------------------------------

  CMsgSteamNetworkingIdentityLegacyBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamNetworkingIdentityLegacyBinary& from);
  void MergeFrom(const CMsgSteamNetworkingIdentityLegacyBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 16;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 16;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);

  // optional string xbox_pairwise_id = 17;
  inline bool has_xbox_pairwise_id() const;
  inline void clear_xbox_pairwise_id();
  static const int kXboxPairwiseIdFieldNumber = 17;
  inline const ::std::string& xbox_pairwise_id() const;
  inline void set_xbox_pairwise_id(const ::std::string& value);
  inline void set_xbox_pairwise_id(const char* value);
  inline void set_xbox_pairwise_id(const char* value, size_t size);
  inline ::std::string* mutable_xbox_pairwise_id();
  inline ::std::string* release_xbox_pairwise_id();
  inline void set_allocated_xbox_pairwise_id(::std::string* xbox_pairwise_id);

  // optional bytes generic_bytes = 2;
  inline bool has_generic_bytes() const;
  inline void clear_generic_bytes();
  static const int kGenericBytesFieldNumber = 2;
  inline const ::std::string& generic_bytes() const;
  inline void set_generic_bytes(const ::std::string& value);
  inline void set_generic_bytes(const char* value);
  inline void set_generic_bytes(const void* value, size_t size);
  inline ::std::string* mutable_generic_bytes();
  inline ::std::string* release_generic_bytes();
  inline void set_allocated_generic_bytes(::std::string* generic_bytes);

  // optional string generic_string = 3;
  inline bool has_generic_string() const;
  inline void clear_generic_string();
  static const int kGenericStringFieldNumber = 3;
  inline const ::std::string& generic_string() const;
  inline void set_generic_string(const ::std::string& value);
  inline void set_generic_string(const char* value);
  inline void set_generic_string(const char* value, size_t size);
  inline ::std::string* mutable_generic_string();
  inline ::std::string* release_generic_string();
  inline void set_allocated_generic_string(::std::string* generic_string);

  // optional bytes ipv6_and_port = 4;
  inline bool has_ipv6_and_port() const;
  inline void clear_ipv6_and_port();
  static const int kIpv6AndPortFieldNumber = 4;
  inline const ::std::string& ipv6_and_port() const;
  inline void set_ipv6_and_port(const ::std::string& value);
  inline void set_ipv6_and_port(const char* value);
  inline void set_ipv6_and_port(const void* value, size_t size);
  inline ::std::string* mutable_ipv6_and_port();
  inline ::std::string* release_ipv6_and_port();
  inline void set_allocated_ipv6_and_port(::std::string* ipv6_and_port);

  // @@protoc_insertion_point(class_scope:CMsgSteamNetworkingIdentityLegacyBinary)
 private:
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_xbox_pairwise_id();
  inline void clear_has_xbox_pairwise_id();
  inline void set_has_generic_bytes();
  inline void clear_has_generic_bytes();
  inline void set_has_generic_string();
  inline void clear_has_generic_string();
  inline void set_has_ipv6_and_port();
  inline void clear_has_ipv6_and_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steam_id_;
  ::std::string* xbox_pairwise_id_;
  ::std::string* generic_bytes_;
  ::std::string* generic_string_;
  ::std::string* ipv6_and_port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fcerts_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamNetworkingIdentityLegacyBinary* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramCertificate : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramCertificate();
  virtual ~CMsgSteamDatagramCertificate();

  CMsgSteamDatagramCertificate(const CMsgSteamDatagramCertificate& from);

  inline CMsgSteamDatagramCertificate& operator=(const CMsgSteamDatagramCertificate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramCertificate& default_instance();

  void Swap(CMsgSteamDatagramCertificate* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramCertificate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramCertificate& from);
  void MergeFrom(const CMsgSteamDatagramCertificate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramCertificate_EKeyType EKeyType;
  static const EKeyType INVALID = CMsgSteamDatagramCertificate_EKeyType_INVALID;
  static const EKeyType ED25519 = CMsgSteamDatagramCertificate_EKeyType_ED25519;
  static inline bool EKeyType_IsValid(int value) {
    return CMsgSteamDatagramCertificate_EKeyType_IsValid(value);
  }
  static const EKeyType EKeyType_MIN =
    CMsgSteamDatagramCertificate_EKeyType_EKeyType_MIN;
  static const EKeyType EKeyType_MAX =
    CMsgSteamDatagramCertificate_EKeyType_EKeyType_MAX;
  static const int EKeyType_ARRAYSIZE =
    CMsgSteamDatagramCertificate_EKeyType_EKeyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EKeyType_descriptor() {
    return CMsgSteamDatagramCertificate_EKeyType_descriptor();
  }
  static inline const ::std::string& EKeyType_Name(EKeyType value) {
    return CMsgSteamDatagramCertificate_EKeyType_Name(value);
  }
  static inline bool EKeyType_Parse(const ::std::string& name,
      EKeyType* value) {
    return CMsgSteamDatagramCertificate_EKeyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
  inline bool has_key_type() const;
  inline void clear_key_type();
  static const int kKeyTypeFieldNumber = 1;
  inline ::CMsgSteamDatagramCertificate_EKeyType key_type() const;
  inline void set_key_type(::CMsgSteamDatagramCertificate_EKeyType value);

  // optional bytes key_data = 2;
  inline bool has_key_data() const;
  inline void clear_key_data();
  static const int kKeyDataFieldNumber = 2;
  inline const ::std::string& key_data() const;
  inline void set_key_data(const ::std::string& value);
  inline void set_key_data(const char* value);
  inline void set_key_data(const void* value, size_t size);
  inline ::std::string* mutable_key_data();
  inline ::std::string* release_key_data();
  inline void set_allocated_key_data(::std::string* key_data);

  // optional fixed64 legacy_steam_id = 4;
  inline bool has_legacy_steam_id() const;
  inline void clear_legacy_steam_id();
  static const int kLegacySteamIdFieldNumber = 4;
  inline ::google::protobuf::uint64 legacy_steam_id() const;
  inline void set_legacy_steam_id(::google::protobuf::uint64 value);

  // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
  inline bool has_legacy_identity_binary() const;
  inline void clear_legacy_identity_binary();
  static const int kLegacyIdentityBinaryFieldNumber = 11;
  inline const ::CMsgSteamNetworkingIdentityLegacyBinary& legacy_identity_binary() const;
  inline ::CMsgSteamNetworkingIdentityLegacyBinary* mutable_legacy_identity_binary();
  inline ::CMsgSteamNetworkingIdentityLegacyBinary* release_legacy_identity_binary();
  inline void set_allocated_legacy_identity_binary(::CMsgSteamNetworkingIdentityLegacyBinary* legacy_identity_binary);

  // optional string identity_string = 12;
  inline bool has_identity_string() const;
  inline void clear_identity_string();
  static const int kIdentityStringFieldNumber = 12;
  inline const ::std::string& identity_string() const;
  inline void set_identity_string(const ::std::string& value);
  inline void set_identity_string(const char* value);
  inline void set_identity_string(const char* value, size_t size);
  inline ::std::string* mutable_identity_string();
  inline ::std::string* release_identity_string();
  inline void set_allocated_identity_string(::std::string* identity_string);

  // repeated fixed32 gameserver_datacenter_ids = 5;
  inline int gameserver_datacenter_ids_size() const;
  inline void clear_gameserver_datacenter_ids();
  static const int kGameserverDatacenterIdsFieldNumber = 5;
  inline ::google::protobuf::uint32 gameserver_datacenter_ids(int index) const;
  inline void set_gameserver_datacenter_ids(int index, ::google::protobuf::uint32 value);
  inline void add_gameserver_datacenter_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      gameserver_datacenter_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_gameserver_datacenter_ids();

  // optional fixed32 time_created = 8;
  inline bool has_time_created() const;
  inline void clear_time_created();
  static const int kTimeCreatedFieldNumber = 8;
  inline ::google::protobuf::uint32 time_created() const;
  inline void set_time_created(::google::protobuf::uint32 value);

  // optional fixed32 time_expiry = 9;
  inline bool has_time_expiry() const;
  inline void clear_time_expiry();
  static const int kTimeExpiryFieldNumber = 9;
  inline ::google::protobuf::uint32 time_expiry() const;
  inline void set_time_expiry(::google::protobuf::uint32 value);

  // repeated uint32 app_ids = 10;
  inline int app_ids_size() const;
  inline void clear_app_ids();
  static const int kAppIdsFieldNumber = 10;
  inline ::google::protobuf::uint32 app_ids(int index) const;
  inline void set_app_ids(int index, ::google::protobuf::uint32 value);
  inline void add_app_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      app_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_app_ids();

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramCertificate)
 private:
  inline void set_has_key_type();
  inline void clear_has_key_type();
  inline void set_has_key_data();
  inline void clear_has_key_data();
  inline void set_has_legacy_steam_id();
  inline void clear_has_legacy_steam_id();
  inline void set_has_legacy_identity_binary();
  inline void clear_has_legacy_identity_binary();
  inline void set_has_identity_string();
  inline void clear_has_identity_string();
  inline void set_has_time_created();
  inline void clear_has_time_created();
  inline void set_has_time_expiry();
  inline void clear_has_time_expiry();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_data_;
  ::google::protobuf::uint64 legacy_steam_id_;
  ::CMsgSteamNetworkingIdentityLegacyBinary* legacy_identity_binary_;
  int key_type_;
  ::google::protobuf::uint32 time_created_;
  ::std::string* identity_string_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > gameserver_datacenter_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > app_ids_;
  ::google::protobuf::uint32 time_expiry_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fcerts_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramCertificate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramCertificateSigned : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramCertificateSigned();
  virtual ~CMsgSteamDatagramCertificateSigned();

  CMsgSteamDatagramCertificateSigned(const CMsgSteamDatagramCertificateSigned& from);

  inline CMsgSteamDatagramCertificateSigned& operator=(const CMsgSteamDatagramCertificateSigned& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramCertificateSigned& default_instance();

  void Swap(CMsgSteamDatagramCertificateSigned* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramCertificateSigned* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramCertificateSigned& from);
  void MergeFrom(const CMsgSteamDatagramCertificateSigned& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes cert = 4;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 4;
  inline const ::std::string& cert() const;
  inline void set_cert(const ::std::string& value);
  inline void set_cert(const char* value);
  inline void set_cert(const void* value, size_t size);
  inline ::std::string* mutable_cert();
  inline ::std::string* release_cert();
  inline void set_allocated_cert(::std::string* cert);

  // optional fixed64 ca_key_id = 5;
  inline bool has_ca_key_id() const;
  inline void clear_ca_key_id();
  static const int kCaKeyIdFieldNumber = 5;
  inline ::google::protobuf::uint64 ca_key_id() const;
  inline void set_ca_key_id(::google::protobuf::uint64 value);

  // optional bytes ca_signature = 6;
  inline bool has_ca_signature() const;
  inline void clear_ca_signature();
  static const int kCaSignatureFieldNumber = 6;
  inline const ::std::string& ca_signature() const;
  inline void set_ca_signature(const ::std::string& value);
  inline void set_ca_signature(const char* value);
  inline void set_ca_signature(const void* value, size_t size);
  inline ::std::string* mutable_ca_signature();
  inline ::std::string* release_ca_signature();
  inline void set_allocated_ca_signature(::std::string* ca_signature);

  // optional bytes private_key_data = 1;
  inline bool has_private_key_data() const;
  inline void clear_private_key_data();
  static const int kPrivateKeyDataFieldNumber = 1;
  inline const ::std::string& private_key_data() const;
  inline void set_private_key_data(const ::std::string& value);
  inline void set_private_key_data(const char* value);
  inline void set_private_key_data(const void* value, size_t size);
  inline ::std::string* mutable_private_key_data();
  inline ::std::string* release_private_key_data();
  inline void set_allocated_private_key_data(::std::string* private_key_data);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramCertificateSigned)
 private:
  inline void set_has_cert();
  inline void clear_has_cert();
  inline void set_has_ca_key_id();
  inline void clear_has_ca_key_id();
  inline void set_has_ca_signature();
  inline void clear_has_ca_signature();
  inline void set_has_private_key_data();
  inline void clear_has_private_key_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cert_;
  ::google::protobuf::uint64 ca_key_id_;
  ::std::string* ca_signature_;
  ::std::string* private_key_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fcerts_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramCertificateSigned* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramCertificateRequest : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramCertificateRequest();
  virtual ~CMsgSteamDatagramCertificateRequest();

  CMsgSteamDatagramCertificateRequest(const CMsgSteamDatagramCertificateRequest& from);

  inline CMsgSteamDatagramCertificateRequest& operator=(const CMsgSteamDatagramCertificateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramCertificateRequest& default_instance();

  void Swap(CMsgSteamDatagramCertificateRequest* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramCertificateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramCertificateRequest& from);
  void MergeFrom(const CMsgSteamDatagramCertificateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramCertificate cert = 1;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 1;
  inline const ::CMsgSteamDatagramCertificate& cert() const;
  inline ::CMsgSteamDatagramCertificate* mutable_cert();
  inline ::CMsgSteamDatagramCertificate* release_cert();
  inline void set_allocated_cert(::CMsgSteamDatagramCertificate* cert);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramCertificateRequest)
 private:
  inline void set_has_cert();
  inline void clear_has_cert();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgSteamDatagramCertificate* cert_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fcerts_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramCertificateRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// CMsgSteamNetworkingIdentityLegacyBinary

// optional fixed64 steam_id = 16;
inline bool CMsgSteamNetworkingIdentityLegacyBinary::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgSteamNetworkingIdentityLegacyBinary::steam_id() const {
  return steam_id_;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
}

// optional string xbox_pairwise_id = 17;
inline bool CMsgSteamNetworkingIdentityLegacyBinary::has_xbox_pairwise_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_has_xbox_pairwise_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::clear_has_xbox_pairwise_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::clear_xbox_pairwise_id() {
  if (xbox_pairwise_id_ != &::google::protobuf::internal::kEmptyString) {
    xbox_pairwise_id_->clear();
  }
  clear_has_xbox_pairwise_id();
}
inline const ::std::string& CMsgSteamNetworkingIdentityLegacyBinary::xbox_pairwise_id() const {
  return *xbox_pairwise_id_;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_xbox_pairwise_id(const ::std::string& value) {
  set_has_xbox_pairwise_id();
  if (xbox_pairwise_id_ == &::google::protobuf::internal::kEmptyString) {
    xbox_pairwise_id_ = new ::std::string;
  }
  xbox_pairwise_id_->assign(value);
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_xbox_pairwise_id(const char* value) {
  set_has_xbox_pairwise_id();
  if (xbox_pairwise_id_ == &::google::protobuf::internal::kEmptyString) {
    xbox_pairwise_id_ = new ::std::string;
  }
  xbox_pairwise_id_->assign(value);
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_xbox_pairwise_id(const char* value, size_t size) {
  set_has_xbox_pairwise_id();
  if (xbox_pairwise_id_ == &::google::protobuf::internal::kEmptyString) {
    xbox_pairwise_id_ = new ::std::string;
  }
  xbox_pairwise_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamNetworkingIdentityLegacyBinary::mutable_xbox_pairwise_id() {
  set_has_xbox_pairwise_id();
  if (xbox_pairwise_id_ == &::google::protobuf::internal::kEmptyString) {
    xbox_pairwise_id_ = new ::std::string;
  }
  return xbox_pairwise_id_;
}
inline ::std::string* CMsgSteamNetworkingIdentityLegacyBinary::release_xbox_pairwise_id() {
  clear_has_xbox_pairwise_id();
  if (xbox_pairwise_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xbox_pairwise_id_;
    xbox_pairwise_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_allocated_xbox_pairwise_id(::std::string* xbox_pairwise_id) {
  if (xbox_pairwise_id_ != &::google::protobuf::internal::kEmptyString) {
    delete xbox_pairwise_id_;
  }
  if (xbox_pairwise_id) {
    set_has_xbox_pairwise_id();
    xbox_pairwise_id_ = xbox_pairwise_id;
  } else {
    clear_has_xbox_pairwise_id();
    xbox_pairwise_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes generic_bytes = 2;
inline bool CMsgSteamNetworkingIdentityLegacyBinary::has_generic_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_has_generic_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::clear_has_generic_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::clear_generic_bytes() {
  if (generic_bytes_ != &::google::protobuf::internal::kEmptyString) {
    generic_bytes_->clear();
  }
  clear_has_generic_bytes();
}
inline const ::std::string& CMsgSteamNetworkingIdentityLegacyBinary::generic_bytes() const {
  return *generic_bytes_;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_generic_bytes(const ::std::string& value) {
  set_has_generic_bytes();
  if (generic_bytes_ == &::google::protobuf::internal::kEmptyString) {
    generic_bytes_ = new ::std::string;
  }
  generic_bytes_->assign(value);
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_generic_bytes(const char* value) {
  set_has_generic_bytes();
  if (generic_bytes_ == &::google::protobuf::internal::kEmptyString) {
    generic_bytes_ = new ::std::string;
  }
  generic_bytes_->assign(value);
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_generic_bytes(const void* value, size_t size) {
  set_has_generic_bytes();
  if (generic_bytes_ == &::google::protobuf::internal::kEmptyString) {
    generic_bytes_ = new ::std::string;
  }
  generic_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamNetworkingIdentityLegacyBinary::mutable_generic_bytes() {
  set_has_generic_bytes();
  if (generic_bytes_ == &::google::protobuf::internal::kEmptyString) {
    generic_bytes_ = new ::std::string;
  }
  return generic_bytes_;
}
inline ::std::string* CMsgSteamNetworkingIdentityLegacyBinary::release_generic_bytes() {
  clear_has_generic_bytes();
  if (generic_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = generic_bytes_;
    generic_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_allocated_generic_bytes(::std::string* generic_bytes) {
  if (generic_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete generic_bytes_;
  }
  if (generic_bytes) {
    set_has_generic_bytes();
    generic_bytes_ = generic_bytes;
  } else {
    clear_has_generic_bytes();
    generic_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string generic_string = 3;
inline bool CMsgSteamNetworkingIdentityLegacyBinary::has_generic_string() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_has_generic_string() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::clear_has_generic_string() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::clear_generic_string() {
  if (generic_string_ != &::google::protobuf::internal::kEmptyString) {
    generic_string_->clear();
  }
  clear_has_generic_string();
}
inline const ::std::string& CMsgSteamNetworkingIdentityLegacyBinary::generic_string() const {
  return *generic_string_;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_generic_string(const ::std::string& value) {
  set_has_generic_string();
  if (generic_string_ == &::google::protobuf::internal::kEmptyString) {
    generic_string_ = new ::std::string;
  }
  generic_string_->assign(value);
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_generic_string(const char* value) {
  set_has_generic_string();
  if (generic_string_ == &::google::protobuf::internal::kEmptyString) {
    generic_string_ = new ::std::string;
  }
  generic_string_->assign(value);
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_generic_string(const char* value, size_t size) {
  set_has_generic_string();
  if (generic_string_ == &::google::protobuf::internal::kEmptyString) {
    generic_string_ = new ::std::string;
  }
  generic_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamNetworkingIdentityLegacyBinary::mutable_generic_string() {
  set_has_generic_string();
  if (generic_string_ == &::google::protobuf::internal::kEmptyString) {
    generic_string_ = new ::std::string;
  }
  return generic_string_;
}
inline ::std::string* CMsgSteamNetworkingIdentityLegacyBinary::release_generic_string() {
  clear_has_generic_string();
  if (generic_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = generic_string_;
    generic_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_allocated_generic_string(::std::string* generic_string) {
  if (generic_string_ != &::google::protobuf::internal::kEmptyString) {
    delete generic_string_;
  }
  if (generic_string) {
    set_has_generic_string();
    generic_string_ = generic_string;
  } else {
    clear_has_generic_string();
    generic_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes ipv6_and_port = 4;
inline bool CMsgSteamNetworkingIdentityLegacyBinary::has_ipv6_and_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_has_ipv6_and_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::clear_has_ipv6_and_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::clear_ipv6_and_port() {
  if (ipv6_and_port_ != &::google::protobuf::internal::kEmptyString) {
    ipv6_and_port_->clear();
  }
  clear_has_ipv6_and_port();
}
inline const ::std::string& CMsgSteamNetworkingIdentityLegacyBinary::ipv6_and_port() const {
  return *ipv6_and_port_;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_ipv6_and_port(const ::std::string& value) {
  set_has_ipv6_and_port();
  if (ipv6_and_port_ == &::google::protobuf::internal::kEmptyString) {
    ipv6_and_port_ = new ::std::string;
  }
  ipv6_and_port_->assign(value);
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_ipv6_and_port(const char* value) {
  set_has_ipv6_and_port();
  if (ipv6_and_port_ == &::google::protobuf::internal::kEmptyString) {
    ipv6_and_port_ = new ::std::string;
  }
  ipv6_and_port_->assign(value);
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_ipv6_and_port(const void* value, size_t size) {
  set_has_ipv6_and_port();
  if (ipv6_and_port_ == &::google::protobuf::internal::kEmptyString) {
    ipv6_and_port_ = new ::std::string;
  }
  ipv6_and_port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamNetworkingIdentityLegacyBinary::mutable_ipv6_and_port() {
  set_has_ipv6_and_port();
  if (ipv6_and_port_ == &::google::protobuf::internal::kEmptyString) {
    ipv6_and_port_ = new ::std::string;
  }
  return ipv6_and_port_;
}
inline ::std::string* CMsgSteamNetworkingIdentityLegacyBinary::release_ipv6_and_port() {
  clear_has_ipv6_and_port();
  if (ipv6_and_port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ipv6_and_port_;
    ipv6_and_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_allocated_ipv6_and_port(::std::string* ipv6_and_port) {
  if (ipv6_and_port_ != &::google::protobuf::internal::kEmptyString) {
    delete ipv6_and_port_;
  }
  if (ipv6_and_port) {
    set_has_ipv6_and_port();
    ipv6_and_port_ = ipv6_and_port;
  } else {
    clear_has_ipv6_and_port();
    ipv6_and_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgSteamDatagramCertificate

// optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
inline bool CMsgSteamDatagramCertificate::has_key_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramCertificate::set_has_key_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramCertificate::clear_has_key_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramCertificate::clear_key_type() {
  key_type_ = 0;
  clear_has_key_type();
}
inline ::CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::key_type() const {
  return static_cast< ::CMsgSteamDatagramCertificate_EKeyType >(key_type_);
}
inline void CMsgSteamDatagramCertificate::set_key_type(::CMsgSteamDatagramCertificate_EKeyType value) {
  assert(::CMsgSteamDatagramCertificate_EKeyType_IsValid(value));
  set_has_key_type();
  key_type_ = value;
}

// optional bytes key_data = 2;
inline bool CMsgSteamDatagramCertificate::has_key_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramCertificate::set_has_key_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramCertificate::clear_has_key_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramCertificate::clear_key_data() {
  if (key_data_ != &::google::protobuf::internal::kEmptyString) {
    key_data_->clear();
  }
  clear_has_key_data();
}
inline const ::std::string& CMsgSteamDatagramCertificate::key_data() const {
  return *key_data_;
}
inline void CMsgSteamDatagramCertificate::set_key_data(const ::std::string& value) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(value);
}
inline void CMsgSteamDatagramCertificate::set_key_data(const char* value) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(value);
}
inline void CMsgSteamDatagramCertificate::set_key_data(const void* value, size_t size) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramCertificate::mutable_key_data() {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  return key_data_;
}
inline ::std::string* CMsgSteamDatagramCertificate::release_key_data() {
  clear_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_data_;
    key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramCertificate::set_allocated_key_data(::std::string* key_data) {
  if (key_data_ != &::google::protobuf::internal::kEmptyString) {
    delete key_data_;
  }
  if (key_data) {
    set_has_key_data();
    key_data_ = key_data;
  } else {
    clear_has_key_data();
    key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed64 legacy_steam_id = 4;
inline bool CMsgSteamDatagramCertificate::has_legacy_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramCertificate::set_has_legacy_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramCertificate::clear_has_legacy_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramCertificate::clear_legacy_steam_id() {
  legacy_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_legacy_steam_id();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramCertificate::legacy_steam_id() const {
  return legacy_steam_id_;
}
inline void CMsgSteamDatagramCertificate::set_legacy_steam_id(::google::protobuf::uint64 value) {
  set_has_legacy_steam_id();
  legacy_steam_id_ = value;
}

// optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
inline bool CMsgSteamDatagramCertificate::has_legacy_identity_binary() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramCertificate::set_has_legacy_identity_binary() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramCertificate::clear_has_legacy_identity_binary() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramCertificate::clear_legacy_identity_binary() {
  if (legacy_identity_binary_ != NULL) legacy_identity_binary_->::CMsgSteamNetworkingIdentityLegacyBinary::Clear();
  clear_has_legacy_identity_binary();
}
inline const ::CMsgSteamNetworkingIdentityLegacyBinary& CMsgSteamDatagramCertificate::legacy_identity_binary() const {
  return legacy_identity_binary_ != NULL ? *legacy_identity_binary_ : *default_instance_->legacy_identity_binary_;
}
inline ::CMsgSteamNetworkingIdentityLegacyBinary* CMsgSteamDatagramCertificate::mutable_legacy_identity_binary() {
  set_has_legacy_identity_binary();
  if (legacy_identity_binary_ == NULL) legacy_identity_binary_ = new ::CMsgSteamNetworkingIdentityLegacyBinary;
  return legacy_identity_binary_;
}
inline ::CMsgSteamNetworkingIdentityLegacyBinary* CMsgSteamDatagramCertificate::release_legacy_identity_binary() {
  clear_has_legacy_identity_binary();
  ::CMsgSteamNetworkingIdentityLegacyBinary* temp = legacy_identity_binary_;
  legacy_identity_binary_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramCertificate::set_allocated_legacy_identity_binary(::CMsgSteamNetworkingIdentityLegacyBinary* legacy_identity_binary) {
  delete legacy_identity_binary_;
  legacy_identity_binary_ = legacy_identity_binary;
  if (legacy_identity_binary) {
    set_has_legacy_identity_binary();
  } else {
    clear_has_legacy_identity_binary();
  }
}

// optional string identity_string = 12;
inline bool CMsgSteamDatagramCertificate::has_identity_string() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramCertificate::set_has_identity_string() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramCertificate::clear_has_identity_string() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramCertificate::clear_identity_string() {
  if (identity_string_ != &::google::protobuf::internal::kEmptyString) {
    identity_string_->clear();
  }
  clear_has_identity_string();
}
inline const ::std::string& CMsgSteamDatagramCertificate::identity_string() const {
  return *identity_string_;
}
inline void CMsgSteamDatagramCertificate::set_identity_string(const ::std::string& value) {
  set_has_identity_string();
  if (identity_string_ == &::google::protobuf::internal::kEmptyString) {
    identity_string_ = new ::std::string;
  }
  identity_string_->assign(value);
}
inline void CMsgSteamDatagramCertificate::set_identity_string(const char* value) {
  set_has_identity_string();
  if (identity_string_ == &::google::protobuf::internal::kEmptyString) {
    identity_string_ = new ::std::string;
  }
  identity_string_->assign(value);
}
inline void CMsgSteamDatagramCertificate::set_identity_string(const char* value, size_t size) {
  set_has_identity_string();
  if (identity_string_ == &::google::protobuf::internal::kEmptyString) {
    identity_string_ = new ::std::string;
  }
  identity_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramCertificate::mutable_identity_string() {
  set_has_identity_string();
  if (identity_string_ == &::google::protobuf::internal::kEmptyString) {
    identity_string_ = new ::std::string;
  }
  return identity_string_;
}
inline ::std::string* CMsgSteamDatagramCertificate::release_identity_string() {
  clear_has_identity_string();
  if (identity_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identity_string_;
    identity_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramCertificate::set_allocated_identity_string(::std::string* identity_string) {
  if (identity_string_ != &::google::protobuf::internal::kEmptyString) {
    delete identity_string_;
  }
  if (identity_string) {
    set_has_identity_string();
    identity_string_ = identity_string;
  } else {
    clear_has_identity_string();
    identity_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated fixed32 gameserver_datacenter_ids = 5;
inline int CMsgSteamDatagramCertificate::gameserver_datacenter_ids_size() const {
  return gameserver_datacenter_ids_.size();
}
inline void CMsgSteamDatagramCertificate::clear_gameserver_datacenter_ids() {
  gameserver_datacenter_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramCertificate::gameserver_datacenter_ids(int index) const {
  return gameserver_datacenter_ids_.Get(index);
}
inline void CMsgSteamDatagramCertificate::set_gameserver_datacenter_ids(int index, ::google::protobuf::uint32 value) {
  gameserver_datacenter_ids_.Set(index, value);
}
inline void CMsgSteamDatagramCertificate::add_gameserver_datacenter_ids(::google::protobuf::uint32 value) {
  gameserver_datacenter_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramCertificate::gameserver_datacenter_ids() const {
  return gameserver_datacenter_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramCertificate::mutable_gameserver_datacenter_ids() {
  return &gameserver_datacenter_ids_;
}

// optional fixed32 time_created = 8;
inline bool CMsgSteamDatagramCertificate::has_time_created() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramCertificate::set_has_time_created() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramCertificate::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramCertificate::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramCertificate::time_created() const {
  return time_created_;
}
inline void CMsgSteamDatagramCertificate::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
}

// optional fixed32 time_expiry = 9;
inline bool CMsgSteamDatagramCertificate::has_time_expiry() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramCertificate::set_has_time_expiry() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramCertificate::clear_has_time_expiry() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramCertificate::clear_time_expiry() {
  time_expiry_ = 0u;
  clear_has_time_expiry();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramCertificate::time_expiry() const {
  return time_expiry_;
}
inline void CMsgSteamDatagramCertificate::set_time_expiry(::google::protobuf::uint32 value) {
  set_has_time_expiry();
  time_expiry_ = value;
}

// repeated uint32 app_ids = 10;
inline int CMsgSteamDatagramCertificate::app_ids_size() const {
  return app_ids_.size();
}
inline void CMsgSteamDatagramCertificate::clear_app_ids() {
  app_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramCertificate::app_ids(int index) const {
  return app_ids_.Get(index);
}
inline void CMsgSteamDatagramCertificate::set_app_ids(int index, ::google::protobuf::uint32 value) {
  app_ids_.Set(index, value);
}
inline void CMsgSteamDatagramCertificate::add_app_ids(::google::protobuf::uint32 value) {
  app_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramCertificate::app_ids() const {
  return app_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramCertificate::mutable_app_ids() {
  return &app_ids_;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramCertificateSigned

// optional bytes cert = 4;
inline bool CMsgSteamDatagramCertificateSigned::has_cert() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramCertificateSigned::set_has_cert() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramCertificateSigned::clear_has_cert() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramCertificateSigned::clear_cert() {
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    cert_->clear();
  }
  clear_has_cert();
}
inline const ::std::string& CMsgSteamDatagramCertificateSigned::cert() const {
  return *cert_;
}
inline void CMsgSteamDatagramCertificateSigned::set_cert(const ::std::string& value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
}
inline void CMsgSteamDatagramCertificateSigned::set_cert(const char* value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
}
inline void CMsgSteamDatagramCertificateSigned::set_cert(const void* value, size_t size) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  cert_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramCertificateSigned::mutable_cert() {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  return cert_;
}
inline ::std::string* CMsgSteamDatagramCertificateSigned::release_cert() {
  clear_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cert_;
    cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramCertificateSigned::set_allocated_cert(::std::string* cert) {
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    delete cert_;
  }
  if (cert) {
    set_has_cert();
    cert_ = cert;
  } else {
    clear_has_cert();
    cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed64 ca_key_id = 5;
inline bool CMsgSteamDatagramCertificateSigned::has_ca_key_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramCertificateSigned::set_has_ca_key_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramCertificateSigned::clear_has_ca_key_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramCertificateSigned::clear_ca_key_id() {
  ca_key_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ca_key_id();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramCertificateSigned::ca_key_id() const {
  return ca_key_id_;
}
inline void CMsgSteamDatagramCertificateSigned::set_ca_key_id(::google::protobuf::uint64 value) {
  set_has_ca_key_id();
  ca_key_id_ = value;
}

// optional bytes ca_signature = 6;
inline bool CMsgSteamDatagramCertificateSigned::has_ca_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramCertificateSigned::set_has_ca_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramCertificateSigned::clear_has_ca_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramCertificateSigned::clear_ca_signature() {
  if (ca_signature_ != &::google::protobuf::internal::kEmptyString) {
    ca_signature_->clear();
  }
  clear_has_ca_signature();
}
inline const ::std::string& CMsgSteamDatagramCertificateSigned::ca_signature() const {
  return *ca_signature_;
}
inline void CMsgSteamDatagramCertificateSigned::set_ca_signature(const ::std::string& value) {
  set_has_ca_signature();
  if (ca_signature_ == &::google::protobuf::internal::kEmptyString) {
    ca_signature_ = new ::std::string;
  }
  ca_signature_->assign(value);
}
inline void CMsgSteamDatagramCertificateSigned::set_ca_signature(const char* value) {
  set_has_ca_signature();
  if (ca_signature_ == &::google::protobuf::internal::kEmptyString) {
    ca_signature_ = new ::std::string;
  }
  ca_signature_->assign(value);
}
inline void CMsgSteamDatagramCertificateSigned::set_ca_signature(const void* value, size_t size) {
  set_has_ca_signature();
  if (ca_signature_ == &::google::protobuf::internal::kEmptyString) {
    ca_signature_ = new ::std::string;
  }
  ca_signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramCertificateSigned::mutable_ca_signature() {
  set_has_ca_signature();
  if (ca_signature_ == &::google::protobuf::internal::kEmptyString) {
    ca_signature_ = new ::std::string;
  }
  return ca_signature_;
}
inline ::std::string* CMsgSteamDatagramCertificateSigned::release_ca_signature() {
  clear_has_ca_signature();
  if (ca_signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ca_signature_;
    ca_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramCertificateSigned::set_allocated_ca_signature(::std::string* ca_signature) {
  if (ca_signature_ != &::google::protobuf::internal::kEmptyString) {
    delete ca_signature_;
  }
  if (ca_signature) {
    set_has_ca_signature();
    ca_signature_ = ca_signature;
  } else {
    clear_has_ca_signature();
    ca_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes private_key_data = 1;
inline bool CMsgSteamDatagramCertificateSigned::has_private_key_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramCertificateSigned::set_has_private_key_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramCertificateSigned::clear_has_private_key_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramCertificateSigned::clear_private_key_data() {
  if (private_key_data_ != &::google::protobuf::internal::kEmptyString) {
    private_key_data_->clear();
  }
  clear_has_private_key_data();
}
inline const ::std::string& CMsgSteamDatagramCertificateSigned::private_key_data() const {
  return *private_key_data_;
}
inline void CMsgSteamDatagramCertificateSigned::set_private_key_data(const ::std::string& value) {
  set_has_private_key_data();
  if (private_key_data_ == &::google::protobuf::internal::kEmptyString) {
    private_key_data_ = new ::std::string;
  }
  private_key_data_->assign(value);
}
inline void CMsgSteamDatagramCertificateSigned::set_private_key_data(const char* value) {
  set_has_private_key_data();
  if (private_key_data_ == &::google::protobuf::internal::kEmptyString) {
    private_key_data_ = new ::std::string;
  }
  private_key_data_->assign(value);
}
inline void CMsgSteamDatagramCertificateSigned::set_private_key_data(const void* value, size_t size) {
  set_has_private_key_data();
  if (private_key_data_ == &::google::protobuf::internal::kEmptyString) {
    private_key_data_ = new ::std::string;
  }
  private_key_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramCertificateSigned::mutable_private_key_data() {
  set_has_private_key_data();
  if (private_key_data_ == &::google::protobuf::internal::kEmptyString) {
    private_key_data_ = new ::std::string;
  }
  return private_key_data_;
}
inline ::std::string* CMsgSteamDatagramCertificateSigned::release_private_key_data() {
  clear_has_private_key_data();
  if (private_key_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = private_key_data_;
    private_key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramCertificateSigned::set_allocated_private_key_data(::std::string* private_key_data) {
  if (private_key_data_ != &::google::protobuf::internal::kEmptyString) {
    delete private_key_data_;
  }
  if (private_key_data) {
    set_has_private_key_data();
    private_key_data_ = private_key_data;
  } else {
    clear_has_private_key_data();
    private_key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgSteamDatagramCertificateRequest

// optional .CMsgSteamDatagramCertificate cert = 1;
inline bool CMsgSteamDatagramCertificateRequest::has_cert() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramCertificateRequest::set_has_cert() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramCertificateRequest::clear_has_cert() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramCertificateRequest::clear_cert() {
  if (cert_ != NULL) cert_->::CMsgSteamDatagramCertificate::Clear();
  clear_has_cert();
}
inline const ::CMsgSteamDatagramCertificate& CMsgSteamDatagramCertificateRequest::cert() const {
  return cert_ != NULL ? *cert_ : *default_instance_->cert_;
}
inline ::CMsgSteamDatagramCertificate* CMsgSteamDatagramCertificateRequest::mutable_cert() {
  set_has_cert();
  if (cert_ == NULL) cert_ = new ::CMsgSteamDatagramCertificate;
  return cert_;
}
inline ::CMsgSteamDatagramCertificate* CMsgSteamDatagramCertificateRequest::release_cert() {
  clear_has_cert();
  ::CMsgSteamDatagramCertificate* temp = cert_;
  cert_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramCertificateRequest::set_allocated_cert(::CMsgSteamDatagramCertificate* cert) {
  delete cert_;
  cert_ = cert;
  if (cert) {
    set_has_cert();
  } else {
    clear_has_cert();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgSteamDatagramCertificate_EKeyType>() {
  return ::CMsgSteamDatagramCertificate_EKeyType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steamnetworkingsockets_5fmessages_5fcerts_2eproto__INCLUDED
