// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages.proto
#pragma once
#ifndef PROTOBUF_steamnetworkingsockets_5fmessages_2eproto__INCLUDED
#define PROTOBUF_steamnetworkingsockets_5fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steamnetworkingsockets_messages_certs.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

class CMsgSteamDatagramSessionCryptInfo;
class CMsgSteamDatagramSessionCryptInfoSigned;
class CMsgSteamDatagramDiagnostic;
class CMsgSteamDatagramLinkInstantaneousStats;
class CMsgSteamDatagramLinkLifetimeStats;
class CMsgSteamDatagramConnectionQuality;
class CMsgICERendezvous;
class CMsgICERendezvous_Auth;
class CMsgICERendezvous_Candidate;
class CMsgSteamNetworkingP2PRendezvous;
class CMsgSteamNetworkingP2PRendezvous_ConnectRequest;
class CMsgSteamNetworkingP2PRendezvous_ConnectOK;
class CMsgSteamNetworkingP2PRendezvous_ConnectionClosed;
class CMsgSteamNetworkingP2PRendezvous_ReliableMessage;
class CMsgSteamNetworkingICESessionSummary;

enum CMsgSteamDatagramSessionCryptInfo_EKeyType {
  CMsgSteamDatagramSessionCryptInfo_EKeyType_INVALID = 0,
  CMsgSteamDatagramSessionCryptInfo_EKeyType_CURVE25519 = 1
};
bool CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(int value);
const CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_MIN = CMsgSteamDatagramSessionCryptInfo_EKeyType_INVALID;
const CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_MAX = CMsgSteamDatagramSessionCryptInfo_EKeyType_CURVE25519;
const int CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_ARRAYSIZE = CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor();
inline const ::std::string& CMsgSteamDatagramSessionCryptInfo_EKeyType_Name(CMsgSteamDatagramSessionCryptInfo_EKeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor(), value);
}
inline bool CMsgSteamDatagramSessionCryptInfo_EKeyType_Parse(
    const ::std::string& name, CMsgSteamDatagramSessionCryptInfo_EKeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramSessionCryptInfo_EKeyType>(
    CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor(), name, value);
}
enum ESteamNetworkingSocketsCipher {
  k_ESteamNetworkingSocketsCipher_INVALID = 0,
  k_ESteamNetworkingSocketsCipher_NULL = 1,
  k_ESteamNetworkingSocketsCipher_AES_256_GCM = 2
};
bool ESteamNetworkingSocketsCipher_IsValid(int value);
const ESteamNetworkingSocketsCipher ESteamNetworkingSocketsCipher_MIN = k_ESteamNetworkingSocketsCipher_INVALID;
const ESteamNetworkingSocketsCipher ESteamNetworkingSocketsCipher_MAX = k_ESteamNetworkingSocketsCipher_AES_256_GCM;
const int ESteamNetworkingSocketsCipher_ARRAYSIZE = ESteamNetworkingSocketsCipher_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESteamNetworkingSocketsCipher_descriptor();
inline const ::std::string& ESteamNetworkingSocketsCipher_Name(ESteamNetworkingSocketsCipher value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESteamNetworkingSocketsCipher_descriptor(), value);
}
inline bool ESteamNetworkingSocketsCipher_Parse(
    const ::std::string& name, ESteamNetworkingSocketsCipher* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESteamNetworkingSocketsCipher>(
    ESteamNetworkingSocketsCipher_descriptor(), name, value);
}
// ===================================================================

class CMsgSteamDatagramSessionCryptInfo : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramSessionCryptInfo();
  virtual ~CMsgSteamDatagramSessionCryptInfo();

  CMsgSteamDatagramSessionCryptInfo(const CMsgSteamDatagramSessionCryptInfo& from);

  inline CMsgSteamDatagramSessionCryptInfo& operator=(const CMsgSteamDatagramSessionCryptInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramSessionCryptInfo& default_instance();

  void Swap(CMsgSteamDatagramSessionCryptInfo* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramSessionCryptInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramSessionCryptInfo& from);
  void MergeFrom(const CMsgSteamDatagramSessionCryptInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramSessionCryptInfo_EKeyType EKeyType;
  static const EKeyType INVALID = CMsgSteamDatagramSessionCryptInfo_EKeyType_INVALID;
  static const EKeyType CURVE25519 = CMsgSteamDatagramSessionCryptInfo_EKeyType_CURVE25519;
  static inline bool EKeyType_IsValid(int value) {
    return CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(value);
  }
  static const EKeyType EKeyType_MIN =
    CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_MIN;
  static const EKeyType EKeyType_MAX =
    CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_MAX;
  static const int EKeyType_ARRAYSIZE =
    CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EKeyType_descriptor() {
    return CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor();
  }
  static inline const ::std::string& EKeyType_Name(EKeyType value) {
    return CMsgSteamDatagramSessionCryptInfo_EKeyType_Name(value);
  }
  static inline bool EKeyType_Parse(const ::std::string& name,
      EKeyType* value) {
    return CMsgSteamDatagramSessionCryptInfo_EKeyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];
  inline bool has_key_type() const;
  inline void clear_key_type();
  static const int kKeyTypeFieldNumber = 1;
  inline ::CMsgSteamDatagramSessionCryptInfo_EKeyType key_type() const;
  inline void set_key_type(::CMsgSteamDatagramSessionCryptInfo_EKeyType value);

  // optional bytes key_data = 2;
  inline bool has_key_data() const;
  inline void clear_key_data();
  static const int kKeyDataFieldNumber = 2;
  inline const ::std::string& key_data() const;
  inline void set_key_data(const ::std::string& value);
  inline void set_key_data(const char* value);
  inline void set_key_data(const void* value, size_t size);
  inline ::std::string* mutable_key_data();
  inline ::std::string* release_key_data();
  inline void set_allocated_key_data(::std::string* key_data);

  // optional fixed64 nonce = 3;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 3;
  inline ::google::protobuf::uint64 nonce() const;
  inline void set_nonce(::google::protobuf::uint64 value);

  // optional uint32 protocol_version = 4;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 4;
  inline ::google::protobuf::uint32 protocol_version() const;
  inline void set_protocol_version(::google::protobuf::uint32 value);

  // repeated .ESteamNetworkingSocketsCipher ciphers = 5;
  inline int ciphers_size() const;
  inline void clear_ciphers();
  static const int kCiphersFieldNumber = 5;
  inline ::ESteamNetworkingSocketsCipher ciphers(int index) const;
  inline void set_ciphers(int index, ::ESteamNetworkingSocketsCipher value);
  inline void add_ciphers(::ESteamNetworkingSocketsCipher value);
  inline const ::google::protobuf::RepeatedField<int>& ciphers() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_ciphers();

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramSessionCryptInfo)
 private:
  inline void set_has_key_type();
  inline void clear_has_key_type();
  inline void set_has_key_data();
  inline void clear_has_key_data();
  inline void set_has_nonce();
  inline void clear_has_nonce();
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_data_;
  int key_type_;
  ::google::protobuf::uint32 protocol_version_;
  ::google::protobuf::uint64 nonce_;
  ::google::protobuf::RepeatedField<int> ciphers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramSessionCryptInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramSessionCryptInfoSigned : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramSessionCryptInfoSigned();
  virtual ~CMsgSteamDatagramSessionCryptInfoSigned();

  CMsgSteamDatagramSessionCryptInfoSigned(const CMsgSteamDatagramSessionCryptInfoSigned& from);

  inline CMsgSteamDatagramSessionCryptInfoSigned& operator=(const CMsgSteamDatagramSessionCryptInfoSigned& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramSessionCryptInfoSigned& default_instance();

  void Swap(CMsgSteamDatagramSessionCryptInfoSigned* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramSessionCryptInfoSigned* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramSessionCryptInfoSigned& from);
  void MergeFrom(const CMsgSteamDatagramSessionCryptInfoSigned& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const void* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // optional bytes signature = 2;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 2;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramSessionCryptInfoSigned)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* info_;
  ::std::string* signature_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramSessionCryptInfoSigned* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramDiagnostic : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramDiagnostic();
  virtual ~CMsgSteamDatagramDiagnostic();

  CMsgSteamDatagramDiagnostic(const CMsgSteamDatagramDiagnostic& from);

  inline CMsgSteamDatagramDiagnostic& operator=(const CMsgSteamDatagramDiagnostic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramDiagnostic& default_instance();

  void Swap(CMsgSteamDatagramDiagnostic* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramDiagnostic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramDiagnostic& from);
  void MergeFrom(const CMsgSteamDatagramDiagnostic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 severity = 1;
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 1;
  inline ::google::protobuf::uint32 severity() const;
  inline void set_severity(::google::protobuf::uint32 value);

  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramDiagnostic)
 private:
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;
  ::google::protobuf::uint32 severity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramDiagnostic* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramLinkInstantaneousStats : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramLinkInstantaneousStats();
  virtual ~CMsgSteamDatagramLinkInstantaneousStats();

  CMsgSteamDatagramLinkInstantaneousStats(const CMsgSteamDatagramLinkInstantaneousStats& from);

  inline CMsgSteamDatagramLinkInstantaneousStats& operator=(const CMsgSteamDatagramLinkInstantaneousStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramLinkInstantaneousStats& default_instance();

  void Swap(CMsgSteamDatagramLinkInstantaneousStats* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramLinkInstantaneousStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramLinkInstantaneousStats& from);
  void MergeFrom(const CMsgSteamDatagramLinkInstantaneousStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 out_packets_per_sec_x10 = 1;
  inline bool has_out_packets_per_sec_x10() const;
  inline void clear_out_packets_per_sec_x10();
  static const int kOutPacketsPerSecX10FieldNumber = 1;
  inline ::google::protobuf::uint32 out_packets_per_sec_x10() const;
  inline void set_out_packets_per_sec_x10(::google::protobuf::uint32 value);

  // optional uint32 out_bytes_per_sec = 2;
  inline bool has_out_bytes_per_sec() const;
  inline void clear_out_bytes_per_sec();
  static const int kOutBytesPerSecFieldNumber = 2;
  inline ::google::protobuf::uint32 out_bytes_per_sec() const;
  inline void set_out_bytes_per_sec(::google::protobuf::uint32 value);

  // optional uint32 in_packets_per_sec_x10 = 3;
  inline bool has_in_packets_per_sec_x10() const;
  inline void clear_in_packets_per_sec_x10();
  static const int kInPacketsPerSecX10FieldNumber = 3;
  inline ::google::protobuf::uint32 in_packets_per_sec_x10() const;
  inline void set_in_packets_per_sec_x10(::google::protobuf::uint32 value);

  // optional uint32 in_bytes_per_sec = 4;
  inline bool has_in_bytes_per_sec() const;
  inline void clear_in_bytes_per_sec();
  static const int kInBytesPerSecFieldNumber = 4;
  inline ::google::protobuf::uint32 in_bytes_per_sec() const;
  inline void set_in_bytes_per_sec(::google::protobuf::uint32 value);

  // optional uint32 ping_ms = 5;
  inline bool has_ping_ms() const;
  inline void clear_ping_ms();
  static const int kPingMsFieldNumber = 5;
  inline ::google::protobuf::uint32 ping_ms() const;
  inline void set_ping_ms(::google::protobuf::uint32 value);

  // optional uint32 packets_dropped_pct = 6;
  inline bool has_packets_dropped_pct() const;
  inline void clear_packets_dropped_pct();
  static const int kPacketsDroppedPctFieldNumber = 6;
  inline ::google::protobuf::uint32 packets_dropped_pct() const;
  inline void set_packets_dropped_pct(::google::protobuf::uint32 value);

  // optional uint32 packets_weird_sequence_pct = 7;
  inline bool has_packets_weird_sequence_pct() const;
  inline void clear_packets_weird_sequence_pct();
  static const int kPacketsWeirdSequencePctFieldNumber = 7;
  inline ::google::protobuf::uint32 packets_weird_sequence_pct() const;
  inline void set_packets_weird_sequence_pct(::google::protobuf::uint32 value);

  // optional uint32 peak_jitter_usec = 8;
  inline bool has_peak_jitter_usec() const;
  inline void clear_peak_jitter_usec();
  static const int kPeakJitterUsecFieldNumber = 8;
  inline ::google::protobuf::uint32 peak_jitter_usec() const;
  inline void set_peak_jitter_usec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramLinkInstantaneousStats)
 private:
  inline void set_has_out_packets_per_sec_x10();
  inline void clear_has_out_packets_per_sec_x10();
  inline void set_has_out_bytes_per_sec();
  inline void clear_has_out_bytes_per_sec();
  inline void set_has_in_packets_per_sec_x10();
  inline void clear_has_in_packets_per_sec_x10();
  inline void set_has_in_bytes_per_sec();
  inline void clear_has_in_bytes_per_sec();
  inline void set_has_ping_ms();
  inline void clear_has_ping_ms();
  inline void set_has_packets_dropped_pct();
  inline void clear_has_packets_dropped_pct();
  inline void set_has_packets_weird_sequence_pct();
  inline void clear_has_packets_weird_sequence_pct();
  inline void set_has_peak_jitter_usec();
  inline void clear_has_peak_jitter_usec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 out_packets_per_sec_x10_;
  ::google::protobuf::uint32 out_bytes_per_sec_;
  ::google::protobuf::uint32 in_packets_per_sec_x10_;
  ::google::protobuf::uint32 in_bytes_per_sec_;
  ::google::protobuf::uint32 ping_ms_;
  ::google::protobuf::uint32 packets_dropped_pct_;
  ::google::protobuf::uint32 packets_weird_sequence_pct_;
  ::google::protobuf::uint32 peak_jitter_usec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramLinkInstantaneousStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramLinkLifetimeStats : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramLinkLifetimeStats();
  virtual ~CMsgSteamDatagramLinkLifetimeStats();

  CMsgSteamDatagramLinkLifetimeStats(const CMsgSteamDatagramLinkLifetimeStats& from);

  inline CMsgSteamDatagramLinkLifetimeStats& operator=(const CMsgSteamDatagramLinkLifetimeStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramLinkLifetimeStats& default_instance();

  void Swap(CMsgSteamDatagramLinkLifetimeStats* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramLinkLifetimeStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramLinkLifetimeStats& from);
  void MergeFrom(const CMsgSteamDatagramLinkLifetimeStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 connected_seconds = 2;
  inline bool has_connected_seconds() const;
  inline void clear_connected_seconds();
  static const int kConnectedSecondsFieldNumber = 2;
  inline ::google::protobuf::uint32 connected_seconds() const;
  inline void set_connected_seconds(::google::protobuf::uint32 value);

  // optional uint64 packets_sent = 3;
  inline bool has_packets_sent() const;
  inline void clear_packets_sent();
  static const int kPacketsSentFieldNumber = 3;
  inline ::google::protobuf::uint64 packets_sent() const;
  inline void set_packets_sent(::google::protobuf::uint64 value);

  // optional uint64 kb_sent = 4;
  inline bool has_kb_sent() const;
  inline void clear_kb_sent();
  static const int kKbSentFieldNumber = 4;
  inline ::google::protobuf::uint64 kb_sent() const;
  inline void set_kb_sent(::google::protobuf::uint64 value);

  // optional uint64 packets_recv = 5;
  inline bool has_packets_recv() const;
  inline void clear_packets_recv();
  static const int kPacketsRecvFieldNumber = 5;
  inline ::google::protobuf::uint64 packets_recv() const;
  inline void set_packets_recv(::google::protobuf::uint64 value);

  // optional uint64 kb_recv = 6;
  inline bool has_kb_recv() const;
  inline void clear_kb_recv();
  static const int kKbRecvFieldNumber = 6;
  inline ::google::protobuf::uint64 kb_recv() const;
  inline void set_kb_recv(::google::protobuf::uint64 value);

  // optional uint64 packets_recv_sequenced = 7;
  inline bool has_packets_recv_sequenced() const;
  inline void clear_packets_recv_sequenced();
  static const int kPacketsRecvSequencedFieldNumber = 7;
  inline ::google::protobuf::uint64 packets_recv_sequenced() const;
  inline void set_packets_recv_sequenced(::google::protobuf::uint64 value);

  // optional uint64 packets_recv_dropped = 8;
  inline bool has_packets_recv_dropped() const;
  inline void clear_packets_recv_dropped();
  static const int kPacketsRecvDroppedFieldNumber = 8;
  inline ::google::protobuf::uint64 packets_recv_dropped() const;
  inline void set_packets_recv_dropped(::google::protobuf::uint64 value);

  // optional uint64 packets_recv_out_of_order = 9;
  inline bool has_packets_recv_out_of_order() const;
  inline void clear_packets_recv_out_of_order();
  static const int kPacketsRecvOutOfOrderFieldNumber = 9;
  inline ::google::protobuf::uint64 packets_recv_out_of_order() const;
  inline void set_packets_recv_out_of_order(::google::protobuf::uint64 value);

  // optional uint64 packets_recv_duplicate = 10;
  inline bool has_packets_recv_duplicate() const;
  inline void clear_packets_recv_duplicate();
  static const int kPacketsRecvDuplicateFieldNumber = 10;
  inline ::google::protobuf::uint64 packets_recv_duplicate() const;
  inline void set_packets_recv_duplicate(::google::protobuf::uint64 value);

  // optional uint64 packets_recv_lurch = 11;
  inline bool has_packets_recv_lurch() const;
  inline void clear_packets_recv_lurch();
  static const int kPacketsRecvLurchFieldNumber = 11;
  inline ::google::protobuf::uint64 packets_recv_lurch() const;
  inline void set_packets_recv_lurch(::google::protobuf::uint64 value);

  // optional uint32 quality_histogram_100 = 21;
  inline bool has_quality_histogram_100() const;
  inline void clear_quality_histogram_100();
  static const int kQualityHistogram100FieldNumber = 21;
  inline ::google::protobuf::uint32 quality_histogram_100() const;
  inline void set_quality_histogram_100(::google::protobuf::uint32 value);

  // optional uint32 quality_histogram_99 = 22;
  inline bool has_quality_histogram_99() const;
  inline void clear_quality_histogram_99();
  static const int kQualityHistogram99FieldNumber = 22;
  inline ::google::protobuf::uint32 quality_histogram_99() const;
  inline void set_quality_histogram_99(::google::protobuf::uint32 value);

  // optional uint32 quality_histogram_97 = 23;
  inline bool has_quality_histogram_97() const;
  inline void clear_quality_histogram_97();
  static const int kQualityHistogram97FieldNumber = 23;
  inline ::google::protobuf::uint32 quality_histogram_97() const;
  inline void set_quality_histogram_97(::google::protobuf::uint32 value);

  // optional uint32 quality_histogram_95 = 24;
  inline bool has_quality_histogram_95() const;
  inline void clear_quality_histogram_95();
  static const int kQualityHistogram95FieldNumber = 24;
  inline ::google::protobuf::uint32 quality_histogram_95() const;
  inline void set_quality_histogram_95(::google::protobuf::uint32 value);

  // optional uint32 quality_histogram_90 = 25;
  inline bool has_quality_histogram_90() const;
  inline void clear_quality_histogram_90();
  static const int kQualityHistogram90FieldNumber = 25;
  inline ::google::protobuf::uint32 quality_histogram_90() const;
  inline void set_quality_histogram_90(::google::protobuf::uint32 value);

  // optional uint32 quality_histogram_75 = 26;
  inline bool has_quality_histogram_75() const;
  inline void clear_quality_histogram_75();
  static const int kQualityHistogram75FieldNumber = 26;
  inline ::google::protobuf::uint32 quality_histogram_75() const;
  inline void set_quality_histogram_75(::google::protobuf::uint32 value);

  // optional uint32 quality_histogram_50 = 27;
  inline bool has_quality_histogram_50() const;
  inline void clear_quality_histogram_50();
  static const int kQualityHistogram50FieldNumber = 27;
  inline ::google::protobuf::uint32 quality_histogram_50() const;
  inline void set_quality_histogram_50(::google::protobuf::uint32 value);

  // optional uint32 quality_histogram_1 = 28;
  inline bool has_quality_histogram_1() const;
  inline void clear_quality_histogram_1();
  static const int kQualityHistogram1FieldNumber = 28;
  inline ::google::protobuf::uint32 quality_histogram_1() const;
  inline void set_quality_histogram_1(::google::protobuf::uint32 value);

  // optional uint32 quality_histogram_dead = 29;
  inline bool has_quality_histogram_dead() const;
  inline void clear_quality_histogram_dead();
  static const int kQualityHistogramDeadFieldNumber = 29;
  inline ::google::protobuf::uint32 quality_histogram_dead() const;
  inline void set_quality_histogram_dead(::google::protobuf::uint32 value);

  // optional uint32 quality_ntile_2nd = 30;
  inline bool has_quality_ntile_2nd() const;
  inline void clear_quality_ntile_2nd();
  static const int kQualityNtile2NdFieldNumber = 30;
  inline ::google::protobuf::uint32 quality_ntile_2nd() const;
  inline void set_quality_ntile_2nd(::google::protobuf::uint32 value);

  // optional uint32 quality_ntile_5th = 31;
  inline bool has_quality_ntile_5th() const;
  inline void clear_quality_ntile_5th();
  static const int kQualityNtile5ThFieldNumber = 31;
  inline ::google::protobuf::uint32 quality_ntile_5th() const;
  inline void set_quality_ntile_5th(::google::protobuf::uint32 value);

  // optional uint32 quality_ntile_25th = 32;
  inline bool has_quality_ntile_25th() const;
  inline void clear_quality_ntile_25th();
  static const int kQualityNtile25ThFieldNumber = 32;
  inline ::google::protobuf::uint32 quality_ntile_25th() const;
  inline void set_quality_ntile_25th(::google::protobuf::uint32 value);

  // optional uint32 quality_ntile_50th = 33;
  inline bool has_quality_ntile_50th() const;
  inline void clear_quality_ntile_50th();
  static const int kQualityNtile50ThFieldNumber = 33;
  inline ::google::protobuf::uint32 quality_ntile_50th() const;
  inline void set_quality_ntile_50th(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_25 = 41;
  inline bool has_ping_histogram_25() const;
  inline void clear_ping_histogram_25();
  static const int kPingHistogram25FieldNumber = 41;
  inline ::google::protobuf::uint32 ping_histogram_25() const;
  inline void set_ping_histogram_25(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_50 = 42;
  inline bool has_ping_histogram_50() const;
  inline void clear_ping_histogram_50();
  static const int kPingHistogram50FieldNumber = 42;
  inline ::google::protobuf::uint32 ping_histogram_50() const;
  inline void set_ping_histogram_50(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_75 = 43;
  inline bool has_ping_histogram_75() const;
  inline void clear_ping_histogram_75();
  static const int kPingHistogram75FieldNumber = 43;
  inline ::google::protobuf::uint32 ping_histogram_75() const;
  inline void set_ping_histogram_75(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_100 = 44;
  inline bool has_ping_histogram_100() const;
  inline void clear_ping_histogram_100();
  static const int kPingHistogram100FieldNumber = 44;
  inline ::google::protobuf::uint32 ping_histogram_100() const;
  inline void set_ping_histogram_100(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_125 = 45;
  inline bool has_ping_histogram_125() const;
  inline void clear_ping_histogram_125();
  static const int kPingHistogram125FieldNumber = 45;
  inline ::google::protobuf::uint32 ping_histogram_125() const;
  inline void set_ping_histogram_125(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_150 = 46;
  inline bool has_ping_histogram_150() const;
  inline void clear_ping_histogram_150();
  static const int kPingHistogram150FieldNumber = 46;
  inline ::google::protobuf::uint32 ping_histogram_150() const;
  inline void set_ping_histogram_150(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_200 = 47;
  inline bool has_ping_histogram_200() const;
  inline void clear_ping_histogram_200();
  static const int kPingHistogram200FieldNumber = 47;
  inline ::google::protobuf::uint32 ping_histogram_200() const;
  inline void set_ping_histogram_200(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_300 = 48;
  inline bool has_ping_histogram_300() const;
  inline void clear_ping_histogram_300();
  static const int kPingHistogram300FieldNumber = 48;
  inline ::google::protobuf::uint32 ping_histogram_300() const;
  inline void set_ping_histogram_300(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_max = 49;
  inline bool has_ping_histogram_max() const;
  inline void clear_ping_histogram_max();
  static const int kPingHistogramMaxFieldNumber = 49;
  inline ::google::protobuf::uint32 ping_histogram_max() const;
  inline void set_ping_histogram_max(::google::protobuf::uint32 value);

  // optional uint32 ping_ntile_5th = 50;
  inline bool has_ping_ntile_5th() const;
  inline void clear_ping_ntile_5th();
  static const int kPingNtile5ThFieldNumber = 50;
  inline ::google::protobuf::uint32 ping_ntile_5th() const;
  inline void set_ping_ntile_5th(::google::protobuf::uint32 value);

  // optional uint32 ping_ntile_50th = 51;
  inline bool has_ping_ntile_50th() const;
  inline void clear_ping_ntile_50th();
  static const int kPingNtile50ThFieldNumber = 51;
  inline ::google::protobuf::uint32 ping_ntile_50th() const;
  inline void set_ping_ntile_50th(::google::protobuf::uint32 value);

  // optional uint32 ping_ntile_75th = 52;
  inline bool has_ping_ntile_75th() const;
  inline void clear_ping_ntile_75th();
  static const int kPingNtile75ThFieldNumber = 52;
  inline ::google::protobuf::uint32 ping_ntile_75th() const;
  inline void set_ping_ntile_75th(::google::protobuf::uint32 value);

  // optional uint32 ping_ntile_95th = 53;
  inline bool has_ping_ntile_95th() const;
  inline void clear_ping_ntile_95th();
  static const int kPingNtile95ThFieldNumber = 53;
  inline ::google::protobuf::uint32 ping_ntile_95th() const;
  inline void set_ping_ntile_95th(::google::protobuf::uint32 value);

  // optional uint32 ping_ntile_98th = 54;
  inline bool has_ping_ntile_98th() const;
  inline void clear_ping_ntile_98th();
  static const int kPingNtile98ThFieldNumber = 54;
  inline ::google::protobuf::uint32 ping_ntile_98th() const;
  inline void set_ping_ntile_98th(::google::protobuf::uint32 value);

  // optional uint32 jitter_histogram_negligible = 61;
  inline bool has_jitter_histogram_negligible() const;
  inline void clear_jitter_histogram_negligible();
  static const int kJitterHistogramNegligibleFieldNumber = 61;
  inline ::google::protobuf::uint32 jitter_histogram_negligible() const;
  inline void set_jitter_histogram_negligible(::google::protobuf::uint32 value);

  // optional uint32 jitter_histogram_1 = 62;
  inline bool has_jitter_histogram_1() const;
  inline void clear_jitter_histogram_1();
  static const int kJitterHistogram1FieldNumber = 62;
  inline ::google::protobuf::uint32 jitter_histogram_1() const;
  inline void set_jitter_histogram_1(::google::protobuf::uint32 value);

  // optional uint32 jitter_histogram_2 = 63;
  inline bool has_jitter_histogram_2() const;
  inline void clear_jitter_histogram_2();
  static const int kJitterHistogram2FieldNumber = 63;
  inline ::google::protobuf::uint32 jitter_histogram_2() const;
  inline void set_jitter_histogram_2(::google::protobuf::uint32 value);

  // optional uint32 jitter_histogram_5 = 64;
  inline bool has_jitter_histogram_5() const;
  inline void clear_jitter_histogram_5();
  static const int kJitterHistogram5FieldNumber = 64;
  inline ::google::protobuf::uint32 jitter_histogram_5() const;
  inline void set_jitter_histogram_5(::google::protobuf::uint32 value);

  // optional uint32 jitter_histogram_10 = 65;
  inline bool has_jitter_histogram_10() const;
  inline void clear_jitter_histogram_10();
  static const int kJitterHistogram10FieldNumber = 65;
  inline ::google::protobuf::uint32 jitter_histogram_10() const;
  inline void set_jitter_histogram_10(::google::protobuf::uint32 value);

  // optional uint32 jitter_histogram_20 = 66;
  inline bool has_jitter_histogram_20() const;
  inline void clear_jitter_histogram_20();
  static const int kJitterHistogram20FieldNumber = 66;
  inline ::google::protobuf::uint32 jitter_histogram_20() const;
  inline void set_jitter_histogram_20(::google::protobuf::uint32 value);

  // optional uint32 txspeed_max = 67;
  inline bool has_txspeed_max() const;
  inline void clear_txspeed_max();
  static const int kTxspeedMaxFieldNumber = 67;
  inline ::google::protobuf::uint32 txspeed_max() const;
  inline void set_txspeed_max(::google::protobuf::uint32 value);

  // optional uint32 txspeed_histogram_16 = 68;
  inline bool has_txspeed_histogram_16() const;
  inline void clear_txspeed_histogram_16();
  static const int kTxspeedHistogram16FieldNumber = 68;
  inline ::google::protobuf::uint32 txspeed_histogram_16() const;
  inline void set_txspeed_histogram_16(::google::protobuf::uint32 value);

  // optional uint32 txspeed_histogram_32 = 69;
  inline bool has_txspeed_histogram_32() const;
  inline void clear_txspeed_histogram_32();
  static const int kTxspeedHistogram32FieldNumber = 69;
  inline ::google::protobuf::uint32 txspeed_histogram_32() const;
  inline void set_txspeed_histogram_32(::google::protobuf::uint32 value);

  // optional uint32 txspeed_histogram_64 = 70;
  inline bool has_txspeed_histogram_64() const;
  inline void clear_txspeed_histogram_64();
  static const int kTxspeedHistogram64FieldNumber = 70;
  inline ::google::protobuf::uint32 txspeed_histogram_64() const;
  inline void set_txspeed_histogram_64(::google::protobuf::uint32 value);

  // optional uint32 txspeed_histogram_128 = 71;
  inline bool has_txspeed_histogram_128() const;
  inline void clear_txspeed_histogram_128();
  static const int kTxspeedHistogram128FieldNumber = 71;
  inline ::google::protobuf::uint32 txspeed_histogram_128() const;
  inline void set_txspeed_histogram_128(::google::protobuf::uint32 value);

  // optional uint32 txspeed_histogram_256 = 72;
  inline bool has_txspeed_histogram_256() const;
  inline void clear_txspeed_histogram_256();
  static const int kTxspeedHistogram256FieldNumber = 72;
  inline ::google::protobuf::uint32 txspeed_histogram_256() const;
  inline void set_txspeed_histogram_256(::google::protobuf::uint32 value);

  // optional uint32 txspeed_histogram_512 = 73;
  inline bool has_txspeed_histogram_512() const;
  inline void clear_txspeed_histogram_512();
  static const int kTxspeedHistogram512FieldNumber = 73;
  inline ::google::protobuf::uint32 txspeed_histogram_512() const;
  inline void set_txspeed_histogram_512(::google::protobuf::uint32 value);

  // optional uint32 txspeed_histogram_1024 = 74;
  inline bool has_txspeed_histogram_1024() const;
  inline void clear_txspeed_histogram_1024();
  static const int kTxspeedHistogram1024FieldNumber = 74;
  inline ::google::protobuf::uint32 txspeed_histogram_1024() const;
  inline void set_txspeed_histogram_1024(::google::protobuf::uint32 value);

  // optional uint32 txspeed_histogram_max = 75;
  inline bool has_txspeed_histogram_max() const;
  inline void clear_txspeed_histogram_max();
  static const int kTxspeedHistogramMaxFieldNumber = 75;
  inline ::google::protobuf::uint32 txspeed_histogram_max() const;
  inline void set_txspeed_histogram_max(::google::protobuf::uint32 value);

  // optional uint32 txspeed_ntile_5th = 76;
  inline bool has_txspeed_ntile_5th() const;
  inline void clear_txspeed_ntile_5th();
  static const int kTxspeedNtile5ThFieldNumber = 76;
  inline ::google::protobuf::uint32 txspeed_ntile_5th() const;
  inline void set_txspeed_ntile_5th(::google::protobuf::uint32 value);

  // optional uint32 txspeed_ntile_50th = 77;
  inline bool has_txspeed_ntile_50th() const;
  inline void clear_txspeed_ntile_50th();
  static const int kTxspeedNtile50ThFieldNumber = 77;
  inline ::google::protobuf::uint32 txspeed_ntile_50th() const;
  inline void set_txspeed_ntile_50th(::google::protobuf::uint32 value);

  // optional uint32 txspeed_ntile_75th = 78;
  inline bool has_txspeed_ntile_75th() const;
  inline void clear_txspeed_ntile_75th();
  static const int kTxspeedNtile75ThFieldNumber = 78;
  inline ::google::protobuf::uint32 txspeed_ntile_75th() const;
  inline void set_txspeed_ntile_75th(::google::protobuf::uint32 value);

  // optional uint32 txspeed_ntile_95th = 79;
  inline bool has_txspeed_ntile_95th() const;
  inline void clear_txspeed_ntile_95th();
  static const int kTxspeedNtile95ThFieldNumber = 79;
  inline ::google::protobuf::uint32 txspeed_ntile_95th() const;
  inline void set_txspeed_ntile_95th(::google::protobuf::uint32 value);

  // optional uint32 txspeed_ntile_98th = 80;
  inline bool has_txspeed_ntile_98th() const;
  inline void clear_txspeed_ntile_98th();
  static const int kTxspeedNtile98ThFieldNumber = 80;
  inline ::google::protobuf::uint32 txspeed_ntile_98th() const;
  inline void set_txspeed_ntile_98th(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_max = 81;
  inline bool has_rxspeed_max() const;
  inline void clear_rxspeed_max();
  static const int kRxspeedMaxFieldNumber = 81;
  inline ::google::protobuf::uint32 rxspeed_max() const;
  inline void set_rxspeed_max(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_histogram_16 = 82;
  inline bool has_rxspeed_histogram_16() const;
  inline void clear_rxspeed_histogram_16();
  static const int kRxspeedHistogram16FieldNumber = 82;
  inline ::google::protobuf::uint32 rxspeed_histogram_16() const;
  inline void set_rxspeed_histogram_16(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_histogram_32 = 83;
  inline bool has_rxspeed_histogram_32() const;
  inline void clear_rxspeed_histogram_32();
  static const int kRxspeedHistogram32FieldNumber = 83;
  inline ::google::protobuf::uint32 rxspeed_histogram_32() const;
  inline void set_rxspeed_histogram_32(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_histogram_64 = 84;
  inline bool has_rxspeed_histogram_64() const;
  inline void clear_rxspeed_histogram_64();
  static const int kRxspeedHistogram64FieldNumber = 84;
  inline ::google::protobuf::uint32 rxspeed_histogram_64() const;
  inline void set_rxspeed_histogram_64(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_histogram_128 = 85;
  inline bool has_rxspeed_histogram_128() const;
  inline void clear_rxspeed_histogram_128();
  static const int kRxspeedHistogram128FieldNumber = 85;
  inline ::google::protobuf::uint32 rxspeed_histogram_128() const;
  inline void set_rxspeed_histogram_128(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_histogram_256 = 86;
  inline bool has_rxspeed_histogram_256() const;
  inline void clear_rxspeed_histogram_256();
  static const int kRxspeedHistogram256FieldNumber = 86;
  inline ::google::protobuf::uint32 rxspeed_histogram_256() const;
  inline void set_rxspeed_histogram_256(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_histogram_512 = 87;
  inline bool has_rxspeed_histogram_512() const;
  inline void clear_rxspeed_histogram_512();
  static const int kRxspeedHistogram512FieldNumber = 87;
  inline ::google::protobuf::uint32 rxspeed_histogram_512() const;
  inline void set_rxspeed_histogram_512(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_histogram_1024 = 88;
  inline bool has_rxspeed_histogram_1024() const;
  inline void clear_rxspeed_histogram_1024();
  static const int kRxspeedHistogram1024FieldNumber = 88;
  inline ::google::protobuf::uint32 rxspeed_histogram_1024() const;
  inline void set_rxspeed_histogram_1024(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_histogram_max = 89;
  inline bool has_rxspeed_histogram_max() const;
  inline void clear_rxspeed_histogram_max();
  static const int kRxspeedHistogramMaxFieldNumber = 89;
  inline ::google::protobuf::uint32 rxspeed_histogram_max() const;
  inline void set_rxspeed_histogram_max(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_ntile_5th = 90;
  inline bool has_rxspeed_ntile_5th() const;
  inline void clear_rxspeed_ntile_5th();
  static const int kRxspeedNtile5ThFieldNumber = 90;
  inline ::google::protobuf::uint32 rxspeed_ntile_5th() const;
  inline void set_rxspeed_ntile_5th(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_ntile_50th = 91;
  inline bool has_rxspeed_ntile_50th() const;
  inline void clear_rxspeed_ntile_50th();
  static const int kRxspeedNtile50ThFieldNumber = 91;
  inline ::google::protobuf::uint32 rxspeed_ntile_50th() const;
  inline void set_rxspeed_ntile_50th(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_ntile_75th = 92;
  inline bool has_rxspeed_ntile_75th() const;
  inline void clear_rxspeed_ntile_75th();
  static const int kRxspeedNtile75ThFieldNumber = 92;
  inline ::google::protobuf::uint32 rxspeed_ntile_75th() const;
  inline void set_rxspeed_ntile_75th(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_ntile_95th = 93;
  inline bool has_rxspeed_ntile_95th() const;
  inline void clear_rxspeed_ntile_95th();
  static const int kRxspeedNtile95ThFieldNumber = 93;
  inline ::google::protobuf::uint32 rxspeed_ntile_95th() const;
  inline void set_rxspeed_ntile_95th(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_ntile_98th = 94;
  inline bool has_rxspeed_ntile_98th() const;
  inline void clear_rxspeed_ntile_98th();
  static const int kRxspeedNtile98ThFieldNumber = 94;
  inline ::google::protobuf::uint32 rxspeed_ntile_98th() const;
  inline void set_rxspeed_ntile_98th(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramLinkLifetimeStats)
 private:
  inline void set_has_connected_seconds();
  inline void clear_has_connected_seconds();
  inline void set_has_packets_sent();
  inline void clear_has_packets_sent();
  inline void set_has_kb_sent();
  inline void clear_has_kb_sent();
  inline void set_has_packets_recv();
  inline void clear_has_packets_recv();
  inline void set_has_kb_recv();
  inline void clear_has_kb_recv();
  inline void set_has_packets_recv_sequenced();
  inline void clear_has_packets_recv_sequenced();
  inline void set_has_packets_recv_dropped();
  inline void clear_has_packets_recv_dropped();
  inline void set_has_packets_recv_out_of_order();
  inline void clear_has_packets_recv_out_of_order();
  inline void set_has_packets_recv_duplicate();
  inline void clear_has_packets_recv_duplicate();
  inline void set_has_packets_recv_lurch();
  inline void clear_has_packets_recv_lurch();
  inline void set_has_quality_histogram_100();
  inline void clear_has_quality_histogram_100();
  inline void set_has_quality_histogram_99();
  inline void clear_has_quality_histogram_99();
  inline void set_has_quality_histogram_97();
  inline void clear_has_quality_histogram_97();
  inline void set_has_quality_histogram_95();
  inline void clear_has_quality_histogram_95();
  inline void set_has_quality_histogram_90();
  inline void clear_has_quality_histogram_90();
  inline void set_has_quality_histogram_75();
  inline void clear_has_quality_histogram_75();
  inline void set_has_quality_histogram_50();
  inline void clear_has_quality_histogram_50();
  inline void set_has_quality_histogram_1();
  inline void clear_has_quality_histogram_1();
  inline void set_has_quality_histogram_dead();
  inline void clear_has_quality_histogram_dead();
  inline void set_has_quality_ntile_2nd();
  inline void clear_has_quality_ntile_2nd();
  inline void set_has_quality_ntile_5th();
  inline void clear_has_quality_ntile_5th();
  inline void set_has_quality_ntile_25th();
  inline void clear_has_quality_ntile_25th();
  inline void set_has_quality_ntile_50th();
  inline void clear_has_quality_ntile_50th();
  inline void set_has_ping_histogram_25();
  inline void clear_has_ping_histogram_25();
  inline void set_has_ping_histogram_50();
  inline void clear_has_ping_histogram_50();
  inline void set_has_ping_histogram_75();
  inline void clear_has_ping_histogram_75();
  inline void set_has_ping_histogram_100();
  inline void clear_has_ping_histogram_100();
  inline void set_has_ping_histogram_125();
  inline void clear_has_ping_histogram_125();
  inline void set_has_ping_histogram_150();
  inline void clear_has_ping_histogram_150();
  inline void set_has_ping_histogram_200();
  inline void clear_has_ping_histogram_200();
  inline void set_has_ping_histogram_300();
  inline void clear_has_ping_histogram_300();
  inline void set_has_ping_histogram_max();
  inline void clear_has_ping_histogram_max();
  inline void set_has_ping_ntile_5th();
  inline void clear_has_ping_ntile_5th();
  inline void set_has_ping_ntile_50th();
  inline void clear_has_ping_ntile_50th();
  inline void set_has_ping_ntile_75th();
  inline void clear_has_ping_ntile_75th();
  inline void set_has_ping_ntile_95th();
  inline void clear_has_ping_ntile_95th();
  inline void set_has_ping_ntile_98th();
  inline void clear_has_ping_ntile_98th();
  inline void set_has_jitter_histogram_negligible();
  inline void clear_has_jitter_histogram_negligible();
  inline void set_has_jitter_histogram_1();
  inline void clear_has_jitter_histogram_1();
  inline void set_has_jitter_histogram_2();
  inline void clear_has_jitter_histogram_2();
  inline void set_has_jitter_histogram_5();
  inline void clear_has_jitter_histogram_5();
  inline void set_has_jitter_histogram_10();
  inline void clear_has_jitter_histogram_10();
  inline void set_has_jitter_histogram_20();
  inline void clear_has_jitter_histogram_20();
  inline void set_has_txspeed_max();
  inline void clear_has_txspeed_max();
  inline void set_has_txspeed_histogram_16();
  inline void clear_has_txspeed_histogram_16();
  inline void set_has_txspeed_histogram_32();
  inline void clear_has_txspeed_histogram_32();
  inline void set_has_txspeed_histogram_64();
  inline void clear_has_txspeed_histogram_64();
  inline void set_has_txspeed_histogram_128();
  inline void clear_has_txspeed_histogram_128();
  inline void set_has_txspeed_histogram_256();
  inline void clear_has_txspeed_histogram_256();
  inline void set_has_txspeed_histogram_512();
  inline void clear_has_txspeed_histogram_512();
  inline void set_has_txspeed_histogram_1024();
  inline void clear_has_txspeed_histogram_1024();
  inline void set_has_txspeed_histogram_max();
  inline void clear_has_txspeed_histogram_max();
  inline void set_has_txspeed_ntile_5th();
  inline void clear_has_txspeed_ntile_5th();
  inline void set_has_txspeed_ntile_50th();
  inline void clear_has_txspeed_ntile_50th();
  inline void set_has_txspeed_ntile_75th();
  inline void clear_has_txspeed_ntile_75th();
  inline void set_has_txspeed_ntile_95th();
  inline void clear_has_txspeed_ntile_95th();
  inline void set_has_txspeed_ntile_98th();
  inline void clear_has_txspeed_ntile_98th();
  inline void set_has_rxspeed_max();
  inline void clear_has_rxspeed_max();
  inline void set_has_rxspeed_histogram_16();
  inline void clear_has_rxspeed_histogram_16();
  inline void set_has_rxspeed_histogram_32();
  inline void clear_has_rxspeed_histogram_32();
  inline void set_has_rxspeed_histogram_64();
  inline void clear_has_rxspeed_histogram_64();
  inline void set_has_rxspeed_histogram_128();
  inline void clear_has_rxspeed_histogram_128();
  inline void set_has_rxspeed_histogram_256();
  inline void clear_has_rxspeed_histogram_256();
  inline void set_has_rxspeed_histogram_512();
  inline void clear_has_rxspeed_histogram_512();
  inline void set_has_rxspeed_histogram_1024();
  inline void clear_has_rxspeed_histogram_1024();
  inline void set_has_rxspeed_histogram_max();
  inline void clear_has_rxspeed_histogram_max();
  inline void set_has_rxspeed_ntile_5th();
  inline void clear_has_rxspeed_ntile_5th();
  inline void set_has_rxspeed_ntile_50th();
  inline void clear_has_rxspeed_ntile_50th();
  inline void set_has_rxspeed_ntile_75th();
  inline void clear_has_rxspeed_ntile_75th();
  inline void set_has_rxspeed_ntile_95th();
  inline void clear_has_rxspeed_ntile_95th();
  inline void set_has_rxspeed_ntile_98th();
  inline void clear_has_rxspeed_ntile_98th();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 packets_sent_;
  ::google::protobuf::uint64 kb_sent_;
  ::google::protobuf::uint64 packets_recv_;
  ::google::protobuf::uint64 kb_recv_;
  ::google::protobuf::uint64 packets_recv_sequenced_;
  ::google::protobuf::uint32 connected_seconds_;
  ::google::protobuf::uint32 quality_histogram_100_;
  ::google::protobuf::uint64 packets_recv_dropped_;
  ::google::protobuf::uint64 packets_recv_out_of_order_;
  ::google::protobuf::uint64 packets_recv_duplicate_;
  ::google::protobuf::uint64 packets_recv_lurch_;
  ::google::protobuf::uint32 quality_histogram_99_;
  ::google::protobuf::uint32 quality_histogram_97_;
  ::google::protobuf::uint32 quality_histogram_95_;
  ::google::protobuf::uint32 quality_histogram_90_;
  ::google::protobuf::uint32 quality_histogram_75_;
  ::google::protobuf::uint32 quality_histogram_50_;
  ::google::protobuf::uint32 quality_histogram_1_;
  ::google::protobuf::uint32 quality_histogram_dead_;
  ::google::protobuf::uint32 quality_ntile_2nd_;
  ::google::protobuf::uint32 quality_ntile_5th_;
  ::google::protobuf::uint32 quality_ntile_25th_;
  ::google::protobuf::uint32 quality_ntile_50th_;
  ::google::protobuf::uint32 ping_histogram_25_;
  ::google::protobuf::uint32 ping_histogram_50_;
  ::google::protobuf::uint32 ping_histogram_75_;
  ::google::protobuf::uint32 ping_histogram_100_;
  ::google::protobuf::uint32 ping_histogram_125_;
  ::google::protobuf::uint32 ping_histogram_150_;
  ::google::protobuf::uint32 ping_histogram_200_;
  ::google::protobuf::uint32 ping_histogram_300_;
  ::google::protobuf::uint32 ping_histogram_max_;
  ::google::protobuf::uint32 ping_ntile_5th_;
  ::google::protobuf::uint32 ping_ntile_50th_;
  ::google::protobuf::uint32 ping_ntile_75th_;
  ::google::protobuf::uint32 ping_ntile_95th_;
  ::google::protobuf::uint32 ping_ntile_98th_;
  ::google::protobuf::uint32 jitter_histogram_negligible_;
  ::google::protobuf::uint32 jitter_histogram_1_;
  ::google::protobuf::uint32 jitter_histogram_2_;
  ::google::protobuf::uint32 jitter_histogram_5_;
  ::google::protobuf::uint32 jitter_histogram_10_;
  ::google::protobuf::uint32 jitter_histogram_20_;
  ::google::protobuf::uint32 txspeed_max_;
  ::google::protobuf::uint32 txspeed_histogram_16_;
  ::google::protobuf::uint32 txspeed_histogram_32_;
  ::google::protobuf::uint32 txspeed_histogram_64_;
  ::google::protobuf::uint32 txspeed_histogram_128_;
  ::google::protobuf::uint32 txspeed_histogram_256_;
  ::google::protobuf::uint32 txspeed_histogram_512_;
  ::google::protobuf::uint32 txspeed_histogram_1024_;
  ::google::protobuf::uint32 txspeed_histogram_max_;
  ::google::protobuf::uint32 txspeed_ntile_5th_;
  ::google::protobuf::uint32 txspeed_ntile_50th_;
  ::google::protobuf::uint32 txspeed_ntile_75th_;
  ::google::protobuf::uint32 txspeed_ntile_95th_;
  ::google::protobuf::uint32 txspeed_ntile_98th_;
  ::google::protobuf::uint32 rxspeed_max_;
  ::google::protobuf::uint32 rxspeed_histogram_16_;
  ::google::protobuf::uint32 rxspeed_histogram_32_;
  ::google::protobuf::uint32 rxspeed_histogram_64_;
  ::google::protobuf::uint32 rxspeed_histogram_128_;
  ::google::protobuf::uint32 rxspeed_histogram_256_;
  ::google::protobuf::uint32 rxspeed_histogram_512_;
  ::google::protobuf::uint32 rxspeed_histogram_1024_;
  ::google::protobuf::uint32 rxspeed_histogram_max_;
  ::google::protobuf::uint32 rxspeed_ntile_5th_;
  ::google::protobuf::uint32 rxspeed_ntile_50th_;
  ::google::protobuf::uint32 rxspeed_ntile_75th_;
  ::google::protobuf::uint32 rxspeed_ntile_95th_;
  ::google::protobuf::uint32 rxspeed_ntile_98th_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(71 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramLinkLifetimeStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionQuality : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramConnectionQuality();
  virtual ~CMsgSteamDatagramConnectionQuality();

  CMsgSteamDatagramConnectionQuality(const CMsgSteamDatagramConnectionQuality& from);

  inline CMsgSteamDatagramConnectionQuality& operator=(const CMsgSteamDatagramConnectionQuality& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramConnectionQuality& default_instance();

  void Swap(CMsgSteamDatagramConnectionQuality* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramConnectionQuality* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramConnectionQuality& from);
  void MergeFrom(const CMsgSteamDatagramConnectionQuality& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
  inline bool has_instantaneous() const;
  inline void clear_instantaneous();
  static const int kInstantaneousFieldNumber = 1;
  inline const ::CMsgSteamDatagramLinkInstantaneousStats& instantaneous() const;
  inline ::CMsgSteamDatagramLinkInstantaneousStats* mutable_instantaneous();
  inline ::CMsgSteamDatagramLinkInstantaneousStats* release_instantaneous();
  inline void set_allocated_instantaneous(::CMsgSteamDatagramLinkInstantaneousStats* instantaneous);

  // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
  inline bool has_lifetime() const;
  inline void clear_lifetime();
  static const int kLifetimeFieldNumber = 2;
  inline const ::CMsgSteamDatagramLinkLifetimeStats& lifetime() const;
  inline ::CMsgSteamDatagramLinkLifetimeStats* mutable_lifetime();
  inline ::CMsgSteamDatagramLinkLifetimeStats* release_lifetime();
  inline void set_allocated_lifetime(::CMsgSteamDatagramLinkLifetimeStats* lifetime);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramConnectionQuality)
 private:
  inline void set_has_instantaneous();
  inline void clear_has_instantaneous();
  inline void set_has_lifetime();
  inline void clear_has_lifetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgSteamDatagramLinkInstantaneousStats* instantaneous_;
  ::CMsgSteamDatagramLinkLifetimeStats* lifetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramConnectionQuality* default_instance_;
};
// -------------------------------------------------------------------

class CMsgICERendezvous_Auth : public ::google::protobuf::Message {
 public:
  CMsgICERendezvous_Auth();
  virtual ~CMsgICERendezvous_Auth();

  CMsgICERendezvous_Auth(const CMsgICERendezvous_Auth& from);

  inline CMsgICERendezvous_Auth& operator=(const CMsgICERendezvous_Auth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgICERendezvous_Auth& default_instance();

  void Swap(CMsgICERendezvous_Auth* other);

  // implements Message ----------------------------------------------

  CMsgICERendezvous_Auth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgICERendezvous_Auth& from);
  void MergeFrom(const CMsgICERendezvous_Auth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pwd_frag = 1;
  inline bool has_pwd_frag() const;
  inline void clear_pwd_frag();
  static const int kPwdFragFieldNumber = 1;
  inline const ::std::string& pwd_frag() const;
  inline void set_pwd_frag(const ::std::string& value);
  inline void set_pwd_frag(const char* value);
  inline void set_pwd_frag(const char* value, size_t size);
  inline ::std::string* mutable_pwd_frag();
  inline ::std::string* release_pwd_frag();
  inline void set_allocated_pwd_frag(::std::string* pwd_frag);

  // @@protoc_insertion_point(class_scope:CMsgICERendezvous.Auth)
 private:
  inline void set_has_pwd_frag();
  inline void clear_has_pwd_frag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pwd_frag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgICERendezvous_Auth* default_instance_;
};
// -------------------------------------------------------------------

class CMsgICERendezvous_Candidate : public ::google::protobuf::Message {
 public:
  CMsgICERendezvous_Candidate();
  virtual ~CMsgICERendezvous_Candidate();

  CMsgICERendezvous_Candidate(const CMsgICERendezvous_Candidate& from);

  inline CMsgICERendezvous_Candidate& operator=(const CMsgICERendezvous_Candidate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgICERendezvous_Candidate& default_instance();

  void Swap(CMsgICERendezvous_Candidate* other);

  // implements Message ----------------------------------------------

  CMsgICERendezvous_Candidate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgICERendezvous_Candidate& from);
  void MergeFrom(const CMsgICERendezvous_Candidate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string candidate = 3;
  inline bool has_candidate() const;
  inline void clear_candidate();
  static const int kCandidateFieldNumber = 3;
  inline const ::std::string& candidate() const;
  inline void set_candidate(const ::std::string& value);
  inline void set_candidate(const char* value);
  inline void set_candidate(const char* value, size_t size);
  inline ::std::string* mutable_candidate();
  inline ::std::string* release_candidate();
  inline void set_allocated_candidate(::std::string* candidate);

  // @@protoc_insertion_point(class_scope:CMsgICERendezvous.Candidate)
 private:
  inline void set_has_candidate();
  inline void clear_has_candidate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* candidate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgICERendezvous_Candidate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgICERendezvous : public ::google::protobuf::Message {
 public:
  CMsgICERendezvous();
  virtual ~CMsgICERendezvous();

  CMsgICERendezvous(const CMsgICERendezvous& from);

  inline CMsgICERendezvous& operator=(const CMsgICERendezvous& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgICERendezvous& default_instance();

  void Swap(CMsgICERendezvous* other);

  // implements Message ----------------------------------------------

  CMsgICERendezvous* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgICERendezvous& from);
  void MergeFrom(const CMsgICERendezvous& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgICERendezvous_Auth Auth;
  typedef CMsgICERendezvous_Candidate Candidate;

  // accessors -------------------------------------------------------

  // optional .CMsgICERendezvous.Auth auth = 2;
  inline bool has_auth() const;
  inline void clear_auth();
  static const int kAuthFieldNumber = 2;
  inline const ::CMsgICERendezvous_Auth& auth() const;
  inline ::CMsgICERendezvous_Auth* mutable_auth();
  inline ::CMsgICERendezvous_Auth* release_auth();
  inline void set_allocated_auth(::CMsgICERendezvous_Auth* auth);

  // optional .CMsgICERendezvous.Candidate add_candidate = 1;
  inline bool has_add_candidate() const;
  inline void clear_add_candidate();
  static const int kAddCandidateFieldNumber = 1;
  inline const ::CMsgICERendezvous_Candidate& add_candidate() const;
  inline ::CMsgICERendezvous_Candidate* mutable_add_candidate();
  inline ::CMsgICERendezvous_Candidate* release_add_candidate();
  inline void set_allocated_add_candidate(::CMsgICERendezvous_Candidate* add_candidate);

  // @@protoc_insertion_point(class_scope:CMsgICERendezvous)
 private:
  inline void set_has_auth();
  inline void clear_has_auth();
  inline void set_has_add_candidate();
  inline void clear_has_add_candidate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgICERendezvous_Auth* auth_;
  ::CMsgICERendezvous_Candidate* add_candidate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgICERendezvous* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamNetworkingP2PRendezvous_ConnectRequest : public ::google::protobuf::Message {
 public:
  CMsgSteamNetworkingP2PRendezvous_ConnectRequest();
  virtual ~CMsgSteamNetworkingP2PRendezvous_ConnectRequest();

  CMsgSteamNetworkingP2PRendezvous_ConnectRequest(const CMsgSteamNetworkingP2PRendezvous_ConnectRequest& from);

  inline CMsgSteamNetworkingP2PRendezvous_ConnectRequest& operator=(const CMsgSteamNetworkingP2PRendezvous_ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamNetworkingP2PRendezvous_ConnectRequest& default_instance();

  void Swap(CMsgSteamNetworkingP2PRendezvous_ConnectRequest* other);

  // implements Message ----------------------------------------------

  CMsgSteamNetworkingP2PRendezvous_ConnectRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectRequest& from);
  void MergeFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
  inline bool has_crypt() const;
  inline void clear_crypt();
  static const int kCryptFieldNumber = 6;
  inline const ::CMsgSteamDatagramSessionCryptInfoSigned& crypt() const;
  inline ::CMsgSteamDatagramSessionCryptInfoSigned* mutable_crypt();
  inline ::CMsgSteamDatagramSessionCryptInfoSigned* release_crypt();
  inline void set_allocated_crypt(::CMsgSteamDatagramSessionCryptInfoSigned* crypt);

  // optional .CMsgSteamDatagramCertificateSigned cert = 7;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 7;
  inline const ::CMsgSteamDatagramCertificateSigned& cert() const;
  inline ::CMsgSteamDatagramCertificateSigned* mutable_cert();
  inline ::CMsgSteamDatagramCertificateSigned* release_cert();
  inline void set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert);

  // optional uint32 to_virtual_port = 9;
  inline bool has_to_virtual_port() const;
  inline void clear_to_virtual_port();
  static const int kToVirtualPortFieldNumber = 9;
  inline ::google::protobuf::uint32 to_virtual_port() const;
  inline void set_to_virtual_port(::google::protobuf::uint32 value);

  // optional uint32 from_virtual_port = 10;
  inline bool has_from_virtual_port() const;
  inline void clear_from_virtual_port();
  static const int kFromVirtualPortFieldNumber = 10;
  inline ::google::protobuf::uint32 from_virtual_port() const;
  inline void set_from_virtual_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
 private:
  inline void set_has_crypt();
  inline void clear_has_crypt();
  inline void set_has_cert();
  inline void clear_has_cert();
  inline void set_has_to_virtual_port();
  inline void clear_has_to_virtual_port();
  inline void set_has_from_virtual_port();
  inline void clear_has_from_virtual_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgSteamDatagramSessionCryptInfoSigned* crypt_;
  ::CMsgSteamDatagramCertificateSigned* cert_;
  ::google::protobuf::uint32 to_virtual_port_;
  ::google::protobuf::uint32 from_virtual_port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamNetworkingP2PRendezvous_ConnectRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamNetworkingP2PRendezvous_ConnectOK : public ::google::protobuf::Message {
 public:
  CMsgSteamNetworkingP2PRendezvous_ConnectOK();
  virtual ~CMsgSteamNetworkingP2PRendezvous_ConnectOK();

  CMsgSteamNetworkingP2PRendezvous_ConnectOK(const CMsgSteamNetworkingP2PRendezvous_ConnectOK& from);

  inline CMsgSteamNetworkingP2PRendezvous_ConnectOK& operator=(const CMsgSteamNetworkingP2PRendezvous_ConnectOK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamNetworkingP2PRendezvous_ConnectOK& default_instance();

  void Swap(CMsgSteamNetworkingP2PRendezvous_ConnectOK* other);

  // implements Message ----------------------------------------------

  CMsgSteamNetworkingP2PRendezvous_ConnectOK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectOK& from);
  void MergeFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectOK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
  inline bool has_crypt() const;
  inline void clear_crypt();
  static const int kCryptFieldNumber = 5;
  inline const ::CMsgSteamDatagramSessionCryptInfoSigned& crypt() const;
  inline ::CMsgSteamDatagramSessionCryptInfoSigned* mutable_crypt();
  inline ::CMsgSteamDatagramSessionCryptInfoSigned* release_crypt();
  inline void set_allocated_crypt(::CMsgSteamDatagramSessionCryptInfoSigned* crypt);

  // optional .CMsgSteamDatagramCertificateSigned cert = 6;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 6;
  inline const ::CMsgSteamDatagramCertificateSigned& cert() const;
  inline ::CMsgSteamDatagramCertificateSigned* mutable_cert();
  inline ::CMsgSteamDatagramCertificateSigned* release_cert();
  inline void set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert);

  // @@protoc_insertion_point(class_scope:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
 private:
  inline void set_has_crypt();
  inline void clear_has_crypt();
  inline void set_has_cert();
  inline void clear_has_cert();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgSteamDatagramSessionCryptInfoSigned* crypt_;
  ::CMsgSteamDatagramCertificateSigned* cert_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamNetworkingP2PRendezvous_ConnectOK* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamNetworkingP2PRendezvous_ConnectionClosed : public ::google::protobuf::Message {
 public:
  CMsgSteamNetworkingP2PRendezvous_ConnectionClosed();
  virtual ~CMsgSteamNetworkingP2PRendezvous_ConnectionClosed();

  CMsgSteamNetworkingP2PRendezvous_ConnectionClosed(const CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& from);

  inline CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& operator=(const CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& default_instance();

  void Swap(CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* other);

  // implements Message ----------------------------------------------

  CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& from);
  void MergeFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string debug = 5;
  inline bool has_debug() const;
  inline void clear_debug();
  static const int kDebugFieldNumber = 5;
  inline const ::std::string& debug() const;
  inline void set_debug(const ::std::string& value);
  inline void set_debug(const char* value);
  inline void set_debug(const char* value, size_t size);
  inline ::std::string* mutable_debug();
  inline ::std::string* release_debug();
  inline void set_allocated_debug(::std::string* debug);

  // optional uint32 reason_code = 6;
  inline bool has_reason_code() const;
  inline void clear_reason_code();
  static const int kReasonCodeFieldNumber = 6;
  inline ::google::protobuf::uint32 reason_code() const;
  inline void set_reason_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
 private:
  inline void set_has_debug();
  inline void clear_has_debug();
  inline void set_has_reason_code();
  inline void clear_has_reason_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* debug_;
  ::google::protobuf::uint32 reason_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamNetworkingP2PRendezvous_ReliableMessage : public ::google::protobuf::Message {
 public:
  CMsgSteamNetworkingP2PRendezvous_ReliableMessage();
  virtual ~CMsgSteamNetworkingP2PRendezvous_ReliableMessage();

  CMsgSteamNetworkingP2PRendezvous_ReliableMessage(const CMsgSteamNetworkingP2PRendezvous_ReliableMessage& from);

  inline CMsgSteamNetworkingP2PRendezvous_ReliableMessage& operator=(const CMsgSteamNetworkingP2PRendezvous_ReliableMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamNetworkingP2PRendezvous_ReliableMessage& default_instance();

  void Swap(CMsgSteamNetworkingP2PRendezvous_ReliableMessage* other);

  // implements Message ----------------------------------------------

  CMsgSteamNetworkingP2PRendezvous_ReliableMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamNetworkingP2PRendezvous_ReliableMessage& from);
  void MergeFrom(const CMsgSteamNetworkingP2PRendezvous_ReliableMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgICERendezvous ice = 1;
  inline bool has_ice() const;
  inline void clear_ice();
  static const int kIceFieldNumber = 1;
  inline const ::CMsgICERendezvous& ice() const;
  inline ::CMsgICERendezvous* mutable_ice();
  inline ::CMsgICERendezvous* release_ice();
  inline void set_allocated_ice(::CMsgICERendezvous* ice);

  // @@protoc_insertion_point(class_scope:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
 private:
  inline void set_has_ice();
  inline void clear_has_ice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgICERendezvous* ice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamNetworkingP2PRendezvous_ReliableMessage* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamNetworkingP2PRendezvous : public ::google::protobuf::Message {
 public:
  CMsgSteamNetworkingP2PRendezvous();
  virtual ~CMsgSteamNetworkingP2PRendezvous();

  CMsgSteamNetworkingP2PRendezvous(const CMsgSteamNetworkingP2PRendezvous& from);

  inline CMsgSteamNetworkingP2PRendezvous& operator=(const CMsgSteamNetworkingP2PRendezvous& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamNetworkingP2PRendezvous& default_instance();

  void Swap(CMsgSteamNetworkingP2PRendezvous* other);

  // implements Message ----------------------------------------------

  CMsgSteamNetworkingP2PRendezvous* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamNetworkingP2PRendezvous& from);
  void MergeFrom(const CMsgSteamNetworkingP2PRendezvous& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamNetworkingP2PRendezvous_ConnectRequest ConnectRequest;
  typedef CMsgSteamNetworkingP2PRendezvous_ConnectOK ConnectOK;
  typedef CMsgSteamNetworkingP2PRendezvous_ConnectionClosed ConnectionClosed;
  typedef CMsgSteamNetworkingP2PRendezvous_ReliableMessage ReliableMessage;

  // accessors -------------------------------------------------------

  // optional string from_identity = 8;
  inline bool has_from_identity() const;
  inline void clear_from_identity();
  static const int kFromIdentityFieldNumber = 8;
  inline const ::std::string& from_identity() const;
  inline void set_from_identity(const ::std::string& value);
  inline void set_from_identity(const char* value);
  inline void set_from_identity(const char* value, size_t size);
  inline ::std::string* mutable_from_identity();
  inline ::std::string* release_from_identity();
  inline void set_allocated_from_identity(::std::string* from_identity);

  // optional fixed32 from_connection_id = 9;
  inline bool has_from_connection_id() const;
  inline void clear_from_connection_id();
  static const int kFromConnectionIdFieldNumber = 9;
  inline ::google::protobuf::uint32 from_connection_id() const;
  inline void set_from_connection_id(::google::protobuf::uint32 value);

  // optional string to_identity = 10;
  inline bool has_to_identity() const;
  inline void clear_to_identity();
  static const int kToIdentityFieldNumber = 10;
  inline const ::std::string& to_identity() const;
  inline void set_to_identity(const ::std::string& value);
  inline void set_to_identity(const char* value);
  inline void set_to_identity(const char* value, size_t size);
  inline ::std::string* mutable_to_identity();
  inline ::std::string* release_to_identity();
  inline void set_allocated_to_identity(::std::string* to_identity);

  // optional fixed32 to_connection_id = 1;
  inline bool has_to_connection_id() const;
  inline void clear_to_connection_id();
  static const int kToConnectionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 to_connection_id() const;
  inline void set_to_connection_id(::google::protobuf::uint32 value);

  // optional bytes sdr_routes = 2;
  inline bool has_sdr_routes() const;
  inline void clear_sdr_routes();
  static const int kSdrRoutesFieldNumber = 2;
  inline const ::std::string& sdr_routes() const;
  inline void set_sdr_routes(const ::std::string& value);
  inline void set_sdr_routes(const char* value);
  inline void set_sdr_routes(const void* value, size_t size);
  inline ::std::string* mutable_sdr_routes();
  inline ::std::string* release_sdr_routes();
  inline void set_allocated_sdr_routes(::std::string* sdr_routes);

  // optional uint32 ack_peer_routes_revision = 3;
  inline bool has_ack_peer_routes_revision() const;
  inline void clear_ack_peer_routes_revision();
  static const int kAckPeerRoutesRevisionFieldNumber = 3;
  inline ::google::protobuf::uint32 ack_peer_routes_revision() const;
  inline void set_ack_peer_routes_revision(::google::protobuf::uint32 value);

  // optional bool ice_enabled = 7;
  inline bool has_ice_enabled() const;
  inline void clear_ice_enabled();
  static const int kIceEnabledFieldNumber = 7;
  inline bool ice_enabled() const;
  inline void set_ice_enabled(bool value);

  // optional .CMsgSteamNetworkingP2PRendezvous.ConnectRequest connect_request = 4;
  inline bool has_connect_request() const;
  inline void clear_connect_request();
  static const int kConnectRequestFieldNumber = 4;
  inline const ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest& connect_request() const;
  inline ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest* mutable_connect_request();
  inline ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest* release_connect_request();
  inline void set_allocated_connect_request(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest* connect_request);

  // optional .CMsgSteamNetworkingP2PRendezvous.ConnectOK connect_ok = 5;
  inline bool has_connect_ok() const;
  inline void clear_connect_ok();
  static const int kConnectOkFieldNumber = 5;
  inline const ::CMsgSteamNetworkingP2PRendezvous_ConnectOK& connect_ok() const;
  inline ::CMsgSteamNetworkingP2PRendezvous_ConnectOK* mutable_connect_ok();
  inline ::CMsgSteamNetworkingP2PRendezvous_ConnectOK* release_connect_ok();
  inline void set_allocated_connect_ok(::CMsgSteamNetworkingP2PRendezvous_ConnectOK* connect_ok);

  // optional .CMsgSteamNetworkingP2PRendezvous.ConnectionClosed connection_closed = 6;
  inline bool has_connection_closed() const;
  inline void clear_connection_closed();
  static const int kConnectionClosedFieldNumber = 6;
  inline const ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& connection_closed() const;
  inline ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* mutable_connection_closed();
  inline ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* release_connection_closed();
  inline void set_allocated_connection_closed(::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* connection_closed);

  // optional uint32 ack_reliable_msg = 11;
  inline bool has_ack_reliable_msg() const;
  inline void clear_ack_reliable_msg();
  static const int kAckReliableMsgFieldNumber = 11;
  inline ::google::protobuf::uint32 ack_reliable_msg() const;
  inline void set_ack_reliable_msg(::google::protobuf::uint32 value);

  // optional uint32 first_reliable_msg = 12;
  inline bool has_first_reliable_msg() const;
  inline void clear_first_reliable_msg();
  static const int kFirstReliableMsgFieldNumber = 12;
  inline ::google::protobuf::uint32 first_reliable_msg() const;
  inline void set_first_reliable_msg(::google::protobuf::uint32 value);

  // repeated .CMsgSteamNetworkingP2PRendezvous.ReliableMessage reliable_messages = 13;
  inline int reliable_messages_size() const;
  inline void clear_reliable_messages();
  static const int kReliableMessagesFieldNumber = 13;
  inline const ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage& reliable_messages(int index) const;
  inline ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage* mutable_reliable_messages(int index);
  inline ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage* add_reliable_messages();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage >&
      reliable_messages() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage >*
      mutable_reliable_messages();

  // @@protoc_insertion_point(class_scope:CMsgSteamNetworkingP2PRendezvous)
 private:
  inline void set_has_from_identity();
  inline void clear_has_from_identity();
  inline void set_has_from_connection_id();
  inline void clear_has_from_connection_id();
  inline void set_has_to_identity();
  inline void clear_has_to_identity();
  inline void set_has_to_connection_id();
  inline void clear_has_to_connection_id();
  inline void set_has_sdr_routes();
  inline void clear_has_sdr_routes();
  inline void set_has_ack_peer_routes_revision();
  inline void clear_has_ack_peer_routes_revision();
  inline void set_has_ice_enabled();
  inline void clear_has_ice_enabled();
  inline void set_has_connect_request();
  inline void clear_has_connect_request();
  inline void set_has_connect_ok();
  inline void clear_has_connect_ok();
  inline void set_has_connection_closed();
  inline void clear_has_connection_closed();
  inline void set_has_ack_reliable_msg();
  inline void clear_has_ack_reliable_msg();
  inline void set_has_first_reliable_msg();
  inline void clear_has_first_reliable_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* from_identity_;
  ::std::string* to_identity_;
  ::google::protobuf::uint32 from_connection_id_;
  ::google::protobuf::uint32 to_connection_id_;
  ::std::string* sdr_routes_;
  ::google::protobuf::uint32 ack_peer_routes_revision_;
  bool ice_enabled_;
  ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest* connect_request_;
  ::CMsgSteamNetworkingP2PRendezvous_ConnectOK* connect_ok_;
  ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* connection_closed_;
  ::google::protobuf::uint32 ack_reliable_msg_;
  ::google::protobuf::uint32 first_reliable_msg_;
  ::google::protobuf::RepeatedPtrField< ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage > reliable_messages_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamNetworkingP2PRendezvous* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamNetworkingICESessionSummary : public ::google::protobuf::Message {
 public:
  CMsgSteamNetworkingICESessionSummary();
  virtual ~CMsgSteamNetworkingICESessionSummary();

  CMsgSteamNetworkingICESessionSummary(const CMsgSteamNetworkingICESessionSummary& from);

  inline CMsgSteamNetworkingICESessionSummary& operator=(const CMsgSteamNetworkingICESessionSummary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamNetworkingICESessionSummary& default_instance();

  void Swap(CMsgSteamNetworkingICESessionSummary* other);

  // implements Message ----------------------------------------------

  CMsgSteamNetworkingICESessionSummary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamNetworkingICESessionSummary& from);
  void MergeFrom(const CMsgSteamNetworkingICESessionSummary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 failure_reason_code = 7;
  inline bool has_failure_reason_code() const;
  inline void clear_failure_reason_code();
  static const int kFailureReasonCodeFieldNumber = 7;
  inline ::google::protobuf::uint32 failure_reason_code() const;
  inline void set_failure_reason_code(::google::protobuf::uint32 value);

  // optional uint32 local_candidate_types = 1;
  inline bool has_local_candidate_types() const;
  inline void clear_local_candidate_types();
  static const int kLocalCandidateTypesFieldNumber = 1;
  inline ::google::protobuf::uint32 local_candidate_types() const;
  inline void set_local_candidate_types(::google::protobuf::uint32 value);

  // optional uint32 remote_candidate_types = 2;
  inline bool has_remote_candidate_types() const;
  inline void clear_remote_candidate_types();
  static const int kRemoteCandidateTypesFieldNumber = 2;
  inline ::google::protobuf::uint32 remote_candidate_types() const;
  inline void set_remote_candidate_types(::google::protobuf::uint32 value);

  // optional uint32 initial_route_kind = 3;
  inline bool has_initial_route_kind() const;
  inline void clear_initial_route_kind();
  static const int kInitialRouteKindFieldNumber = 3;
  inline ::google::protobuf::uint32 initial_route_kind() const;
  inline void set_initial_route_kind(::google::protobuf::uint32 value);

  // optional uint32 initial_ping = 4;
  inline bool has_initial_ping() const;
  inline void clear_initial_ping();
  static const int kInitialPingFieldNumber = 4;
  inline ::google::protobuf::uint32 initial_ping() const;
  inline void set_initial_ping(::google::protobuf::uint32 value);

  // optional uint32 initial_score = 6;
  inline bool has_initial_score() const;
  inline void clear_initial_score();
  static const int kInitialScoreFieldNumber = 6;
  inline ::google::protobuf::uint32 initial_score() const;
  inline void set_initial_score(::google::protobuf::uint32 value);

  // optional uint32 negotiation_ms = 5;
  inline bool has_negotiation_ms() const;
  inline void clear_negotiation_ms();
  static const int kNegotiationMsFieldNumber = 5;
  inline ::google::protobuf::uint32 negotiation_ms() const;
  inline void set_negotiation_ms(::google::protobuf::uint32 value);

  // optional uint32 selected_seconds = 12;
  inline bool has_selected_seconds() const;
  inline void clear_selected_seconds();
  static const int kSelectedSecondsFieldNumber = 12;
  inline ::google::protobuf::uint32 selected_seconds() const;
  inline void set_selected_seconds(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamNetworkingICESessionSummary)
 private:
  inline void set_has_failure_reason_code();
  inline void clear_has_failure_reason_code();
  inline void set_has_local_candidate_types();
  inline void clear_has_local_candidate_types();
  inline void set_has_remote_candidate_types();
  inline void clear_has_remote_candidate_types();
  inline void set_has_initial_route_kind();
  inline void clear_has_initial_route_kind();
  inline void set_has_initial_ping();
  inline void clear_has_initial_ping();
  inline void set_has_initial_score();
  inline void clear_has_initial_score();
  inline void set_has_negotiation_ms();
  inline void clear_has_negotiation_ms();
  inline void set_has_selected_seconds();
  inline void clear_has_selected_seconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 failure_reason_code_;
  ::google::protobuf::uint32 local_candidate_types_;
  ::google::protobuf::uint32 remote_candidate_types_;
  ::google::protobuf::uint32 initial_route_kind_;
  ::google::protobuf::uint32 initial_ping_;
  ::google::protobuf::uint32 initial_score_;
  ::google::protobuf::uint32 negotiation_ms_;
  ::google::protobuf::uint32 selected_seconds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamNetworkingICESessionSummary* default_instance_;
};
// ===================================================================


// ===================================================================

// CMsgSteamDatagramSessionCryptInfo

// optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];
inline bool CMsgSteamDatagramSessionCryptInfo::has_key_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfo::set_has_key_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_has_key_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_key_type() {
  key_type_ = 0;
  clear_has_key_type();
}
inline ::CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::key_type() const {
  return static_cast< ::CMsgSteamDatagramSessionCryptInfo_EKeyType >(key_type_);
}
inline void CMsgSteamDatagramSessionCryptInfo::set_key_type(::CMsgSteamDatagramSessionCryptInfo_EKeyType value) {
  assert(::CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(value));
  set_has_key_type();
  key_type_ = value;
}

// optional bytes key_data = 2;
inline bool CMsgSteamDatagramSessionCryptInfo::has_key_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfo::set_has_key_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_has_key_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_key_data() {
  if (key_data_ != &::google::protobuf::internal::kEmptyString) {
    key_data_->clear();
  }
  clear_has_key_data();
}
inline const ::std::string& CMsgSteamDatagramSessionCryptInfo::key_data() const {
  return *key_data_;
}
inline void CMsgSteamDatagramSessionCryptInfo::set_key_data(const ::std::string& value) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(value);
}
inline void CMsgSteamDatagramSessionCryptInfo::set_key_data(const char* value) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(value);
}
inline void CMsgSteamDatagramSessionCryptInfo::set_key_data(const void* value, size_t size) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramSessionCryptInfo::mutable_key_data() {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  return key_data_;
}
inline ::std::string* CMsgSteamDatagramSessionCryptInfo::release_key_data() {
  clear_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_data_;
    key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramSessionCryptInfo::set_allocated_key_data(::std::string* key_data) {
  if (key_data_ != &::google::protobuf::internal::kEmptyString) {
    delete key_data_;
  }
  if (key_data) {
    set_has_key_data();
    key_data_ = key_data;
  } else {
    clear_has_key_data();
    key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed64 nonce = 3;
inline bool CMsgSteamDatagramSessionCryptInfo::has_nonce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfo::set_has_nonce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_nonce() {
  nonce_ = GOOGLE_ULONGLONG(0);
  clear_has_nonce();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramSessionCryptInfo::nonce() const {
  return nonce_;
}
inline void CMsgSteamDatagramSessionCryptInfo::set_nonce(::google::protobuf::uint64 value) {
  set_has_nonce();
  nonce_ = value;
}

// optional uint32 protocol_version = 4;
inline bool CMsgSteamDatagramSessionCryptInfo::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfo::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramSessionCryptInfo::protocol_version() const {
  return protocol_version_;
}
inline void CMsgSteamDatagramSessionCryptInfo::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
}

// repeated .ESteamNetworkingSocketsCipher ciphers = 5;
inline int CMsgSteamDatagramSessionCryptInfo::ciphers_size() const {
  return ciphers_.size();
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_ciphers() {
  ciphers_.Clear();
}
inline ::ESteamNetworkingSocketsCipher CMsgSteamDatagramSessionCryptInfo::ciphers(int index) const {
  return static_cast< ::ESteamNetworkingSocketsCipher >(ciphers_.Get(index));
}
inline void CMsgSteamDatagramSessionCryptInfo::set_ciphers(int index, ::ESteamNetworkingSocketsCipher value) {
  assert(::ESteamNetworkingSocketsCipher_IsValid(value));
  ciphers_.Set(index, value);
}
inline void CMsgSteamDatagramSessionCryptInfo::add_ciphers(::ESteamNetworkingSocketsCipher value) {
  assert(::ESteamNetworkingSocketsCipher_IsValid(value));
  ciphers_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
CMsgSteamDatagramSessionCryptInfo::ciphers() const {
  return ciphers_;
}
inline ::google::protobuf::RepeatedField<int>*
CMsgSteamDatagramSessionCryptInfo::mutable_ciphers() {
  return &ciphers_;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramSessionCryptInfoSigned

// optional bytes info = 1;
inline bool CMsgSteamDatagramSessionCryptInfoSigned::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& CMsgSteamDatagramSessionCryptInfoSigned::info() const {
  return *info_;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_info(const void* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramSessionCryptInfoSigned::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* CMsgSteamDatagramSessionCryptInfoSigned::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes signature = 2;
inline bool CMsgSteamDatagramSessionCryptInfoSigned::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& CMsgSteamDatagramSessionCryptInfoSigned::signature() const {
  return *signature_;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramSessionCryptInfoSigned::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* CMsgSteamDatagramSessionCryptInfoSigned::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgSteamDatagramDiagnostic

// optional uint32 severity = 1;
inline bool CMsgSteamDatagramDiagnostic::has_severity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramDiagnostic::set_has_severity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramDiagnostic::clear_has_severity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramDiagnostic::clear_severity() {
  severity_ = 0u;
  clear_has_severity();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramDiagnostic::severity() const {
  return severity_;
}
inline void CMsgSteamDatagramDiagnostic::set_severity(::google::protobuf::uint32 value) {
  set_has_severity();
  severity_ = value;
}

// optional string text = 2;
inline bool CMsgSteamDatagramDiagnostic::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramDiagnostic::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramDiagnostic::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramDiagnostic::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& CMsgSteamDatagramDiagnostic::text() const {
  return *text_;
}
inline void CMsgSteamDatagramDiagnostic::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgSteamDatagramDiagnostic::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgSteamDatagramDiagnostic::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramDiagnostic::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* CMsgSteamDatagramDiagnostic::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramDiagnostic::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgSteamDatagramLinkInstantaneousStats

// optional uint32 out_packets_per_sec_x10 = 1;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_out_packets_per_sec_x10() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_has_out_packets_per_sec_x10() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_has_out_packets_per_sec_x10() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_out_packets_per_sec_x10() {
  out_packets_per_sec_x10_ = 0u;
  clear_has_out_packets_per_sec_x10();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkInstantaneousStats::out_packets_per_sec_x10() const {
  return out_packets_per_sec_x10_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_out_packets_per_sec_x10(::google::protobuf::uint32 value) {
  set_has_out_packets_per_sec_x10();
  out_packets_per_sec_x10_ = value;
}

// optional uint32 out_bytes_per_sec = 2;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_out_bytes_per_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_has_out_bytes_per_sec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_has_out_bytes_per_sec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_out_bytes_per_sec() {
  out_bytes_per_sec_ = 0u;
  clear_has_out_bytes_per_sec();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkInstantaneousStats::out_bytes_per_sec() const {
  return out_bytes_per_sec_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_out_bytes_per_sec(::google::protobuf::uint32 value) {
  set_has_out_bytes_per_sec();
  out_bytes_per_sec_ = value;
}

// optional uint32 in_packets_per_sec_x10 = 3;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_in_packets_per_sec_x10() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_has_in_packets_per_sec_x10() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_has_in_packets_per_sec_x10() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_in_packets_per_sec_x10() {
  in_packets_per_sec_x10_ = 0u;
  clear_has_in_packets_per_sec_x10();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkInstantaneousStats::in_packets_per_sec_x10() const {
  return in_packets_per_sec_x10_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_in_packets_per_sec_x10(::google::protobuf::uint32 value) {
  set_has_in_packets_per_sec_x10();
  in_packets_per_sec_x10_ = value;
}

// optional uint32 in_bytes_per_sec = 4;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_in_bytes_per_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_has_in_bytes_per_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_has_in_bytes_per_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_in_bytes_per_sec() {
  in_bytes_per_sec_ = 0u;
  clear_has_in_bytes_per_sec();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkInstantaneousStats::in_bytes_per_sec() const {
  return in_bytes_per_sec_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_in_bytes_per_sec(::google::protobuf::uint32 value) {
  set_has_in_bytes_per_sec();
  in_bytes_per_sec_ = value;
}

// optional uint32 ping_ms = 5;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_ping_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_has_ping_ms() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_has_ping_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_ping_ms() {
  ping_ms_ = 0u;
  clear_has_ping_ms();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkInstantaneousStats::ping_ms() const {
  return ping_ms_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_ping_ms(::google::protobuf::uint32 value) {
  set_has_ping_ms();
  ping_ms_ = value;
}

// optional uint32 packets_dropped_pct = 6;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_packets_dropped_pct() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_has_packets_dropped_pct() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_has_packets_dropped_pct() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_packets_dropped_pct() {
  packets_dropped_pct_ = 0u;
  clear_has_packets_dropped_pct();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkInstantaneousStats::packets_dropped_pct() const {
  return packets_dropped_pct_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_packets_dropped_pct(::google::protobuf::uint32 value) {
  set_has_packets_dropped_pct();
  packets_dropped_pct_ = value;
}

// optional uint32 packets_weird_sequence_pct = 7;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_packets_weird_sequence_pct() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_has_packets_weird_sequence_pct() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_has_packets_weird_sequence_pct() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_packets_weird_sequence_pct() {
  packets_weird_sequence_pct_ = 0u;
  clear_has_packets_weird_sequence_pct();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkInstantaneousStats::packets_weird_sequence_pct() const {
  return packets_weird_sequence_pct_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_packets_weird_sequence_pct(::google::protobuf::uint32 value) {
  set_has_packets_weird_sequence_pct();
  packets_weird_sequence_pct_ = value;
}

// optional uint32 peak_jitter_usec = 8;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_peak_jitter_usec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_has_peak_jitter_usec() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_has_peak_jitter_usec() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_peak_jitter_usec() {
  peak_jitter_usec_ = 0u;
  clear_has_peak_jitter_usec();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkInstantaneousStats::peak_jitter_usec() const {
  return peak_jitter_usec_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_peak_jitter_usec(::google::protobuf::uint32 value) {
  set_has_peak_jitter_usec();
  peak_jitter_usec_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramLinkLifetimeStats

// optional uint32 connected_seconds = 2;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_connected_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_connected_seconds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_connected_seconds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_connected_seconds() {
  connected_seconds_ = 0u;
  clear_has_connected_seconds();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::connected_seconds() const {
  return connected_seconds_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_connected_seconds(::google::protobuf::uint32 value) {
  set_has_connected_seconds();
  connected_seconds_ = value;
}

// optional uint64 packets_sent = 3;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_sent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_packets_sent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_packets_sent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_sent() {
  packets_sent_ = GOOGLE_ULONGLONG(0);
  clear_has_packets_sent();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_sent() const {
  return packets_sent_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_sent(::google::protobuf::uint64 value) {
  set_has_packets_sent();
  packets_sent_ = value;
}

// optional uint64 kb_sent = 4;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_kb_sent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_kb_sent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_kb_sent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_kb_sent() {
  kb_sent_ = GOOGLE_ULONGLONG(0);
  clear_has_kb_sent();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::kb_sent() const {
  return kb_sent_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_kb_sent(::google::protobuf::uint64 value) {
  set_has_kb_sent();
  kb_sent_ = value;
}

// optional uint64 packets_recv = 5;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_packets_recv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_packets_recv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv() {
  packets_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_packets_recv();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv() const {
  return packets_recv_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv(::google::protobuf::uint64 value) {
  set_has_packets_recv();
  packets_recv_ = value;
}

// optional uint64 kb_recv = 6;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_kb_recv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_kb_recv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_kb_recv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_kb_recv() {
  kb_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_kb_recv();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::kb_recv() const {
  return kb_recv_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_kb_recv(::google::protobuf::uint64 value) {
  set_has_kb_recv();
  kb_recv_ = value;
}

// optional uint64 packets_recv_sequenced = 7;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv_sequenced() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_packets_recv_sequenced() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_packets_recv_sequenced() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv_sequenced() {
  packets_recv_sequenced_ = GOOGLE_ULONGLONG(0);
  clear_has_packets_recv_sequenced();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv_sequenced() const {
  return packets_recv_sequenced_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv_sequenced(::google::protobuf::uint64 value) {
  set_has_packets_recv_sequenced();
  packets_recv_sequenced_ = value;
}

// optional uint64 packets_recv_dropped = 8;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv_dropped() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_packets_recv_dropped() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_packets_recv_dropped() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv_dropped() {
  packets_recv_dropped_ = GOOGLE_ULONGLONG(0);
  clear_has_packets_recv_dropped();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv_dropped() const {
  return packets_recv_dropped_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv_dropped(::google::protobuf::uint64 value) {
  set_has_packets_recv_dropped();
  packets_recv_dropped_ = value;
}

// optional uint64 packets_recv_out_of_order = 9;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv_out_of_order() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_packets_recv_out_of_order() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_packets_recv_out_of_order() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv_out_of_order() {
  packets_recv_out_of_order_ = GOOGLE_ULONGLONG(0);
  clear_has_packets_recv_out_of_order();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv_out_of_order() const {
  return packets_recv_out_of_order_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv_out_of_order(::google::protobuf::uint64 value) {
  set_has_packets_recv_out_of_order();
  packets_recv_out_of_order_ = value;
}

// optional uint64 packets_recv_duplicate = 10;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv_duplicate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_packets_recv_duplicate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_packets_recv_duplicate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv_duplicate() {
  packets_recv_duplicate_ = GOOGLE_ULONGLONG(0);
  clear_has_packets_recv_duplicate();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv_duplicate() const {
  return packets_recv_duplicate_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv_duplicate(::google::protobuf::uint64 value) {
  set_has_packets_recv_duplicate();
  packets_recv_duplicate_ = value;
}

// optional uint64 packets_recv_lurch = 11;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv_lurch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_packets_recv_lurch() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_packets_recv_lurch() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv_lurch() {
  packets_recv_lurch_ = GOOGLE_ULONGLONG(0);
  clear_has_packets_recv_lurch();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv_lurch() const {
  return packets_recv_lurch_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv_lurch(::google::protobuf::uint64 value) {
  set_has_packets_recv_lurch();
  packets_recv_lurch_ = value;
}

// optional uint32 quality_histogram_100 = 21;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_100() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_100() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_100() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_100() {
  quality_histogram_100_ = 0u;
  clear_has_quality_histogram_100();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_100() const {
  return quality_histogram_100_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_100(::google::protobuf::uint32 value) {
  set_has_quality_histogram_100();
  quality_histogram_100_ = value;
}

// optional uint32 quality_histogram_99 = 22;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_99() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_99() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_99() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_99() {
  quality_histogram_99_ = 0u;
  clear_has_quality_histogram_99();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_99() const {
  return quality_histogram_99_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_99(::google::protobuf::uint32 value) {
  set_has_quality_histogram_99();
  quality_histogram_99_ = value;
}

// optional uint32 quality_histogram_97 = 23;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_97() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_97() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_97() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_97() {
  quality_histogram_97_ = 0u;
  clear_has_quality_histogram_97();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_97() const {
  return quality_histogram_97_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_97(::google::protobuf::uint32 value) {
  set_has_quality_histogram_97();
  quality_histogram_97_ = value;
}

// optional uint32 quality_histogram_95 = 24;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_95() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_95() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_95() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_95() {
  quality_histogram_95_ = 0u;
  clear_has_quality_histogram_95();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_95() const {
  return quality_histogram_95_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_95(::google::protobuf::uint32 value) {
  set_has_quality_histogram_95();
  quality_histogram_95_ = value;
}

// optional uint32 quality_histogram_90 = 25;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_90() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_90() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_90() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_90() {
  quality_histogram_90_ = 0u;
  clear_has_quality_histogram_90();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_90() const {
  return quality_histogram_90_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_90(::google::protobuf::uint32 value) {
  set_has_quality_histogram_90();
  quality_histogram_90_ = value;
}

// optional uint32 quality_histogram_75 = 26;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_75() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_75() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_75() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_75() {
  quality_histogram_75_ = 0u;
  clear_has_quality_histogram_75();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_75() const {
  return quality_histogram_75_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_75(::google::protobuf::uint32 value) {
  set_has_quality_histogram_75();
  quality_histogram_75_ = value;
}

// optional uint32 quality_histogram_50 = 27;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_50() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_50() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_50() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_50() {
  quality_histogram_50_ = 0u;
  clear_has_quality_histogram_50();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_50() const {
  return quality_histogram_50_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_50(::google::protobuf::uint32 value) {
  set_has_quality_histogram_50();
  quality_histogram_50_ = value;
}

// optional uint32 quality_histogram_1 = 28;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_1() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_1() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_1() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_1() {
  quality_histogram_1_ = 0u;
  clear_has_quality_histogram_1();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_1() const {
  return quality_histogram_1_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_1(::google::protobuf::uint32 value) {
  set_has_quality_histogram_1();
  quality_histogram_1_ = value;
}

// optional uint32 quality_histogram_dead = 29;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_dead() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_dead() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_dead() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_dead() {
  quality_histogram_dead_ = 0u;
  clear_has_quality_histogram_dead();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_dead() const {
  return quality_histogram_dead_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_dead(::google::protobuf::uint32 value) {
  set_has_quality_histogram_dead();
  quality_histogram_dead_ = value;
}

// optional uint32 quality_ntile_2nd = 30;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_ntile_2nd() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_ntile_2nd() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_ntile_2nd() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_ntile_2nd() {
  quality_ntile_2nd_ = 0u;
  clear_has_quality_ntile_2nd();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_ntile_2nd() const {
  return quality_ntile_2nd_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_ntile_2nd(::google::protobuf::uint32 value) {
  set_has_quality_ntile_2nd();
  quality_ntile_2nd_ = value;
}

// optional uint32 quality_ntile_5th = 31;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_ntile_5th() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_ntile_5th() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_ntile_5th() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_ntile_5th() {
  quality_ntile_5th_ = 0u;
  clear_has_quality_ntile_5th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_ntile_5th() const {
  return quality_ntile_5th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_ntile_5th(::google::protobuf::uint32 value) {
  set_has_quality_ntile_5th();
  quality_ntile_5th_ = value;
}

// optional uint32 quality_ntile_25th = 32;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_ntile_25th() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_ntile_25th() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_ntile_25th() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_ntile_25th() {
  quality_ntile_25th_ = 0u;
  clear_has_quality_ntile_25th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_ntile_25th() const {
  return quality_ntile_25th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_ntile_25th(::google::protobuf::uint32 value) {
  set_has_quality_ntile_25th();
  quality_ntile_25th_ = value;
}

// optional uint32 quality_ntile_50th = 33;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_ntile_50th() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_ntile_50th() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_ntile_50th() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_ntile_50th() {
  quality_ntile_50th_ = 0u;
  clear_has_quality_ntile_50th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_ntile_50th() const {
  return quality_ntile_50th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_ntile_50th(::google::protobuf::uint32 value) {
  set_has_quality_ntile_50th();
  quality_ntile_50th_ = value;
}

// optional uint32 ping_histogram_25 = 41;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_25() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_25() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_25() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_25() {
  ping_histogram_25_ = 0u;
  clear_has_ping_histogram_25();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_25() const {
  return ping_histogram_25_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_25(::google::protobuf::uint32 value) {
  set_has_ping_histogram_25();
  ping_histogram_25_ = value;
}

// optional uint32 ping_histogram_50 = 42;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_50() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_50() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_50() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_50() {
  ping_histogram_50_ = 0u;
  clear_has_ping_histogram_50();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_50() const {
  return ping_histogram_50_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_50(::google::protobuf::uint32 value) {
  set_has_ping_histogram_50();
  ping_histogram_50_ = value;
}

// optional uint32 ping_histogram_75 = 43;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_75() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_75() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_75() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_75() {
  ping_histogram_75_ = 0u;
  clear_has_ping_histogram_75();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_75() const {
  return ping_histogram_75_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_75(::google::protobuf::uint32 value) {
  set_has_ping_histogram_75();
  ping_histogram_75_ = value;
}

// optional uint32 ping_histogram_100 = 44;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_100() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_100() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_100() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_100() {
  ping_histogram_100_ = 0u;
  clear_has_ping_histogram_100();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_100() const {
  return ping_histogram_100_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_100(::google::protobuf::uint32 value) {
  set_has_ping_histogram_100();
  ping_histogram_100_ = value;
}

// optional uint32 ping_histogram_125 = 45;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_125() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_125() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_125() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_125() {
  ping_histogram_125_ = 0u;
  clear_has_ping_histogram_125();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_125() const {
  return ping_histogram_125_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_125(::google::protobuf::uint32 value) {
  set_has_ping_histogram_125();
  ping_histogram_125_ = value;
}

// optional uint32 ping_histogram_150 = 46;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_150() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_150() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_150() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_150() {
  ping_histogram_150_ = 0u;
  clear_has_ping_histogram_150();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_150() const {
  return ping_histogram_150_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_150(::google::protobuf::uint32 value) {
  set_has_ping_histogram_150();
  ping_histogram_150_ = value;
}

// optional uint32 ping_histogram_200 = 47;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_200() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_200() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_200() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_200() {
  ping_histogram_200_ = 0u;
  clear_has_ping_histogram_200();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_200() const {
  return ping_histogram_200_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_200(::google::protobuf::uint32 value) {
  set_has_ping_histogram_200();
  ping_histogram_200_ = value;
}

// optional uint32 ping_histogram_300 = 48;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_300() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_300() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_300() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_300() {
  ping_histogram_300_ = 0u;
  clear_has_ping_histogram_300();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_300() const {
  return ping_histogram_300_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_300(::google::protobuf::uint32 value) {
  set_has_ping_histogram_300();
  ping_histogram_300_ = value;
}

// optional uint32 ping_histogram_max = 49;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_max() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_max() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_max() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_max() {
  ping_histogram_max_ = 0u;
  clear_has_ping_histogram_max();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_max() const {
  return ping_histogram_max_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_max(::google::protobuf::uint32 value) {
  set_has_ping_histogram_max();
  ping_histogram_max_ = value;
}

// optional uint32 ping_ntile_5th = 50;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_ntile_5th() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_ntile_5th() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_ntile_5th() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_ntile_5th() {
  ping_ntile_5th_ = 0u;
  clear_has_ping_ntile_5th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_ntile_5th() const {
  return ping_ntile_5th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_ntile_5th(::google::protobuf::uint32 value) {
  set_has_ping_ntile_5th();
  ping_ntile_5th_ = value;
}

// optional uint32 ping_ntile_50th = 51;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_ntile_50th() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_ntile_50th() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_ntile_50th() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_ntile_50th() {
  ping_ntile_50th_ = 0u;
  clear_has_ping_ntile_50th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_ntile_50th() const {
  return ping_ntile_50th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_ntile_50th(::google::protobuf::uint32 value) {
  set_has_ping_ntile_50th();
  ping_ntile_50th_ = value;
}

// optional uint32 ping_ntile_75th = 52;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_ntile_75th() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_ntile_75th() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_ntile_75th() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_ntile_75th() {
  ping_ntile_75th_ = 0u;
  clear_has_ping_ntile_75th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_ntile_75th() const {
  return ping_ntile_75th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_ntile_75th(::google::protobuf::uint32 value) {
  set_has_ping_ntile_75th();
  ping_ntile_75th_ = value;
}

// optional uint32 ping_ntile_95th = 53;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_ntile_95th() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_ntile_95th() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_ntile_95th() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_ntile_95th() {
  ping_ntile_95th_ = 0u;
  clear_has_ping_ntile_95th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_ntile_95th() const {
  return ping_ntile_95th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_ntile_95th(::google::protobuf::uint32 value) {
  set_has_ping_ntile_95th();
  ping_ntile_95th_ = value;
}

// optional uint32 ping_ntile_98th = 54;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_ntile_98th() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_ntile_98th() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_ntile_98th() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_ntile_98th() {
  ping_ntile_98th_ = 0u;
  clear_has_ping_ntile_98th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_ntile_98th() const {
  return ping_ntile_98th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_ntile_98th(::google::protobuf::uint32 value) {
  set_has_ping_ntile_98th();
  ping_ntile_98th_ = value;
}

// optional uint32 jitter_histogram_negligible = 61;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_negligible() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_jitter_histogram_negligible() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_jitter_histogram_negligible() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_negligible() {
  jitter_histogram_negligible_ = 0u;
  clear_has_jitter_histogram_negligible();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_negligible() const {
  return jitter_histogram_negligible_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_negligible(::google::protobuf::uint32 value) {
  set_has_jitter_histogram_negligible();
  jitter_histogram_negligible_ = value;
}

// optional uint32 jitter_histogram_1 = 62;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_1() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_jitter_histogram_1() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_jitter_histogram_1() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_1() {
  jitter_histogram_1_ = 0u;
  clear_has_jitter_histogram_1();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_1() const {
  return jitter_histogram_1_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_1(::google::protobuf::uint32 value) {
  set_has_jitter_histogram_1();
  jitter_histogram_1_ = value;
}

// optional uint32 jitter_histogram_2 = 63;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_2() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_jitter_histogram_2() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_jitter_histogram_2() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_2() {
  jitter_histogram_2_ = 0u;
  clear_has_jitter_histogram_2();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_2() const {
  return jitter_histogram_2_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_2(::google::protobuf::uint32 value) {
  set_has_jitter_histogram_2();
  jitter_histogram_2_ = value;
}

// optional uint32 jitter_histogram_5 = 64;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_5() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_jitter_histogram_5() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_jitter_histogram_5() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_5() {
  jitter_histogram_5_ = 0u;
  clear_has_jitter_histogram_5();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_5() const {
  return jitter_histogram_5_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_5(::google::protobuf::uint32 value) {
  set_has_jitter_histogram_5();
  jitter_histogram_5_ = value;
}

// optional uint32 jitter_histogram_10 = 65;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_10() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_jitter_histogram_10() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_jitter_histogram_10() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_10() {
  jitter_histogram_10_ = 0u;
  clear_has_jitter_histogram_10();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_10() const {
  return jitter_histogram_10_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_10(::google::protobuf::uint32 value) {
  set_has_jitter_histogram_10();
  jitter_histogram_10_ = value;
}

// optional uint32 jitter_histogram_20 = 66;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_20() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_jitter_histogram_20() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_jitter_histogram_20() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_20() {
  jitter_histogram_20_ = 0u;
  clear_has_jitter_histogram_20();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_20() const {
  return jitter_histogram_20_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_20(::google::protobuf::uint32 value) {
  set_has_jitter_histogram_20();
  jitter_histogram_20_ = value;
}

// optional uint32 txspeed_max = 67;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_max() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_max() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_max() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_max() {
  txspeed_max_ = 0u;
  clear_has_txspeed_max();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_max() const {
  return txspeed_max_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_max(::google::protobuf::uint32 value) {
  set_has_txspeed_max();
  txspeed_max_ = value;
}

// optional uint32 txspeed_histogram_16 = 68;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_16() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_histogram_16() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_histogram_16() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_16() {
  txspeed_histogram_16_ = 0u;
  clear_has_txspeed_histogram_16();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_16() const {
  return txspeed_histogram_16_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_16(::google::protobuf::uint32 value) {
  set_has_txspeed_histogram_16();
  txspeed_histogram_16_ = value;
}

// optional uint32 txspeed_histogram_32 = 69;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_32() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_histogram_32() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_histogram_32() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_32() {
  txspeed_histogram_32_ = 0u;
  clear_has_txspeed_histogram_32();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_32() const {
  return txspeed_histogram_32_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_32(::google::protobuf::uint32 value) {
  set_has_txspeed_histogram_32();
  txspeed_histogram_32_ = value;
}

// optional uint32 txspeed_histogram_64 = 70;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_64() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_histogram_64() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_histogram_64() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_64() {
  txspeed_histogram_64_ = 0u;
  clear_has_txspeed_histogram_64();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_64() const {
  return txspeed_histogram_64_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_64(::google::protobuf::uint32 value) {
  set_has_txspeed_histogram_64();
  txspeed_histogram_64_ = value;
}

// optional uint32 txspeed_histogram_128 = 71;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_128() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_histogram_128() {
  _has_bits_[1] |= 0x00008000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_histogram_128() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_128() {
  txspeed_histogram_128_ = 0u;
  clear_has_txspeed_histogram_128();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_128() const {
  return txspeed_histogram_128_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_128(::google::protobuf::uint32 value) {
  set_has_txspeed_histogram_128();
  txspeed_histogram_128_ = value;
}

// optional uint32 txspeed_histogram_256 = 72;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_256() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_histogram_256() {
  _has_bits_[1] |= 0x00010000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_histogram_256() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_256() {
  txspeed_histogram_256_ = 0u;
  clear_has_txspeed_histogram_256();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_256() const {
  return txspeed_histogram_256_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_256(::google::protobuf::uint32 value) {
  set_has_txspeed_histogram_256();
  txspeed_histogram_256_ = value;
}

// optional uint32 txspeed_histogram_512 = 73;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_512() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_histogram_512() {
  _has_bits_[1] |= 0x00020000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_histogram_512() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_512() {
  txspeed_histogram_512_ = 0u;
  clear_has_txspeed_histogram_512();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_512() const {
  return txspeed_histogram_512_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_512(::google::protobuf::uint32 value) {
  set_has_txspeed_histogram_512();
  txspeed_histogram_512_ = value;
}

// optional uint32 txspeed_histogram_1024 = 74;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_1024() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_histogram_1024() {
  _has_bits_[1] |= 0x00040000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_histogram_1024() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_1024() {
  txspeed_histogram_1024_ = 0u;
  clear_has_txspeed_histogram_1024();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_1024() const {
  return txspeed_histogram_1024_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_1024(::google::protobuf::uint32 value) {
  set_has_txspeed_histogram_1024();
  txspeed_histogram_1024_ = value;
}

// optional uint32 txspeed_histogram_max = 75;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_max() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_histogram_max() {
  _has_bits_[1] |= 0x00080000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_histogram_max() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_max() {
  txspeed_histogram_max_ = 0u;
  clear_has_txspeed_histogram_max();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_max() const {
  return txspeed_histogram_max_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_max(::google::protobuf::uint32 value) {
  set_has_txspeed_histogram_max();
  txspeed_histogram_max_ = value;
}

// optional uint32 txspeed_ntile_5th = 76;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_ntile_5th() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_ntile_5th() {
  _has_bits_[1] |= 0x00100000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_ntile_5th() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_ntile_5th() {
  txspeed_ntile_5th_ = 0u;
  clear_has_txspeed_ntile_5th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_ntile_5th() const {
  return txspeed_ntile_5th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_ntile_5th(::google::protobuf::uint32 value) {
  set_has_txspeed_ntile_5th();
  txspeed_ntile_5th_ = value;
}

// optional uint32 txspeed_ntile_50th = 77;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_ntile_50th() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_ntile_50th() {
  _has_bits_[1] |= 0x00200000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_ntile_50th() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_ntile_50th() {
  txspeed_ntile_50th_ = 0u;
  clear_has_txspeed_ntile_50th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_ntile_50th() const {
  return txspeed_ntile_50th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_ntile_50th(::google::protobuf::uint32 value) {
  set_has_txspeed_ntile_50th();
  txspeed_ntile_50th_ = value;
}

// optional uint32 txspeed_ntile_75th = 78;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_ntile_75th() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_ntile_75th() {
  _has_bits_[1] |= 0x00400000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_ntile_75th() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_ntile_75th() {
  txspeed_ntile_75th_ = 0u;
  clear_has_txspeed_ntile_75th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_ntile_75th() const {
  return txspeed_ntile_75th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_ntile_75th(::google::protobuf::uint32 value) {
  set_has_txspeed_ntile_75th();
  txspeed_ntile_75th_ = value;
}

// optional uint32 txspeed_ntile_95th = 79;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_ntile_95th() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_ntile_95th() {
  _has_bits_[1] |= 0x00800000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_ntile_95th() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_ntile_95th() {
  txspeed_ntile_95th_ = 0u;
  clear_has_txspeed_ntile_95th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_ntile_95th() const {
  return txspeed_ntile_95th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_ntile_95th(::google::protobuf::uint32 value) {
  set_has_txspeed_ntile_95th();
  txspeed_ntile_95th_ = value;
}

// optional uint32 txspeed_ntile_98th = 80;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_ntile_98th() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_ntile_98th() {
  _has_bits_[1] |= 0x01000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_ntile_98th() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_ntile_98th() {
  txspeed_ntile_98th_ = 0u;
  clear_has_txspeed_ntile_98th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_ntile_98th() const {
  return txspeed_ntile_98th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_ntile_98th(::google::protobuf::uint32 value) {
  set_has_txspeed_ntile_98th();
  txspeed_ntile_98th_ = value;
}

// optional uint32 rxspeed_max = 81;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_max() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_max() {
  _has_bits_[1] |= 0x02000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_max() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_max() {
  rxspeed_max_ = 0u;
  clear_has_rxspeed_max();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_max() const {
  return rxspeed_max_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_max(::google::protobuf::uint32 value) {
  set_has_rxspeed_max();
  rxspeed_max_ = value;
}

// optional uint32 rxspeed_histogram_16 = 82;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_16() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_histogram_16() {
  _has_bits_[1] |= 0x04000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_histogram_16() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_16() {
  rxspeed_histogram_16_ = 0u;
  clear_has_rxspeed_histogram_16();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_16() const {
  return rxspeed_histogram_16_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_16(::google::protobuf::uint32 value) {
  set_has_rxspeed_histogram_16();
  rxspeed_histogram_16_ = value;
}

// optional uint32 rxspeed_histogram_32 = 83;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_32() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_histogram_32() {
  _has_bits_[1] |= 0x08000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_histogram_32() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_32() {
  rxspeed_histogram_32_ = 0u;
  clear_has_rxspeed_histogram_32();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_32() const {
  return rxspeed_histogram_32_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_32(::google::protobuf::uint32 value) {
  set_has_rxspeed_histogram_32();
  rxspeed_histogram_32_ = value;
}

// optional uint32 rxspeed_histogram_64 = 84;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_64() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_histogram_64() {
  _has_bits_[1] |= 0x10000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_histogram_64() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_64() {
  rxspeed_histogram_64_ = 0u;
  clear_has_rxspeed_histogram_64();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_64() const {
  return rxspeed_histogram_64_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_64(::google::protobuf::uint32 value) {
  set_has_rxspeed_histogram_64();
  rxspeed_histogram_64_ = value;
}

// optional uint32 rxspeed_histogram_128 = 85;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_128() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_histogram_128() {
  _has_bits_[1] |= 0x20000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_histogram_128() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_128() {
  rxspeed_histogram_128_ = 0u;
  clear_has_rxspeed_histogram_128();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_128() const {
  return rxspeed_histogram_128_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_128(::google::protobuf::uint32 value) {
  set_has_rxspeed_histogram_128();
  rxspeed_histogram_128_ = value;
}

// optional uint32 rxspeed_histogram_256 = 86;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_256() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_histogram_256() {
  _has_bits_[1] |= 0x40000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_histogram_256() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_256() {
  rxspeed_histogram_256_ = 0u;
  clear_has_rxspeed_histogram_256();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_256() const {
  return rxspeed_histogram_256_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_256(::google::protobuf::uint32 value) {
  set_has_rxspeed_histogram_256();
  rxspeed_histogram_256_ = value;
}

// optional uint32 rxspeed_histogram_512 = 87;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_512() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_histogram_512() {
  _has_bits_[1] |= 0x80000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_histogram_512() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_512() {
  rxspeed_histogram_512_ = 0u;
  clear_has_rxspeed_histogram_512();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_512() const {
  return rxspeed_histogram_512_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_512(::google::protobuf::uint32 value) {
  set_has_rxspeed_histogram_512();
  rxspeed_histogram_512_ = value;
}

// optional uint32 rxspeed_histogram_1024 = 88;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_1024() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_histogram_1024() {
  _has_bits_[2] |= 0x00000001u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_histogram_1024() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_1024() {
  rxspeed_histogram_1024_ = 0u;
  clear_has_rxspeed_histogram_1024();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_1024() const {
  return rxspeed_histogram_1024_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_1024(::google::protobuf::uint32 value) {
  set_has_rxspeed_histogram_1024();
  rxspeed_histogram_1024_ = value;
}

// optional uint32 rxspeed_histogram_max = 89;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_max() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_histogram_max() {
  _has_bits_[2] |= 0x00000002u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_histogram_max() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_max() {
  rxspeed_histogram_max_ = 0u;
  clear_has_rxspeed_histogram_max();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_max() const {
  return rxspeed_histogram_max_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_max(::google::protobuf::uint32 value) {
  set_has_rxspeed_histogram_max();
  rxspeed_histogram_max_ = value;
}

// optional uint32 rxspeed_ntile_5th = 90;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_ntile_5th() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_ntile_5th() {
  _has_bits_[2] |= 0x00000004u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_ntile_5th() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_ntile_5th() {
  rxspeed_ntile_5th_ = 0u;
  clear_has_rxspeed_ntile_5th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_ntile_5th() const {
  return rxspeed_ntile_5th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_ntile_5th(::google::protobuf::uint32 value) {
  set_has_rxspeed_ntile_5th();
  rxspeed_ntile_5th_ = value;
}

// optional uint32 rxspeed_ntile_50th = 91;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_ntile_50th() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_ntile_50th() {
  _has_bits_[2] |= 0x00000008u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_ntile_50th() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_ntile_50th() {
  rxspeed_ntile_50th_ = 0u;
  clear_has_rxspeed_ntile_50th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_ntile_50th() const {
  return rxspeed_ntile_50th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_ntile_50th(::google::protobuf::uint32 value) {
  set_has_rxspeed_ntile_50th();
  rxspeed_ntile_50th_ = value;
}

// optional uint32 rxspeed_ntile_75th = 92;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_ntile_75th() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_ntile_75th() {
  _has_bits_[2] |= 0x00000010u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_ntile_75th() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_ntile_75th() {
  rxspeed_ntile_75th_ = 0u;
  clear_has_rxspeed_ntile_75th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_ntile_75th() const {
  return rxspeed_ntile_75th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_ntile_75th(::google::protobuf::uint32 value) {
  set_has_rxspeed_ntile_75th();
  rxspeed_ntile_75th_ = value;
}

// optional uint32 rxspeed_ntile_95th = 93;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_ntile_95th() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_ntile_95th() {
  _has_bits_[2] |= 0x00000020u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_ntile_95th() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_ntile_95th() {
  rxspeed_ntile_95th_ = 0u;
  clear_has_rxspeed_ntile_95th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_ntile_95th() const {
  return rxspeed_ntile_95th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_ntile_95th(::google::protobuf::uint32 value) {
  set_has_rxspeed_ntile_95th();
  rxspeed_ntile_95th_ = value;
}

// optional uint32 rxspeed_ntile_98th = 94;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_ntile_98th() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_ntile_98th() {
  _has_bits_[2] |= 0x00000040u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_ntile_98th() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_ntile_98th() {
  rxspeed_ntile_98th_ = 0u;
  clear_has_rxspeed_ntile_98th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_ntile_98th() const {
  return rxspeed_ntile_98th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_ntile_98th(::google::protobuf::uint32 value) {
  set_has_rxspeed_ntile_98th();
  rxspeed_ntile_98th_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionQuality

// optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
inline bool CMsgSteamDatagramConnectionQuality::has_instantaneous() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectionQuality::set_has_instantaneous() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramConnectionQuality::clear_has_instantaneous() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramConnectionQuality::clear_instantaneous() {
  if (instantaneous_ != NULL) instantaneous_->::CMsgSteamDatagramLinkInstantaneousStats::Clear();
  clear_has_instantaneous();
}
inline const ::CMsgSteamDatagramLinkInstantaneousStats& CMsgSteamDatagramConnectionQuality::instantaneous() const {
  return instantaneous_ != NULL ? *instantaneous_ : *default_instance_->instantaneous_;
}
inline ::CMsgSteamDatagramLinkInstantaneousStats* CMsgSteamDatagramConnectionQuality::mutable_instantaneous() {
  set_has_instantaneous();
  if (instantaneous_ == NULL) instantaneous_ = new ::CMsgSteamDatagramLinkInstantaneousStats;
  return instantaneous_;
}
inline ::CMsgSteamDatagramLinkInstantaneousStats* CMsgSteamDatagramConnectionQuality::release_instantaneous() {
  clear_has_instantaneous();
  ::CMsgSteamDatagramLinkInstantaneousStats* temp = instantaneous_;
  instantaneous_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionQuality::set_allocated_instantaneous(::CMsgSteamDatagramLinkInstantaneousStats* instantaneous) {
  delete instantaneous_;
  instantaneous_ = instantaneous;
  if (instantaneous) {
    set_has_instantaneous();
  } else {
    clear_has_instantaneous();
  }
}

// optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
inline bool CMsgSteamDatagramConnectionQuality::has_lifetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramConnectionQuality::set_has_lifetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramConnectionQuality::clear_has_lifetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramConnectionQuality::clear_lifetime() {
  if (lifetime_ != NULL) lifetime_->::CMsgSteamDatagramLinkLifetimeStats::Clear();
  clear_has_lifetime();
}
inline const ::CMsgSteamDatagramLinkLifetimeStats& CMsgSteamDatagramConnectionQuality::lifetime() const {
  return lifetime_ != NULL ? *lifetime_ : *default_instance_->lifetime_;
}
inline ::CMsgSteamDatagramLinkLifetimeStats* CMsgSteamDatagramConnectionQuality::mutable_lifetime() {
  set_has_lifetime();
  if (lifetime_ == NULL) lifetime_ = new ::CMsgSteamDatagramLinkLifetimeStats;
  return lifetime_;
}
inline ::CMsgSteamDatagramLinkLifetimeStats* CMsgSteamDatagramConnectionQuality::release_lifetime() {
  clear_has_lifetime();
  ::CMsgSteamDatagramLinkLifetimeStats* temp = lifetime_;
  lifetime_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionQuality::set_allocated_lifetime(::CMsgSteamDatagramLinkLifetimeStats* lifetime) {
  delete lifetime_;
  lifetime_ = lifetime;
  if (lifetime) {
    set_has_lifetime();
  } else {
    clear_has_lifetime();
  }
}

// -------------------------------------------------------------------

// CMsgICERendezvous_Auth

// optional string pwd_frag = 1;
inline bool CMsgICERendezvous_Auth::has_pwd_frag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgICERendezvous_Auth::set_has_pwd_frag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgICERendezvous_Auth::clear_has_pwd_frag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgICERendezvous_Auth::clear_pwd_frag() {
  if (pwd_frag_ != &::google::protobuf::internal::kEmptyString) {
    pwd_frag_->clear();
  }
  clear_has_pwd_frag();
}
inline const ::std::string& CMsgICERendezvous_Auth::pwd_frag() const {
  return *pwd_frag_;
}
inline void CMsgICERendezvous_Auth::set_pwd_frag(const ::std::string& value) {
  set_has_pwd_frag();
  if (pwd_frag_ == &::google::protobuf::internal::kEmptyString) {
    pwd_frag_ = new ::std::string;
  }
  pwd_frag_->assign(value);
}
inline void CMsgICERendezvous_Auth::set_pwd_frag(const char* value) {
  set_has_pwd_frag();
  if (pwd_frag_ == &::google::protobuf::internal::kEmptyString) {
    pwd_frag_ = new ::std::string;
  }
  pwd_frag_->assign(value);
}
inline void CMsgICERendezvous_Auth::set_pwd_frag(const char* value, size_t size) {
  set_has_pwd_frag();
  if (pwd_frag_ == &::google::protobuf::internal::kEmptyString) {
    pwd_frag_ = new ::std::string;
  }
  pwd_frag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgICERendezvous_Auth::mutable_pwd_frag() {
  set_has_pwd_frag();
  if (pwd_frag_ == &::google::protobuf::internal::kEmptyString) {
    pwd_frag_ = new ::std::string;
  }
  return pwd_frag_;
}
inline ::std::string* CMsgICERendezvous_Auth::release_pwd_frag() {
  clear_has_pwd_frag();
  if (pwd_frag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_frag_;
    pwd_frag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgICERendezvous_Auth::set_allocated_pwd_frag(::std::string* pwd_frag) {
  if (pwd_frag_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_frag_;
  }
  if (pwd_frag) {
    set_has_pwd_frag();
    pwd_frag_ = pwd_frag;
  } else {
    clear_has_pwd_frag();
    pwd_frag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgICERendezvous_Candidate

// optional string candidate = 3;
inline bool CMsgICERendezvous_Candidate::has_candidate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgICERendezvous_Candidate::set_has_candidate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgICERendezvous_Candidate::clear_has_candidate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgICERendezvous_Candidate::clear_candidate() {
  if (candidate_ != &::google::protobuf::internal::kEmptyString) {
    candidate_->clear();
  }
  clear_has_candidate();
}
inline const ::std::string& CMsgICERendezvous_Candidate::candidate() const {
  return *candidate_;
}
inline void CMsgICERendezvous_Candidate::set_candidate(const ::std::string& value) {
  set_has_candidate();
  if (candidate_ == &::google::protobuf::internal::kEmptyString) {
    candidate_ = new ::std::string;
  }
  candidate_->assign(value);
}
inline void CMsgICERendezvous_Candidate::set_candidate(const char* value) {
  set_has_candidate();
  if (candidate_ == &::google::protobuf::internal::kEmptyString) {
    candidate_ = new ::std::string;
  }
  candidate_->assign(value);
}
inline void CMsgICERendezvous_Candidate::set_candidate(const char* value, size_t size) {
  set_has_candidate();
  if (candidate_ == &::google::protobuf::internal::kEmptyString) {
    candidate_ = new ::std::string;
  }
  candidate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgICERendezvous_Candidate::mutable_candidate() {
  set_has_candidate();
  if (candidate_ == &::google::protobuf::internal::kEmptyString) {
    candidate_ = new ::std::string;
  }
  return candidate_;
}
inline ::std::string* CMsgICERendezvous_Candidate::release_candidate() {
  clear_has_candidate();
  if (candidate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = candidate_;
    candidate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgICERendezvous_Candidate::set_allocated_candidate(::std::string* candidate) {
  if (candidate_ != &::google::protobuf::internal::kEmptyString) {
    delete candidate_;
  }
  if (candidate) {
    set_has_candidate();
    candidate_ = candidate;
  } else {
    clear_has_candidate();
    candidate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgICERendezvous

// optional .CMsgICERendezvous.Auth auth = 2;
inline bool CMsgICERendezvous::has_auth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgICERendezvous::set_has_auth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgICERendezvous::clear_has_auth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgICERendezvous::clear_auth() {
  if (auth_ != NULL) auth_->::CMsgICERendezvous_Auth::Clear();
  clear_has_auth();
}
inline const ::CMsgICERendezvous_Auth& CMsgICERendezvous::auth() const {
  return auth_ != NULL ? *auth_ : *default_instance_->auth_;
}
inline ::CMsgICERendezvous_Auth* CMsgICERendezvous::mutable_auth() {
  set_has_auth();
  if (auth_ == NULL) auth_ = new ::CMsgICERendezvous_Auth;
  return auth_;
}
inline ::CMsgICERendezvous_Auth* CMsgICERendezvous::release_auth() {
  clear_has_auth();
  ::CMsgICERendezvous_Auth* temp = auth_;
  auth_ = NULL;
  return temp;
}
inline void CMsgICERendezvous::set_allocated_auth(::CMsgICERendezvous_Auth* auth) {
  delete auth_;
  auth_ = auth;
  if (auth) {
    set_has_auth();
  } else {
    clear_has_auth();
  }
}

// optional .CMsgICERendezvous.Candidate add_candidate = 1;
inline bool CMsgICERendezvous::has_add_candidate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgICERendezvous::set_has_add_candidate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgICERendezvous::clear_has_add_candidate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgICERendezvous::clear_add_candidate() {
  if (add_candidate_ != NULL) add_candidate_->::CMsgICERendezvous_Candidate::Clear();
  clear_has_add_candidate();
}
inline const ::CMsgICERendezvous_Candidate& CMsgICERendezvous::add_candidate() const {
  return add_candidate_ != NULL ? *add_candidate_ : *default_instance_->add_candidate_;
}
inline ::CMsgICERendezvous_Candidate* CMsgICERendezvous::mutable_add_candidate() {
  set_has_add_candidate();
  if (add_candidate_ == NULL) add_candidate_ = new ::CMsgICERendezvous_Candidate;
  return add_candidate_;
}
inline ::CMsgICERendezvous_Candidate* CMsgICERendezvous::release_add_candidate() {
  clear_has_add_candidate();
  ::CMsgICERendezvous_Candidate* temp = add_candidate_;
  add_candidate_ = NULL;
  return temp;
}
inline void CMsgICERendezvous::set_allocated_add_candidate(::CMsgICERendezvous_Candidate* add_candidate) {
  delete add_candidate_;
  add_candidate_ = add_candidate;
  if (add_candidate) {
    set_has_add_candidate();
  } else {
    clear_has_add_candidate();
  }
}

// -------------------------------------------------------------------

// CMsgSteamNetworkingP2PRendezvous_ConnectRequest

// optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
inline bool CMsgSteamNetworkingP2PRendezvous_ConnectRequest::has_crypt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::set_has_crypt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::clear_has_crypt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::clear_crypt() {
  if (crypt_ != NULL) crypt_->::CMsgSteamDatagramSessionCryptInfoSigned::Clear();
  clear_has_crypt();
}
inline const ::CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamNetworkingP2PRendezvous_ConnectRequest::crypt() const {
  return crypt_ != NULL ? *crypt_ : *default_instance_->crypt_;
}
inline ::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamNetworkingP2PRendezvous_ConnectRequest::mutable_crypt() {
  set_has_crypt();
  if (crypt_ == NULL) crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned;
  return crypt_;
}
inline ::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamNetworkingP2PRendezvous_ConnectRequest::release_crypt() {
  clear_has_crypt();
  ::CMsgSteamDatagramSessionCryptInfoSigned* temp = crypt_;
  crypt_ = NULL;
  return temp;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::set_allocated_crypt(::CMsgSteamDatagramSessionCryptInfoSigned* crypt) {
  delete crypt_;
  crypt_ = crypt;
  if (crypt) {
    set_has_crypt();
  } else {
    clear_has_crypt();
  }
}

// optional .CMsgSteamDatagramCertificateSigned cert = 7;
inline bool CMsgSteamNetworkingP2PRendezvous_ConnectRequest::has_cert() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::set_has_cert() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::clear_has_cert() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::clear_cert() {
  if (cert_ != NULL) cert_->::CMsgSteamDatagramCertificateSigned::Clear();
  clear_has_cert();
}
inline const ::CMsgSteamDatagramCertificateSigned& CMsgSteamNetworkingP2PRendezvous_ConnectRequest::cert() const {
  return cert_ != NULL ? *cert_ : *default_instance_->cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamNetworkingP2PRendezvous_ConnectRequest::mutable_cert() {
  set_has_cert();
  if (cert_ == NULL) cert_ = new ::CMsgSteamDatagramCertificateSigned;
  return cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamNetworkingP2PRendezvous_ConnectRequest::release_cert() {
  clear_has_cert();
  ::CMsgSteamDatagramCertificateSigned* temp = cert_;
  cert_ = NULL;
  return temp;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert) {
  delete cert_;
  cert_ = cert;
  if (cert) {
    set_has_cert();
  } else {
    clear_has_cert();
  }
}

// optional uint32 to_virtual_port = 9;
inline bool CMsgSteamNetworkingP2PRendezvous_ConnectRequest::has_to_virtual_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::set_has_to_virtual_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::clear_has_to_virtual_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::clear_to_virtual_port() {
  to_virtual_port_ = 0u;
  clear_has_to_virtual_port();
}
inline ::google::protobuf::uint32 CMsgSteamNetworkingP2PRendezvous_ConnectRequest::to_virtual_port() const {
  return to_virtual_port_;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::set_to_virtual_port(::google::protobuf::uint32 value) {
  set_has_to_virtual_port();
  to_virtual_port_ = value;
}

// optional uint32 from_virtual_port = 10;
inline bool CMsgSteamNetworkingP2PRendezvous_ConnectRequest::has_from_virtual_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::set_has_from_virtual_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::clear_has_from_virtual_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::clear_from_virtual_port() {
  from_virtual_port_ = 0u;
  clear_has_from_virtual_port();
}
inline ::google::protobuf::uint32 CMsgSteamNetworkingP2PRendezvous_ConnectRequest::from_virtual_port() const {
  return from_virtual_port_;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::set_from_virtual_port(::google::protobuf::uint32 value) {
  set_has_from_virtual_port();
  from_virtual_port_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamNetworkingP2PRendezvous_ConnectOK

// optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
inline bool CMsgSteamNetworkingP2PRendezvous_ConnectOK::has_crypt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectOK::set_has_crypt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectOK::clear_has_crypt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectOK::clear_crypt() {
  if (crypt_ != NULL) crypt_->::CMsgSteamDatagramSessionCryptInfoSigned::Clear();
  clear_has_crypt();
}
inline const ::CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamNetworkingP2PRendezvous_ConnectOK::crypt() const {
  return crypt_ != NULL ? *crypt_ : *default_instance_->crypt_;
}
inline ::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamNetworkingP2PRendezvous_ConnectOK::mutable_crypt() {
  set_has_crypt();
  if (crypt_ == NULL) crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned;
  return crypt_;
}
inline ::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamNetworkingP2PRendezvous_ConnectOK::release_crypt() {
  clear_has_crypt();
  ::CMsgSteamDatagramSessionCryptInfoSigned* temp = crypt_;
  crypt_ = NULL;
  return temp;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectOK::set_allocated_crypt(::CMsgSteamDatagramSessionCryptInfoSigned* crypt) {
  delete crypt_;
  crypt_ = crypt;
  if (crypt) {
    set_has_crypt();
  } else {
    clear_has_crypt();
  }
}

// optional .CMsgSteamDatagramCertificateSigned cert = 6;
inline bool CMsgSteamNetworkingP2PRendezvous_ConnectOK::has_cert() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectOK::set_has_cert() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectOK::clear_has_cert() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectOK::clear_cert() {
  if (cert_ != NULL) cert_->::CMsgSteamDatagramCertificateSigned::Clear();
  clear_has_cert();
}
inline const ::CMsgSteamDatagramCertificateSigned& CMsgSteamNetworkingP2PRendezvous_ConnectOK::cert() const {
  return cert_ != NULL ? *cert_ : *default_instance_->cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamNetworkingP2PRendezvous_ConnectOK::mutable_cert() {
  set_has_cert();
  if (cert_ == NULL) cert_ = new ::CMsgSteamDatagramCertificateSigned;
  return cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamNetworkingP2PRendezvous_ConnectOK::release_cert() {
  clear_has_cert();
  ::CMsgSteamDatagramCertificateSigned* temp = cert_;
  cert_ = NULL;
  return temp;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectOK::set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert) {
  delete cert_;
  cert_ = cert;
  if (cert) {
    set_has_cert();
  } else {
    clear_has_cert();
  }
}

// -------------------------------------------------------------------

// CMsgSteamNetworkingP2PRendezvous_ConnectionClosed

// optional string debug = 5;
inline bool CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::has_debug() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::set_has_debug() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::clear_has_debug() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::clear_debug() {
  if (debug_ != &::google::protobuf::internal::kEmptyString) {
    debug_->clear();
  }
  clear_has_debug();
}
inline const ::std::string& CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::debug() const {
  return *debug_;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::set_debug(const ::std::string& value) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(value);
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::set_debug(const char* value) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(value);
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::set_debug(const char* value, size_t size) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::mutable_debug() {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  return debug_;
}
inline ::std::string* CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::release_debug() {
  clear_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_;
    debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::set_allocated_debug(::std::string* debug) {
  if (debug_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_;
  }
  if (debug) {
    set_has_debug();
    debug_ = debug;
  } else {
    clear_has_debug();
    debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 reason_code = 6;
inline bool CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::has_reason_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::set_has_reason_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::clear_has_reason_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::clear_reason_code() {
  reason_code_ = 0u;
  clear_has_reason_code();
}
inline ::google::protobuf::uint32 CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::reason_code() const {
  return reason_code_;
}
inline void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::set_reason_code(::google::protobuf::uint32 value) {
  set_has_reason_code();
  reason_code_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamNetworkingP2PRendezvous_ReliableMessage

// optional .CMsgICERendezvous ice = 1;
inline bool CMsgSteamNetworkingP2PRendezvous_ReliableMessage::has_ice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::set_has_ice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::clear_has_ice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::clear_ice() {
  if (ice_ != NULL) ice_->::CMsgICERendezvous::Clear();
  clear_has_ice();
}
inline const ::CMsgICERendezvous& CMsgSteamNetworkingP2PRendezvous_ReliableMessage::ice() const {
  return ice_ != NULL ? *ice_ : *default_instance_->ice_;
}
inline ::CMsgICERendezvous* CMsgSteamNetworkingP2PRendezvous_ReliableMessage::mutable_ice() {
  set_has_ice();
  if (ice_ == NULL) ice_ = new ::CMsgICERendezvous;
  return ice_;
}
inline ::CMsgICERendezvous* CMsgSteamNetworkingP2PRendezvous_ReliableMessage::release_ice() {
  clear_has_ice();
  ::CMsgICERendezvous* temp = ice_;
  ice_ = NULL;
  return temp;
}
inline void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::set_allocated_ice(::CMsgICERendezvous* ice) {
  delete ice_;
  ice_ = ice;
  if (ice) {
    set_has_ice();
  } else {
    clear_has_ice();
  }
}

// -------------------------------------------------------------------

// CMsgSteamNetworkingP2PRendezvous

// optional string from_identity = 8;
inline bool CMsgSteamNetworkingP2PRendezvous::has_from_identity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_has_from_identity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_has_from_identity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_from_identity() {
  if (from_identity_ != &::google::protobuf::internal::kEmptyString) {
    from_identity_->clear();
  }
  clear_has_from_identity();
}
inline const ::std::string& CMsgSteamNetworkingP2PRendezvous::from_identity() const {
  return *from_identity_;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_from_identity(const ::std::string& value) {
  set_has_from_identity();
  if (from_identity_ == &::google::protobuf::internal::kEmptyString) {
    from_identity_ = new ::std::string;
  }
  from_identity_->assign(value);
}
inline void CMsgSteamNetworkingP2PRendezvous::set_from_identity(const char* value) {
  set_has_from_identity();
  if (from_identity_ == &::google::protobuf::internal::kEmptyString) {
    from_identity_ = new ::std::string;
  }
  from_identity_->assign(value);
}
inline void CMsgSteamNetworkingP2PRendezvous::set_from_identity(const char* value, size_t size) {
  set_has_from_identity();
  if (from_identity_ == &::google::protobuf::internal::kEmptyString) {
    from_identity_ = new ::std::string;
  }
  from_identity_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamNetworkingP2PRendezvous::mutable_from_identity() {
  set_has_from_identity();
  if (from_identity_ == &::google::protobuf::internal::kEmptyString) {
    from_identity_ = new ::std::string;
  }
  return from_identity_;
}
inline ::std::string* CMsgSteamNetworkingP2PRendezvous::release_from_identity() {
  clear_has_from_identity();
  if (from_identity_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_identity_;
    from_identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamNetworkingP2PRendezvous::set_allocated_from_identity(::std::string* from_identity) {
  if (from_identity_ != &::google::protobuf::internal::kEmptyString) {
    delete from_identity_;
  }
  if (from_identity) {
    set_has_from_identity();
    from_identity_ = from_identity;
  } else {
    clear_has_from_identity();
    from_identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed32 from_connection_id = 9;
inline bool CMsgSteamNetworkingP2PRendezvous::has_from_connection_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_has_from_connection_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_has_from_connection_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_from_connection_id() {
  from_connection_id_ = 0u;
  clear_has_from_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamNetworkingP2PRendezvous::from_connection_id() const {
  return from_connection_id_;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_from_connection_id(::google::protobuf::uint32 value) {
  set_has_from_connection_id();
  from_connection_id_ = value;
}

// optional string to_identity = 10;
inline bool CMsgSteamNetworkingP2PRendezvous::has_to_identity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_has_to_identity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_has_to_identity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_to_identity() {
  if (to_identity_ != &::google::protobuf::internal::kEmptyString) {
    to_identity_->clear();
  }
  clear_has_to_identity();
}
inline const ::std::string& CMsgSteamNetworkingP2PRendezvous::to_identity() const {
  return *to_identity_;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_to_identity(const ::std::string& value) {
  set_has_to_identity();
  if (to_identity_ == &::google::protobuf::internal::kEmptyString) {
    to_identity_ = new ::std::string;
  }
  to_identity_->assign(value);
}
inline void CMsgSteamNetworkingP2PRendezvous::set_to_identity(const char* value) {
  set_has_to_identity();
  if (to_identity_ == &::google::protobuf::internal::kEmptyString) {
    to_identity_ = new ::std::string;
  }
  to_identity_->assign(value);
}
inline void CMsgSteamNetworkingP2PRendezvous::set_to_identity(const char* value, size_t size) {
  set_has_to_identity();
  if (to_identity_ == &::google::protobuf::internal::kEmptyString) {
    to_identity_ = new ::std::string;
  }
  to_identity_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamNetworkingP2PRendezvous::mutable_to_identity() {
  set_has_to_identity();
  if (to_identity_ == &::google::protobuf::internal::kEmptyString) {
    to_identity_ = new ::std::string;
  }
  return to_identity_;
}
inline ::std::string* CMsgSteamNetworkingP2PRendezvous::release_to_identity() {
  clear_has_to_identity();
  if (to_identity_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_identity_;
    to_identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamNetworkingP2PRendezvous::set_allocated_to_identity(::std::string* to_identity) {
  if (to_identity_ != &::google::protobuf::internal::kEmptyString) {
    delete to_identity_;
  }
  if (to_identity) {
    set_has_to_identity();
    to_identity_ = to_identity;
  } else {
    clear_has_to_identity();
    to_identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed32 to_connection_id = 1;
inline bool CMsgSteamNetworkingP2PRendezvous::has_to_connection_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_has_to_connection_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_has_to_connection_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_to_connection_id() {
  to_connection_id_ = 0u;
  clear_has_to_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamNetworkingP2PRendezvous::to_connection_id() const {
  return to_connection_id_;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_to_connection_id(::google::protobuf::uint32 value) {
  set_has_to_connection_id();
  to_connection_id_ = value;
}

// optional bytes sdr_routes = 2;
inline bool CMsgSteamNetworkingP2PRendezvous::has_sdr_routes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_has_sdr_routes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_has_sdr_routes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_sdr_routes() {
  if (sdr_routes_ != &::google::protobuf::internal::kEmptyString) {
    sdr_routes_->clear();
  }
  clear_has_sdr_routes();
}
inline const ::std::string& CMsgSteamNetworkingP2PRendezvous::sdr_routes() const {
  return *sdr_routes_;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_sdr_routes(const ::std::string& value) {
  set_has_sdr_routes();
  if (sdr_routes_ == &::google::protobuf::internal::kEmptyString) {
    sdr_routes_ = new ::std::string;
  }
  sdr_routes_->assign(value);
}
inline void CMsgSteamNetworkingP2PRendezvous::set_sdr_routes(const char* value) {
  set_has_sdr_routes();
  if (sdr_routes_ == &::google::protobuf::internal::kEmptyString) {
    sdr_routes_ = new ::std::string;
  }
  sdr_routes_->assign(value);
}
inline void CMsgSteamNetworkingP2PRendezvous::set_sdr_routes(const void* value, size_t size) {
  set_has_sdr_routes();
  if (sdr_routes_ == &::google::protobuf::internal::kEmptyString) {
    sdr_routes_ = new ::std::string;
  }
  sdr_routes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamNetworkingP2PRendezvous::mutable_sdr_routes() {
  set_has_sdr_routes();
  if (sdr_routes_ == &::google::protobuf::internal::kEmptyString) {
    sdr_routes_ = new ::std::string;
  }
  return sdr_routes_;
}
inline ::std::string* CMsgSteamNetworkingP2PRendezvous::release_sdr_routes() {
  clear_has_sdr_routes();
  if (sdr_routes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sdr_routes_;
    sdr_routes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamNetworkingP2PRendezvous::set_allocated_sdr_routes(::std::string* sdr_routes) {
  if (sdr_routes_ != &::google::protobuf::internal::kEmptyString) {
    delete sdr_routes_;
  }
  if (sdr_routes) {
    set_has_sdr_routes();
    sdr_routes_ = sdr_routes;
  } else {
    clear_has_sdr_routes();
    sdr_routes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ack_peer_routes_revision = 3;
inline bool CMsgSteamNetworkingP2PRendezvous::has_ack_peer_routes_revision() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_has_ack_peer_routes_revision() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_has_ack_peer_routes_revision() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_ack_peer_routes_revision() {
  ack_peer_routes_revision_ = 0u;
  clear_has_ack_peer_routes_revision();
}
inline ::google::protobuf::uint32 CMsgSteamNetworkingP2PRendezvous::ack_peer_routes_revision() const {
  return ack_peer_routes_revision_;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_ack_peer_routes_revision(::google::protobuf::uint32 value) {
  set_has_ack_peer_routes_revision();
  ack_peer_routes_revision_ = value;
}

// optional bool ice_enabled = 7;
inline bool CMsgSteamNetworkingP2PRendezvous::has_ice_enabled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_has_ice_enabled() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_has_ice_enabled() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_ice_enabled() {
  ice_enabled_ = false;
  clear_has_ice_enabled();
}
inline bool CMsgSteamNetworkingP2PRendezvous::ice_enabled() const {
  return ice_enabled_;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_ice_enabled(bool value) {
  set_has_ice_enabled();
  ice_enabled_ = value;
}

// optional .CMsgSteamNetworkingP2PRendezvous.ConnectRequest connect_request = 4;
inline bool CMsgSteamNetworkingP2PRendezvous::has_connect_request() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_has_connect_request() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_has_connect_request() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_connect_request() {
  if (connect_request_ != NULL) connect_request_->::CMsgSteamNetworkingP2PRendezvous_ConnectRequest::Clear();
  clear_has_connect_request();
}
inline const ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest& CMsgSteamNetworkingP2PRendezvous::connect_request() const {
  return connect_request_ != NULL ? *connect_request_ : *default_instance_->connect_request_;
}
inline ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest* CMsgSteamNetworkingP2PRendezvous::mutable_connect_request() {
  set_has_connect_request();
  if (connect_request_ == NULL) connect_request_ = new ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest;
  return connect_request_;
}
inline ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest* CMsgSteamNetworkingP2PRendezvous::release_connect_request() {
  clear_has_connect_request();
  ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest* temp = connect_request_;
  connect_request_ = NULL;
  return temp;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_allocated_connect_request(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest* connect_request) {
  delete connect_request_;
  connect_request_ = connect_request;
  if (connect_request) {
    set_has_connect_request();
  } else {
    clear_has_connect_request();
  }
}

// optional .CMsgSteamNetworkingP2PRendezvous.ConnectOK connect_ok = 5;
inline bool CMsgSteamNetworkingP2PRendezvous::has_connect_ok() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_has_connect_ok() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_has_connect_ok() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_connect_ok() {
  if (connect_ok_ != NULL) connect_ok_->::CMsgSteamNetworkingP2PRendezvous_ConnectOK::Clear();
  clear_has_connect_ok();
}
inline const ::CMsgSteamNetworkingP2PRendezvous_ConnectOK& CMsgSteamNetworkingP2PRendezvous::connect_ok() const {
  return connect_ok_ != NULL ? *connect_ok_ : *default_instance_->connect_ok_;
}
inline ::CMsgSteamNetworkingP2PRendezvous_ConnectOK* CMsgSteamNetworkingP2PRendezvous::mutable_connect_ok() {
  set_has_connect_ok();
  if (connect_ok_ == NULL) connect_ok_ = new ::CMsgSteamNetworkingP2PRendezvous_ConnectOK;
  return connect_ok_;
}
inline ::CMsgSteamNetworkingP2PRendezvous_ConnectOK* CMsgSteamNetworkingP2PRendezvous::release_connect_ok() {
  clear_has_connect_ok();
  ::CMsgSteamNetworkingP2PRendezvous_ConnectOK* temp = connect_ok_;
  connect_ok_ = NULL;
  return temp;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_allocated_connect_ok(::CMsgSteamNetworkingP2PRendezvous_ConnectOK* connect_ok) {
  delete connect_ok_;
  connect_ok_ = connect_ok;
  if (connect_ok) {
    set_has_connect_ok();
  } else {
    clear_has_connect_ok();
  }
}

// optional .CMsgSteamNetworkingP2PRendezvous.ConnectionClosed connection_closed = 6;
inline bool CMsgSteamNetworkingP2PRendezvous::has_connection_closed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_has_connection_closed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_has_connection_closed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_connection_closed() {
  if (connection_closed_ != NULL) connection_closed_->::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::Clear();
  clear_has_connection_closed();
}
inline const ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& CMsgSteamNetworkingP2PRendezvous::connection_closed() const {
  return connection_closed_ != NULL ? *connection_closed_ : *default_instance_->connection_closed_;
}
inline ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* CMsgSteamNetworkingP2PRendezvous::mutable_connection_closed() {
  set_has_connection_closed();
  if (connection_closed_ == NULL) connection_closed_ = new ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed;
  return connection_closed_;
}
inline ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* CMsgSteamNetworkingP2PRendezvous::release_connection_closed() {
  clear_has_connection_closed();
  ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* temp = connection_closed_;
  connection_closed_ = NULL;
  return temp;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_allocated_connection_closed(::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* connection_closed) {
  delete connection_closed_;
  connection_closed_ = connection_closed;
  if (connection_closed) {
    set_has_connection_closed();
  } else {
    clear_has_connection_closed();
  }
}

// optional uint32 ack_reliable_msg = 11;
inline bool CMsgSteamNetworkingP2PRendezvous::has_ack_reliable_msg() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_has_ack_reliable_msg() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_has_ack_reliable_msg() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_ack_reliable_msg() {
  ack_reliable_msg_ = 0u;
  clear_has_ack_reliable_msg();
}
inline ::google::protobuf::uint32 CMsgSteamNetworkingP2PRendezvous::ack_reliable_msg() const {
  return ack_reliable_msg_;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_ack_reliable_msg(::google::protobuf::uint32 value) {
  set_has_ack_reliable_msg();
  ack_reliable_msg_ = value;
}

// optional uint32 first_reliable_msg = 12;
inline bool CMsgSteamNetworkingP2PRendezvous::has_first_reliable_msg() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_has_first_reliable_msg() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_has_first_reliable_msg() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_first_reliable_msg() {
  first_reliable_msg_ = 0u;
  clear_has_first_reliable_msg();
}
inline ::google::protobuf::uint32 CMsgSteamNetworkingP2PRendezvous::first_reliable_msg() const {
  return first_reliable_msg_;
}
inline void CMsgSteamNetworkingP2PRendezvous::set_first_reliable_msg(::google::protobuf::uint32 value) {
  set_has_first_reliable_msg();
  first_reliable_msg_ = value;
}

// repeated .CMsgSteamNetworkingP2PRendezvous.ReliableMessage reliable_messages = 13;
inline int CMsgSteamNetworkingP2PRendezvous::reliable_messages_size() const {
  return reliable_messages_.size();
}
inline void CMsgSteamNetworkingP2PRendezvous::clear_reliable_messages() {
  reliable_messages_.Clear();
}
inline const ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage& CMsgSteamNetworkingP2PRendezvous::reliable_messages(int index) const {
  return reliable_messages_.Get(index);
}
inline ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage* CMsgSteamNetworkingP2PRendezvous::mutable_reliable_messages(int index) {
  return reliable_messages_.Mutable(index);
}
inline ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage* CMsgSteamNetworkingP2PRendezvous::add_reliable_messages() {
  return reliable_messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage >&
CMsgSteamNetworkingP2PRendezvous::reliable_messages() const {
  return reliable_messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage >*
CMsgSteamNetworkingP2PRendezvous::mutable_reliable_messages() {
  return &reliable_messages_;
}

// -------------------------------------------------------------------

// CMsgSteamNetworkingICESessionSummary

// optional uint32 failure_reason_code = 7;
inline bool CMsgSteamNetworkingICESessionSummary::has_failure_reason_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamNetworkingICESessionSummary::set_has_failure_reason_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamNetworkingICESessionSummary::clear_has_failure_reason_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamNetworkingICESessionSummary::clear_failure_reason_code() {
  failure_reason_code_ = 0u;
  clear_has_failure_reason_code();
}
inline ::google::protobuf::uint32 CMsgSteamNetworkingICESessionSummary::failure_reason_code() const {
  return failure_reason_code_;
}
inline void CMsgSteamNetworkingICESessionSummary::set_failure_reason_code(::google::protobuf::uint32 value) {
  set_has_failure_reason_code();
  failure_reason_code_ = value;
}

// optional uint32 local_candidate_types = 1;
inline bool CMsgSteamNetworkingICESessionSummary::has_local_candidate_types() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamNetworkingICESessionSummary::set_has_local_candidate_types() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamNetworkingICESessionSummary::clear_has_local_candidate_types() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamNetworkingICESessionSummary::clear_local_candidate_types() {
  local_candidate_types_ = 0u;
  clear_has_local_candidate_types();
}
inline ::google::protobuf::uint32 CMsgSteamNetworkingICESessionSummary::local_candidate_types() const {
  return local_candidate_types_;
}
inline void CMsgSteamNetworkingICESessionSummary::set_local_candidate_types(::google::protobuf::uint32 value) {
  set_has_local_candidate_types();
  local_candidate_types_ = value;
}

// optional uint32 remote_candidate_types = 2;
inline bool CMsgSteamNetworkingICESessionSummary::has_remote_candidate_types() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamNetworkingICESessionSummary::set_has_remote_candidate_types() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamNetworkingICESessionSummary::clear_has_remote_candidate_types() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamNetworkingICESessionSummary::clear_remote_candidate_types() {
  remote_candidate_types_ = 0u;
  clear_has_remote_candidate_types();
}
inline ::google::protobuf::uint32 CMsgSteamNetworkingICESessionSummary::remote_candidate_types() const {
  return remote_candidate_types_;
}
inline void CMsgSteamNetworkingICESessionSummary::set_remote_candidate_types(::google::protobuf::uint32 value) {
  set_has_remote_candidate_types();
  remote_candidate_types_ = value;
}

// optional uint32 initial_route_kind = 3;
inline bool CMsgSteamNetworkingICESessionSummary::has_initial_route_kind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamNetworkingICESessionSummary::set_has_initial_route_kind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamNetworkingICESessionSummary::clear_has_initial_route_kind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamNetworkingICESessionSummary::clear_initial_route_kind() {
  initial_route_kind_ = 0u;
  clear_has_initial_route_kind();
}
inline ::google::protobuf::uint32 CMsgSteamNetworkingICESessionSummary::initial_route_kind() const {
  return initial_route_kind_;
}
inline void CMsgSteamNetworkingICESessionSummary::set_initial_route_kind(::google::protobuf::uint32 value) {
  set_has_initial_route_kind();
  initial_route_kind_ = value;
}

// optional uint32 initial_ping = 4;
inline bool CMsgSteamNetworkingICESessionSummary::has_initial_ping() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamNetworkingICESessionSummary::set_has_initial_ping() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamNetworkingICESessionSummary::clear_has_initial_ping() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamNetworkingICESessionSummary::clear_initial_ping() {
  initial_ping_ = 0u;
  clear_has_initial_ping();
}
inline ::google::protobuf::uint32 CMsgSteamNetworkingICESessionSummary::initial_ping() const {
  return initial_ping_;
}
inline void CMsgSteamNetworkingICESessionSummary::set_initial_ping(::google::protobuf::uint32 value) {
  set_has_initial_ping();
  initial_ping_ = value;
}

// optional uint32 initial_score = 6;
inline bool CMsgSteamNetworkingICESessionSummary::has_initial_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamNetworkingICESessionSummary::set_has_initial_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamNetworkingICESessionSummary::clear_has_initial_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamNetworkingICESessionSummary::clear_initial_score() {
  initial_score_ = 0u;
  clear_has_initial_score();
}
inline ::google::protobuf::uint32 CMsgSteamNetworkingICESessionSummary::initial_score() const {
  return initial_score_;
}
inline void CMsgSteamNetworkingICESessionSummary::set_initial_score(::google::protobuf::uint32 value) {
  set_has_initial_score();
  initial_score_ = value;
}

// optional uint32 negotiation_ms = 5;
inline bool CMsgSteamNetworkingICESessionSummary::has_negotiation_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamNetworkingICESessionSummary::set_has_negotiation_ms() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamNetworkingICESessionSummary::clear_has_negotiation_ms() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamNetworkingICESessionSummary::clear_negotiation_ms() {
  negotiation_ms_ = 0u;
  clear_has_negotiation_ms();
}
inline ::google::protobuf::uint32 CMsgSteamNetworkingICESessionSummary::negotiation_ms() const {
  return negotiation_ms_;
}
inline void CMsgSteamNetworkingICESessionSummary::set_negotiation_ms(::google::protobuf::uint32 value) {
  set_has_negotiation_ms();
  negotiation_ms_ = value;
}

// optional uint32 selected_seconds = 12;
inline bool CMsgSteamNetworkingICESessionSummary::has_selected_seconds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamNetworkingICESessionSummary::set_has_selected_seconds() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamNetworkingICESessionSummary::clear_has_selected_seconds() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamNetworkingICESessionSummary::clear_selected_seconds() {
  selected_seconds_ = 0u;
  clear_has_selected_seconds();
}
inline ::google::protobuf::uint32 CMsgSteamNetworkingICESessionSummary::selected_seconds() const {
  return selected_seconds_;
}
inline void CMsgSteamNetworkingICESessionSummary::set_selected_seconds(::google::protobuf::uint32 value) {
  set_has_selected_seconds();
  selected_seconds_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgSteamDatagramSessionCryptInfo_EKeyType>() {
  return ::CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESteamNetworkingSocketsCipher>() {
  return ::ESteamNetworkingSocketsCipher_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steamnetworkingsockets_5fmessages_2eproto__INCLUDED
