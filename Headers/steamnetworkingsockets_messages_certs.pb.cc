// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages_certs.proto
#pragma once
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steamnetworkingsockets_messages_certs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgSteamNetworkingIdentityLegacyBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamNetworkingIdentityLegacyBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramCertificate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramCertificate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramCertificate_EKeyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramCertificateSigned_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramCertificateSigned_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramCertificateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramCertificateRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steamnetworkingsockets_messages_certs.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgSteamNetworkingIdentityLegacyBinary_descriptor_ = file->message_type(0);
  static const int CMsgSteamNetworkingIdentityLegacyBinary_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, xbox_pairwise_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, generic_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, generic_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, ipv6_and_port_),
  };
  CMsgSteamNetworkingIdentityLegacyBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamNetworkingIdentityLegacyBinary_descriptor_,
      CMsgSteamNetworkingIdentityLegacyBinary::default_instance_,
      CMsgSteamNetworkingIdentityLegacyBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamNetworkingIdentityLegacyBinary));
  CMsgSteamDatagramCertificate_descriptor_ = file->message_type(1);
  static const int CMsgSteamDatagramCertificate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, key_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, key_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, legacy_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, legacy_identity_binary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, identity_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, gameserver_datacenter_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, time_created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, time_expiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, app_ids_),
  };
  CMsgSteamDatagramCertificate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramCertificate_descriptor_,
      CMsgSteamDatagramCertificate::default_instance_,
      CMsgSteamDatagramCertificate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramCertificate));
  CMsgSteamDatagramCertificate_EKeyType_descriptor_ = CMsgSteamDatagramCertificate_descriptor_->enum_type(0);
  CMsgSteamDatagramCertificateSigned_descriptor_ = file->message_type(2);
  static const int CMsgSteamDatagramCertificateSigned_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, cert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, ca_key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, ca_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, private_key_data_),
  };
  CMsgSteamDatagramCertificateSigned_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramCertificateSigned_descriptor_,
      CMsgSteamDatagramCertificateSigned::default_instance_,
      CMsgSteamDatagramCertificateSigned_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramCertificateSigned));
  CMsgSteamDatagramCertificateRequest_descriptor_ = file->message_type(3);
  static const int CMsgSteamDatagramCertificateRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificateRequest, cert_),
  };
  CMsgSteamDatagramCertificateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramCertificateRequest_descriptor_,
      CMsgSteamDatagramCertificateRequest::default_instance_,
      CMsgSteamDatagramCertificateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramCertificateRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamNetworkingIdentityLegacyBinary_descriptor_, &CMsgSteamNetworkingIdentityLegacyBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramCertificate_descriptor_, &CMsgSteamDatagramCertificate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramCertificateSigned_descriptor_, &CMsgSteamDatagramCertificateSigned::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramCertificateRequest_descriptor_, &CMsgSteamDatagramCertificateRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  delete CMsgSteamNetworkingIdentityLegacyBinary::default_instance_;
  delete CMsgSteamNetworkingIdentityLegacyBinary_reflection_;
  delete CMsgSteamDatagramCertificate::default_instance_;
  delete CMsgSteamDatagramCertificate_reflection_;
  delete CMsgSteamDatagramCertificateSigned::default_instance_;
  delete CMsgSteamDatagramCertificateSigned_reflection_;
  delete CMsgSteamDatagramCertificateRequest::default_instance_;
  delete CMsgSteamDatagramCertificateRequest_reflection_;
}

void protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n+steamnetworkingsockets_messages_certs."
    "proto\"\233\001\n\'CMsgSteamNetworkingIdentityLeg"
    "acyBinary\022\020\n\010steam_id\030\020 \001(\006\022\030\n\020xbox_pair"
    "wise_id\030\021 \001(\t\022\025\n\rgeneric_bytes\030\002 \001(\014\022\026\n\016"
    "generic_string\030\003 \001(\t\022\025\n\ripv6_and_port\030\004 "
    "\001(\014\"\364\002\n\034CMsgSteamDatagramCertificate\022A\n\010"
    "key_type\030\001 \001(\0162&.CMsgSteamDatagramCertif"
    "icate.EKeyType:\007INVALID\022\020\n\010key_data\030\002 \001("
    "\014\022\027\n\017legacy_steam_id\030\004 \001(\006\022H\n\026legacy_ide"
    "ntity_binary\030\013 \001(\0132(.CMsgSteamNetworking"
    "IdentityLegacyBinary\022\027\n\017identity_string\030"
    "\014 \001(\t\022!\n\031gameserver_datacenter_ids\030\005 \003(\007"
    "\022\024\n\014time_created\030\010 \001(\007\022\023\n\013time_expiry\030\t "
    "\001(\007\022\017\n\007app_ids\030\n \003(\r\"$\n\010EKeyType\022\013\n\007INVA"
    "LID\020\000\022\013\n\007ED25519\020\001\"u\n\"CMsgSteamDatagramC"
    "ertificateSigned\022\014\n\004cert\030\004 \001(\014\022\021\n\tca_key"
    "_id\030\005 \001(\006\022\024\n\014ca_signature\030\006 \001(\014\022\030\n\020priva"
    "te_key_data\030\001 \001(\014\"R\n#CMsgSteamDatagramCe"
    "rtificateRequest\022+\n\004cert\030\001 \001(\0132\035.CMsgSte"
    "amDatagramCertificateB\005H\001\200\001\000", 788);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steamnetworkingsockets_messages_certs.proto", &protobuf_RegisterTypes);
  CMsgSteamNetworkingIdentityLegacyBinary::default_instance_ = new CMsgSteamNetworkingIdentityLegacyBinary();
  CMsgSteamDatagramCertificate::default_instance_ = new CMsgSteamDatagramCertificate();
  CMsgSteamDatagramCertificateSigned::default_instance_ = new CMsgSteamDatagramCertificateSigned();
  CMsgSteamDatagramCertificateRequest::default_instance_ = new CMsgSteamDatagramCertificateRequest();
  CMsgSteamNetworkingIdentityLegacyBinary::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramCertificate::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramCertificateSigned::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramCertificateRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fcerts_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steamnetworkingsockets_5fmessages_5fcerts_2eproto {
  StaticDescriptorInitializer_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
    protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  }
} static_descriptor_initializer_steamnetworkingsockets_5fmessages_5fcerts_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamNetworkingIdentityLegacyBinary::kSteamIdFieldNumber;
const int CMsgSteamNetworkingIdentityLegacyBinary::kXboxPairwiseIdFieldNumber;
const int CMsgSteamNetworkingIdentityLegacyBinary::kGenericBytesFieldNumber;
const int CMsgSteamNetworkingIdentityLegacyBinary::kGenericStringFieldNumber;
const int CMsgSteamNetworkingIdentityLegacyBinary::kIpv6AndPortFieldNumber;
#endif  // !_MSC_VER

CMsgSteamNetworkingIdentityLegacyBinary::CMsgSteamNetworkingIdentityLegacyBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamNetworkingIdentityLegacyBinary::InitAsDefaultInstance() {
}

CMsgSteamNetworkingIdentityLegacyBinary::CMsgSteamNetworkingIdentityLegacyBinary(const CMsgSteamNetworkingIdentityLegacyBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamNetworkingIdentityLegacyBinary::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  xbox_pairwise_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  generic_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  generic_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ipv6_and_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamNetworkingIdentityLegacyBinary::~CMsgSteamNetworkingIdentityLegacyBinary() {
  SharedDtor();
}

void CMsgSteamNetworkingIdentityLegacyBinary::SharedDtor() {
  if (xbox_pairwise_id_ != &::google::protobuf::internal::kEmptyString) {
    delete xbox_pairwise_id_;
  }
  if (generic_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete generic_bytes_;
  }
  if (generic_string_ != &::google::protobuf::internal::kEmptyString) {
    delete generic_string_;
  }
  if (ipv6_and_port_ != &::google::protobuf::internal::kEmptyString) {
    delete ipv6_and_port_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamNetworkingIdentityLegacyBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamNetworkingIdentityLegacyBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamNetworkingIdentityLegacyBinary_descriptor_;
}

const CMsgSteamNetworkingIdentityLegacyBinary& CMsgSteamNetworkingIdentityLegacyBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  return *default_instance_;
}

CMsgSteamNetworkingIdentityLegacyBinary* CMsgSteamNetworkingIdentityLegacyBinary::default_instance_ = NULL;

CMsgSteamNetworkingIdentityLegacyBinary* CMsgSteamNetworkingIdentityLegacyBinary::New() const {
  return new CMsgSteamNetworkingIdentityLegacyBinary;
}

void CMsgSteamNetworkingIdentityLegacyBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    if (has_xbox_pairwise_id()) {
      if (xbox_pairwise_id_ != &::google::protobuf::internal::kEmptyString) {
        xbox_pairwise_id_->clear();
      }
    }
    if (has_generic_bytes()) {
      if (generic_bytes_ != &::google::protobuf::internal::kEmptyString) {
        generic_bytes_->clear();
      }
    }
    if (has_generic_string()) {
      if (generic_string_ != &::google::protobuf::internal::kEmptyString) {
        generic_string_->clear();
      }
    }
    if (has_ipv6_and_port()) {
      if (ipv6_and_port_ != &::google::protobuf::internal::kEmptyString) {
        ipv6_and_port_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamNetworkingIdentityLegacyBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes generic_bytes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generic_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_generic_string;
        break;
      }

      // optional string generic_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generic_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_generic_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->generic_string().data(), this->generic_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ipv6_and_port;
        break;
      }

      // optional bytes ipv6_and_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv6_and_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ipv6_and_port()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_steam_id;
        break;
      }

      // optional fixed64 steam_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_xbox_pairwise_id;
        break;
      }

      // optional string xbox_pairwise_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xbox_pairwise_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xbox_pairwise_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xbox_pairwise_id().data(), this->xbox_pairwise_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamNetworkingIdentityLegacyBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes generic_bytes = 2;
  if (has_generic_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->generic_bytes(), output);
  }

  // optional string generic_string = 3;
  if (has_generic_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->generic_string().data(), this->generic_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->generic_string(), output);
  }

  // optional bytes ipv6_and_port = 4;
  if (has_ipv6_and_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->ipv6_and_port(), output);
  }

  // optional fixed64 steam_id = 16;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(16, this->steam_id(), output);
  }

  // optional string xbox_pairwise_id = 17;
  if (has_xbox_pairwise_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xbox_pairwise_id().data(), this->xbox_pairwise_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->xbox_pairwise_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamNetworkingIdentityLegacyBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes generic_bytes = 2;
  if (has_generic_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->generic_bytes(), target);
  }

  // optional string generic_string = 3;
  if (has_generic_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->generic_string().data(), this->generic_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->generic_string(), target);
  }

  // optional bytes ipv6_and_port = 4;
  if (has_ipv6_and_port()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ipv6_and_port(), target);
  }

  // optional fixed64 steam_id = 16;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(16, this->steam_id(), target);
  }

  // optional string xbox_pairwise_id = 17;
  if (has_xbox_pairwise_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xbox_pairwise_id().data(), this->xbox_pairwise_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->xbox_pairwise_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamNetworkingIdentityLegacyBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 16;
    if (has_steam_id()) {
      total_size += 2 + 8;
    }

    // optional string xbox_pairwise_id = 17;
    if (has_xbox_pairwise_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xbox_pairwise_id());
    }

    // optional bytes generic_bytes = 2;
    if (has_generic_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->generic_bytes());
    }

    // optional string generic_string = 3;
    if (has_generic_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->generic_string());
    }

    // optional bytes ipv6_and_port = 4;
    if (has_ipv6_and_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ipv6_and_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamNetworkingIdentityLegacyBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamNetworkingIdentityLegacyBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamNetworkingIdentityLegacyBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingIdentityLegacyBinary::MergeFrom(const CMsgSteamNetworkingIdentityLegacyBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_xbox_pairwise_id()) {
      set_xbox_pairwise_id(from.xbox_pairwise_id());
    }
    if (from.has_generic_bytes()) {
      set_generic_bytes(from.generic_bytes());
    }
    if (from.has_generic_string()) {
      set_generic_string(from.generic_string());
    }
    if (from.has_ipv6_and_port()) {
      set_ipv6_and_port(from.ipv6_and_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamNetworkingIdentityLegacyBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingIdentityLegacyBinary::CopyFrom(const CMsgSteamNetworkingIdentityLegacyBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingIdentityLegacyBinary::IsInitialized() const {

  return true;
}

void CMsgSteamNetworkingIdentityLegacyBinary::Swap(CMsgSteamNetworkingIdentityLegacyBinary* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(xbox_pairwise_id_, other->xbox_pairwise_id_);
    std::swap(generic_bytes_, other->generic_bytes_);
    std::swap(generic_string_, other->generic_string_);
    std::swap(ipv6_and_port_, other->ipv6_and_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamNetworkingIdentityLegacyBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamNetworkingIdentityLegacyBinary_descriptor_;
  metadata.reflection = CMsgSteamNetworkingIdentityLegacyBinary_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramCertificate_EKeyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramCertificate_EKeyType_descriptor_;
}
bool CMsgSteamDatagramCertificate_EKeyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::INVALID;
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::ED25519;
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::EKeyType_MIN;
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::EKeyType_MAX;
const int CMsgSteamDatagramCertificate::EKeyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgSteamDatagramCertificate::kKeyTypeFieldNumber;
const int CMsgSteamDatagramCertificate::kKeyDataFieldNumber;
const int CMsgSteamDatagramCertificate::kLegacySteamIdFieldNumber;
const int CMsgSteamDatagramCertificate::kLegacyIdentityBinaryFieldNumber;
const int CMsgSteamDatagramCertificate::kIdentityStringFieldNumber;
const int CMsgSteamDatagramCertificate::kGameserverDatacenterIdsFieldNumber;
const int CMsgSteamDatagramCertificate::kTimeCreatedFieldNumber;
const int CMsgSteamDatagramCertificate::kTimeExpiryFieldNumber;
const int CMsgSteamDatagramCertificate::kAppIdsFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramCertificate::InitAsDefaultInstance() {
  legacy_identity_binary_ = const_cast< ::CMsgSteamNetworkingIdentityLegacyBinary*>(&::CMsgSteamNetworkingIdentityLegacyBinary::default_instance());
}

CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate(const CMsgSteamDatagramCertificate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificate::SharedCtor() {
  _cached_size_ = 0;
  key_type_ = 0;
  key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  legacy_steam_id_ = GOOGLE_ULONGLONG(0);
  legacy_identity_binary_ = NULL;
  identity_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_created_ = 0u;
  time_expiry_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramCertificate::~CMsgSteamDatagramCertificate() {
  SharedDtor();
}

void CMsgSteamDatagramCertificate::SharedDtor() {
  if (key_data_ != &::google::protobuf::internal::kEmptyString) {
    delete key_data_;
  }
  if (identity_string_ != &::google::protobuf::internal::kEmptyString) {
    delete identity_string_;
  }
  if (this != default_instance_) {
    delete legacy_identity_binary_;
  }
}

void CMsgSteamDatagramCertificate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramCertificate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramCertificate_descriptor_;
}

const CMsgSteamDatagramCertificate& CMsgSteamDatagramCertificate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramCertificate* CMsgSteamDatagramCertificate::default_instance_ = NULL;

CMsgSteamDatagramCertificate* CMsgSteamDatagramCertificate::New() const {
  return new CMsgSteamDatagramCertificate;
}

void CMsgSteamDatagramCertificate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_type_ = 0;
    if (has_key_data()) {
      if (key_data_ != &::google::protobuf::internal::kEmptyString) {
        key_data_->clear();
      }
    }
    legacy_steam_id_ = GOOGLE_ULONGLONG(0);
    if (has_legacy_identity_binary()) {
      if (legacy_identity_binary_ != NULL) legacy_identity_binary_->::CMsgSteamNetworkingIdentityLegacyBinary::Clear();
    }
    if (has_identity_string()) {
      if (identity_string_ != &::google::protobuf::internal::kEmptyString) {
        identity_string_->clear();
      }
    }
    time_created_ = 0u;
    time_expiry_ = 0u;
  }
  gameserver_datacenter_ids_.Clear();
  app_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramCertificate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgSteamDatagramCertificate_EKeyType_IsValid(value)) {
            set_key_type(static_cast< ::CMsgSteamDatagramCertificate_EKeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key_data;
        break;
      }

      // optional bytes key_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_legacy_steam_id;
        break;
      }

      // optional fixed64 legacy_steam_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_legacy_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_steam_id_)));
          set_has_legacy_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_gameserver_datacenter_ids;
        break;
      }

      // repeated fixed32 gameserver_datacenter_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gameserver_datacenter_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 45, input, this->mutable_gameserver_datacenter_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_gameserver_datacenter_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_gameserver_datacenter_ids;
        if (input->ExpectTag(69)) goto parse_time_created;
        break;
      }

      // optional fixed32 time_created = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_created_)));
          set_has_time_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_time_expiry;
        break;
      }

      // optional fixed32 time_expiry = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_expiry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_expiry_)));
          set_has_time_expiry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_app_ids;
        break;
      }

      // repeated uint32 app_ids = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_app_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_app_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_app_ids;
        if (input->ExpectTag(90)) goto parse_legacy_identity_binary;
        break;
      }

      // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legacy_identity_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_legacy_identity_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_identity_string;
        break;
      }

      // optional string identity_string = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identity_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identity_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identity_string().data(), this->identity_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramCertificate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->key_type(), output);
  }

  // optional bytes key_data = 2;
  if (has_key_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key_data(), output);
  }

  // optional fixed64 legacy_steam_id = 4;
  if (has_legacy_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->legacy_steam_id(), output);
  }

  // repeated fixed32 gameserver_datacenter_ids = 5;
  for (int i = 0; i < this->gameserver_datacenter_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      5, this->gameserver_datacenter_ids(i), output);
  }

  // optional fixed32 time_created = 8;
  if (has_time_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->time_created(), output);
  }

  // optional fixed32 time_expiry = 9;
  if (has_time_expiry()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->time_expiry(), output);
  }

  // repeated uint32 app_ids = 10;
  for (int i = 0; i < this->app_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->app_ids(i), output);
  }

  // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
  if (has_legacy_identity_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->legacy_identity_binary(), output);
  }

  // optional string identity_string = 12;
  if (has_identity_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identity_string().data(), this->identity_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->identity_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramCertificate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
  if (has_key_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->key_type(), target);
  }

  // optional bytes key_data = 2;
  if (has_key_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key_data(), target);
  }

  // optional fixed64 legacy_steam_id = 4;
  if (has_legacy_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->legacy_steam_id(), target);
  }

  // repeated fixed32 gameserver_datacenter_ids = 5;
  for (int i = 0; i < this->gameserver_datacenter_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(5, this->gameserver_datacenter_ids(i), target);
  }

  // optional fixed32 time_created = 8;
  if (has_time_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->time_created(), target);
  }

  // optional fixed32 time_expiry = 9;
  if (has_time_expiry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->time_expiry(), target);
  }

  // repeated uint32 app_ids = 10;
  for (int i = 0; i < this->app_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->app_ids(i), target);
  }

  // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
  if (has_legacy_identity_binary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->legacy_identity_binary(), target);
  }

  // optional string identity_string = 12;
  if (has_identity_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identity_string().data(), this->identity_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->identity_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramCertificate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_type());
    }

    // optional bytes key_data = 2;
    if (has_key_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key_data());
    }

    // optional fixed64 legacy_steam_id = 4;
    if (has_legacy_steam_id()) {
      total_size += 1 + 8;
    }

    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
    if (has_legacy_identity_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->legacy_identity_binary());
    }

    // optional string identity_string = 12;
    if (has_identity_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identity_string());
    }

    // optional fixed32 time_created = 8;
    if (has_time_created()) {
      total_size += 1 + 4;
    }

    // optional fixed32 time_expiry = 9;
    if (has_time_expiry()) {
      total_size += 1 + 4;
    }

  }
  // repeated fixed32 gameserver_datacenter_ids = 5;
  {
    int data_size = 0;
    data_size = 4 * this->gameserver_datacenter_ids_size();
    total_size += 1 * this->gameserver_datacenter_ids_size() + data_size;
  }

  // repeated uint32 app_ids = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->app_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->app_ids(i));
    }
    total_size += 1 * this->app_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramCertificate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramCertificate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramCertificate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCertificate::MergeFrom(const CMsgSteamDatagramCertificate& from) {
  GOOGLE_CHECK_NE(&from, this);
  gameserver_datacenter_ids_.MergeFrom(from.gameserver_datacenter_ids_);
  app_ids_.MergeFrom(from.app_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_type()) {
      set_key_type(from.key_type());
    }
    if (from.has_key_data()) {
      set_key_data(from.key_data());
    }
    if (from.has_legacy_steam_id()) {
      set_legacy_steam_id(from.legacy_steam_id());
    }
    if (from.has_legacy_identity_binary()) {
      mutable_legacy_identity_binary()->::CMsgSteamNetworkingIdentityLegacyBinary::MergeFrom(from.legacy_identity_binary());
    }
    if (from.has_identity_string()) {
      set_identity_string(from.identity_string());
    }
    if (from.has_time_created()) {
      set_time_created(from.time_created());
    }
    if (from.has_time_expiry()) {
      set_time_expiry(from.time_expiry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramCertificate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificate::CopyFrom(const CMsgSteamDatagramCertificate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificate::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramCertificate::Swap(CMsgSteamDatagramCertificate* other) {
  if (other != this) {
    std::swap(key_type_, other->key_type_);
    std::swap(key_data_, other->key_data_);
    std::swap(legacy_steam_id_, other->legacy_steam_id_);
    std::swap(legacy_identity_binary_, other->legacy_identity_binary_);
    std::swap(identity_string_, other->identity_string_);
    gameserver_datacenter_ids_.Swap(&other->gameserver_datacenter_ids_);
    std::swap(time_created_, other->time_created_);
    std::swap(time_expiry_, other->time_expiry_);
    app_ids_.Swap(&other->app_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramCertificate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramCertificate_descriptor_;
  metadata.reflection = CMsgSteamDatagramCertificate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramCertificateSigned::kCertFieldNumber;
const int CMsgSteamDatagramCertificateSigned::kCaKeyIdFieldNumber;
const int CMsgSteamDatagramCertificateSigned::kCaSignatureFieldNumber;
const int CMsgSteamDatagramCertificateSigned::kPrivateKeyDataFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramCertificateSigned::InitAsDefaultInstance() {
}

CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned(const CMsgSteamDatagramCertificateSigned& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificateSigned::SharedCtor() {
  _cached_size_ = 0;
  cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ca_key_id_ = GOOGLE_ULONGLONG(0);
  ca_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  private_key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramCertificateSigned::~CMsgSteamDatagramCertificateSigned() {
  SharedDtor();
}

void CMsgSteamDatagramCertificateSigned::SharedDtor() {
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    delete cert_;
  }
  if (ca_signature_ != &::google::protobuf::internal::kEmptyString) {
    delete ca_signature_;
  }
  if (private_key_data_ != &::google::protobuf::internal::kEmptyString) {
    delete private_key_data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramCertificateSigned::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramCertificateSigned::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramCertificateSigned_descriptor_;
}

const CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramCertificateSigned::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramCertificateSigned::default_instance_ = NULL;

CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramCertificateSigned::New() const {
  return new CMsgSteamDatagramCertificateSigned;
}

void CMsgSteamDatagramCertificateSigned::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cert()) {
      if (cert_ != &::google::protobuf::internal::kEmptyString) {
        cert_->clear();
      }
    }
    ca_key_id_ = GOOGLE_ULONGLONG(0);
    if (has_ca_signature()) {
      if (ca_signature_ != &::google::protobuf::internal::kEmptyString) {
        ca_signature_->clear();
      }
    }
    if (has_private_key_data()) {
      if (private_key_data_ != &::google::protobuf::internal::kEmptyString) {
        private_key_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramCertificateSigned::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes private_key_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_private_key_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cert;
        break;
      }

      // optional bytes cert = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ca_key_id;
        break;
      }

      // optional fixed64 ca_key_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ca_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ca_key_id_)));
          set_has_ca_key_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ca_signature;
        break;
      }

      // optional bytes ca_signature = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ca_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ca_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramCertificateSigned::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes private_key_data = 1;
  if (has_private_key_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->private_key_data(), output);
  }

  // optional bytes cert = 4;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->cert(), output);
  }

  // optional fixed64 ca_key_id = 5;
  if (has_ca_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->ca_key_id(), output);
  }

  // optional bytes ca_signature = 6;
  if (has_ca_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->ca_signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramCertificateSigned::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes private_key_data = 1;
  if (has_private_key_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->private_key_data(), target);
  }

  // optional bytes cert = 4;
  if (has_cert()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cert(), target);
  }

  // optional fixed64 ca_key_id = 5;
  if (has_ca_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->ca_key_id(), target);
  }

  // optional bytes ca_signature = 6;
  if (has_ca_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->ca_signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramCertificateSigned::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes cert = 4;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert());
    }

    // optional fixed64 ca_key_id = 5;
    if (has_ca_key_id()) {
      total_size += 1 + 8;
    }

    // optional bytes ca_signature = 6;
    if (has_ca_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ca_signature());
    }

    // optional bytes private_key_data = 1;
    if (has_private_key_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->private_key_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramCertificateSigned::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramCertificateSigned* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramCertificateSigned*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCertificateSigned::MergeFrom(const CMsgSteamDatagramCertificateSigned& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cert()) {
      set_cert(from.cert());
    }
    if (from.has_ca_key_id()) {
      set_ca_key_id(from.ca_key_id());
    }
    if (from.has_ca_signature()) {
      set_ca_signature(from.ca_signature());
    }
    if (from.has_private_key_data()) {
      set_private_key_data(from.private_key_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramCertificateSigned::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificateSigned::CopyFrom(const CMsgSteamDatagramCertificateSigned& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificateSigned::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramCertificateSigned::Swap(CMsgSteamDatagramCertificateSigned* other) {
  if (other != this) {
    std::swap(cert_, other->cert_);
    std::swap(ca_key_id_, other->ca_key_id_);
    std::swap(ca_signature_, other->ca_signature_);
    std::swap(private_key_data_, other->private_key_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramCertificateSigned::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramCertificateSigned_descriptor_;
  metadata.reflection = CMsgSteamDatagramCertificateSigned_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramCertificateRequest::kCertFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramCertificateRequest::CMsgSteamDatagramCertificateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramCertificateRequest::InitAsDefaultInstance() {
  cert_ = const_cast< ::CMsgSteamDatagramCertificate*>(&::CMsgSteamDatagramCertificate::default_instance());
}

CMsgSteamDatagramCertificateRequest::CMsgSteamDatagramCertificateRequest(const CMsgSteamDatagramCertificateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificateRequest::SharedCtor() {
  _cached_size_ = 0;
  cert_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramCertificateRequest::~CMsgSteamDatagramCertificateRequest() {
  SharedDtor();
}

void CMsgSteamDatagramCertificateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete cert_;
  }
}

void CMsgSteamDatagramCertificateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramCertificateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramCertificateRequest_descriptor_;
}

const CMsgSteamDatagramCertificateRequest& CMsgSteamDatagramCertificateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramCertificateRequest* CMsgSteamDatagramCertificateRequest::default_instance_ = NULL;

CMsgSteamDatagramCertificateRequest* CMsgSteamDatagramCertificateRequest::New() const {
  return new CMsgSteamDatagramCertificateRequest;
}

void CMsgSteamDatagramCertificateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cert()) {
      if (cert_ != NULL) cert_->::CMsgSteamDatagramCertificate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramCertificateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramCertificate cert = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramCertificateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramCertificate cert = 1;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramCertificateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramCertificate cert = 1;
  if (has_cert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramCertificateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramCertificate cert = 1;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramCertificateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramCertificateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramCertificateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCertificateRequest::MergeFrom(const CMsgSteamDatagramCertificateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cert()) {
      mutable_cert()->::CMsgSteamDatagramCertificate::MergeFrom(from.cert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramCertificateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificateRequest::CopyFrom(const CMsgSteamDatagramCertificateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificateRequest::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramCertificateRequest::Swap(CMsgSteamDatagramCertificateRequest* other) {
  if (other != this) {
    std::swap(cert_, other->cert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramCertificateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramCertificateRequest_descriptor_;
  metadata.reflection = CMsgSteamDatagramCertificateRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
